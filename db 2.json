{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/files/CV_grad.pdf","path":"files/CV_grad.pdf","modified":1,"renderable":0},{"_id":"source/files/CV.pdf","path":"files/CV.pdf","modified":1,"renderable":0},{"_id":"themes/hiero/source/css/comment-ds.css","path":"css/comment-ds.css","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/comment-gitment.css","path":"css/comment-gitment.css","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/glyphs.css","path":"css/glyphs.css","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/hiero.css","path":"css/hiero.css","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/vdonate.css","path":"css/vdonate.css","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hiero/source/preview/browser-support.png","path":"preview/browser-support.png","modified":1,"renderable":1},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/photos/Gyroscope_precession.gif","path":"photos/Gyroscope_precession.gif","modified":1,"renderable":0},{"_id":"themes/hiero/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/fonts/athemes-glyphs.woff","path":"css/fonts/athemes-glyphs.woff","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/js/main.js","path":"css/js/main.js","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/js/insight.js","path":"css/js/insight.js","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/js/my.js","path":"css/js/my.js","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/js/scripts.js","path":"css/js/scripts.js","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/js/totop.js","path":"css/js/totop.js","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/js/vdonate.js","path":"css/js/vdonate.js","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hiero/source/preview/Hiero_home.png","path":"preview/Hiero_home.png","modified":1,"renderable":1},{"_id":"themes/hiero/source/preview/logo-preview.jpg","path":"preview/logo-preview.jpg","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hiero/source/preview/mobile-preview.png","path":"preview/mobile-preview.png","modified":1,"renderable":1},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/img/donate.jpg","path":"img/donate.jpg","modified":1,"renderable":0},{"_id":"themes/hiero/source/css/images/pose.jpg","path":"css/images/pose.jpg","modified":1,"renderable":1},{"_id":"themes/hiero/source/preview/code-default-preview.png","path":"preview/code-default-preview.png","modified":1,"renderable":1},{"_id":"themes/hiero/source/preview/code-theme.jpg","path":"preview/code-theme.jpg","modified":1,"renderable":1},{"_id":"source/photos/1.png","path":"photos/1.png","modified":1,"renderable":0},{"_id":"source/files/UROP.pdf","path":"files/UROP.pdf","modified":1,"renderable":0},{"_id":"themes/hiero/source/css/images/data_idea.jpg","path":"css/images/data_idea.jpg","modified":1,"renderable":1},{"_id":"source/files/M2R.pdf","path":"files/M2R.pdf","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"8ff6a3d261fb6ced9c2e8f8bbd99181bf795f018","modified":1547887891120},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1547541656000},{"_id":"source/favicon.ico","hash":"943288f82fef78c3a40694a570cb788e306cf28e","modified":1554188026000},{"_id":"themes/hiero/.DS_Store","hash":"1cd559decbefe043b43c2b8192b9d05575278ba8","modified":1547963150331},{"_id":"themes/hiero/.gitignore","hash":"e16d3ff001df02e0572757bffa1147e968deeab8","modified":1547863043000},{"_id":"themes/hiero/.travis.yml","hash":"24851843a40973daaee47b2697e8b0dc4e6556b3","modified":1547863043000},{"_id":"themes/hiero/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1547863043000},{"_id":"themes/hiero/LICENSE","hash":"e84291eaaeb4a02004d4aa6a504cbf9475f5c562","modified":1547863043000},{"_id":"themes/hiero/README.cn.md","hash":"6023949265a04ca86c3f3b2fed7f9d3e8a758400","modified":1547863043000},{"_id":"themes/hiero/README.md","hash":"29d54c23fa8225e95f853a691b5ae0fba7fde219","modified":1547863043000},{"_id":"themes/hiero/_config.yml","hash":"034b8f49e2bf3e3a36b97b7235dccff1305a00b3","modified":1547969073325},{"_id":"themes/hiero/package.json","hash":"2f2998f0db3e376d767dc9cddad9a6203952d6aa","modified":1547863043000},{"_id":"source/_posts/.DS_Store","hash":"14704cb38abe4072cf133bea850284ed2736d5a1","modified":1554154072314},{"_id":"source/_posts/CentOS7下安装和配置redis.md","hash":"e53a5b4afd3d90f715a8b9030c4a986e5344e06a","modified":1547541656000},{"_id":"source/_posts/CentOS安装node8-x版本.md","hash":"be2b038364c27e33598a10ab112e4cd88f8709a6","modified":1547888034558},{"_id":"source/_posts/JS的静态作用域、子程序引用环境与参数传递类型.md","hash":"ba283c07507ab0590027cd2c74eac852273cb114","modified":1547541656000},{"_id":"source/_posts/Lagrangian Mechanics and Heavy-top Motion.md","hash":"18bc569f01ca5b786a457a1d9c78f64997825e81","modified":1547967575207},{"_id":"source/_posts/Linux服务器初始化设置用户和ssh公私钥登陆.md","hash":"a44d6e0fc9bc3e4e6dd8aa154ca16e5b5c351ec6","modified":1547541656000},{"_id":"source/_posts/PWA实践-serviceWorker生命周期、请求代理与通信.md","hash":"adeb78666ec3b904327a7da642d97e1aa7bc47a8","modified":1547541656000},{"_id":"source/_posts/Parallel computing with Fortran, OpenMP and MPI.md","hash":"485d0af9fc419ae5290b8b4f16aa6f42c95eee79","modified":1547968400439},{"_id":"source/_posts/centOS7-2搭建nginx环境以及负载均衡.md","hash":"85d4aab9a1f6ed11ce61361ef9717d610ef9a29f","modified":1547541656000},{"_id":"source/_posts/Stochastic Differential Equation simulations and uniform peacock problem.md","hash":"e854fbe7445eb3c39de816024622dbe1b6e5ebae","modified":1547967692582},{"_id":"source/_posts/dva源码解读.md","hash":"0201515818b0804b834493745f8d9ef1226998cb","modified":1547541656000},{"_id":"source/_posts/hello-world.md","hash":"7ef12f46b260dd9ca2f5fe8d6de766ebc5b1c98a","modified":1547861359000},{"_id":"source/_posts/一篇关于react历史的流水账.md","hash":"21a4019d075e69e30ffc1e5ed22821620651169e","modified":1547541656000},{"_id":"source/_posts/从源码分析sentry的错误信息收集.md","hash":"7358596ed8d590b0fee479f81826b184fd32a56d","modified":1547541656000},{"_id":"source/_posts/十条编写优化的JavaScript代码的建议.md","hash":"2ada7d41fff98ea1a80eb8601fdb7b5448d8c5d7","modified":1547541656000},{"_id":"source/_posts/浅谈前端中的二进制数据类型.md","hash":"750120163d9eee8ed821ced7e47c043bbfa6b537","modified":1547541656000},{"_id":"source/_posts/构建利用Proxy和Reflect实现双向数据绑定的微框架.md","hash":"e9cdaaacbf7f265262cc9ad527716ca8b32573eb","modified":1547541656000},{"_id":"source/_posts/深入浏览器web渲染与优化-续.md","hash":"917308065bce9eada9020f3122f1a24d8cf0c7e5","modified":1547541656000},{"_id":"source/_posts/深入浏览器web渲染与优化.md","hash":"4d8b47d007a6f60f31bcf7f795f395d05989e87c","modified":1547541656000},{"_id":"source/_posts/腾讯云北美服务器搭建ShadowSocks代理.md","hash":"4eda1931844f13433d0f40b0df5ede73bec9a68f","modified":1547541656000},{"_id":"source/about/index.md","hash":"2efc02d99ccc2e9834da1bda069540e27ca431a6","modified":1547969016253},{"_id":"source/categories/index.md","hash":"a0cd09fddedae566e4976b5311aba01484304d7a","modified":1547852766000},{"_id":"source/img/favicon.ico","hash":"6ed6db9af6e0d7b20e62a81d36d0556f47781d28","modified":1547541656000},{"_id":"source/photos/.DS_Store","hash":"c3a939401a6e9703589973beb7dbec1de320532f","modified":1547861276000},{"_id":"source/tags/index.md","hash":"4e3dfcd992b0772a4b8b034fe41ead1cc7ce9903","modified":1547541656000},{"_id":"themes/hiero/.git/FETCH_HEAD","hash":"fd13ba6d3a82fc2da22907f08a3f6ca5f34a681f","modified":1547863071000},{"_id":"themes/hiero/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1547863043000},{"_id":"themes/hiero/.git/ORIG_HEAD","hash":"aa705202139635093891380e28976a1e382a4068","modified":1547863071000},{"_id":"themes/hiero/.git/config","hash":"4b85326f094d8ccb088154e8f90d315bf3fb34db","modified":1547863043000},{"_id":"themes/hiero/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1547863039000},{"_id":"themes/hiero/.git/index","hash":"3dee65d14a847470bd7fd656f023acfe568a2fbe","modified":1547863043000},{"_id":"themes/hiero/.git/packed-refs","hash":"6c092467142ccda37ece4a488a09073686887516","modified":1547863043000},{"_id":"themes/hiero/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1547863043000},{"_id":"themes/hiero/languages/default.yml","hash":"ee7bedf8da941efc7c118b81709d770295862986","modified":1547963495391},{"_id":"themes/hiero/languages/en.yml","hash":"30432ef15f87a660cff93074d12552d5d72c53e6","modified":1547863043000},{"_id":"themes/hiero/languages/es.yml","hash":"3f1bf53f4b14199dd4fec5a9d845e83651527f29","modified":1547863043000},{"_id":"themes/hiero/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1547863043000},{"_id":"themes/hiero/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1547863043000},{"_id":"themes/hiero/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1547863043000},{"_id":"themes/hiero/languages/pt.yml","hash":"46bd5f121f4704e2cd6c0950ec18b549f03bfe5c","modified":1547863043000},{"_id":"themes/hiero/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1547863043000},{"_id":"themes/hiero/languages/zh-CN.yml","hash":"af75c31f0b9e87e9f7fa1eaa5fe4e74d225a7366","modified":1547863043000},{"_id":"themes/hiero/languages/zh-TW.yml","hash":"99cf68e340ba02b4a5afdc31c86e7295ae88dfc0","modified":1547863043000},{"_id":"themes/hiero/layout/.DS_Store","hash":"30fd00f5bacd46d3462e721ade8d81d738b458f7","modified":1547963145233},{"_id":"themes/hiero/layout/archive.ejs","hash":"8f56d91c8057fd045064379599a12460fdb16e1a","modified":1547884764000},{"_id":"themes/hiero/layout/categories.ejs","hash":"0788a872a9d407af8f0fad87f50416c11b512fc9","modified":1547865030000},{"_id":"themes/hiero/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1547863043000},{"_id":"themes/hiero/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1547863043000},{"_id":"themes/hiero/layout/layout.ejs","hash":"e96105f14a0ca9c53f0bf143c790c069a81fc2a2","modified":1547863043000},{"_id":"themes/hiero/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1547863043000},{"_id":"themes/hiero/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1547863043000},{"_id":"themes/hiero/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1547863043000},{"_id":"themes/hiero/layout/tags.ejs","hash":"d98cb3bbc72dab15b1b518e30cfda58ef35c842e","modified":1547863043000},{"_id":"themes/hiero/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1547863043000},{"_id":"themes/hiero/scripts/hierarchical-categories.js","hash":"6f761c8bf1c44e8bd4f8cb3c77cb585480d7a6ca","modified":1547863043000},{"_id":"themes/hiero/source/.DS_Store","hash":"0be31bfc9b2a8df7a1cf2daecb9e024d6067d370","modified":1554154098458},{"_id":"source/files/CV_grad.pdf","hash":"b23bcfd43b886ed91cf8eb7632b9f9c2b476372d","modified":1541440562798},{"_id":"source/files/CV.pdf","hash":"ed85a2cac3176e96e3a669cbbe31e3a16f6d937d","modified":1538645940000},{"_id":"themes/hiero/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1547863039000},{"_id":"themes/hiero/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1547863039000},{"_id":"themes/hiero/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1547863039000},{"_id":"themes/hiero/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1547863039000},{"_id":"themes/hiero/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1547863039000},{"_id":"themes/hiero/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1547863039000},{"_id":"themes/hiero/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1547863039000},{"_id":"themes/hiero/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1547863039000},{"_id":"themes/hiero/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1547863039000},{"_id":"themes/hiero/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1547863039000},{"_id":"themes/hiero/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1547863039000},{"_id":"themes/hiero/.git/logs/HEAD","hash":"bc4fae5685bcf351698d7b36edaf9bbb23e5312d","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/.DS_Store","hash":"f43716ccaf6d033533bbef8821967bfd257d5fe9","modified":1547882206000},{"_id":"themes/hiero/layout/_partial/archive-post.ejs","hash":"29a9f178815ff7f9f1393d11afe016d7230a6b51","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/after-footer.ejs","hash":"d17211328a78544b3bb984ec9461751f0bfb240a","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/archive.ejs","hash":"ba641e2e4801bcc9df994d0596823af1982b5a00","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/article.ejs","hash":"a7fbfdd3cfe11a97b2a28069e526c842ab6878e2","modified":1547866490000},{"_id":"themes/hiero/layout/_partial/baidu-analytics.ejs","hash":"990da0a787e78a8e44973536cc2dd547ee5aeaaf","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/cnzz-analytics.ejs","hash":"b0df992adf3c3c37189a66a98e6ef5ed06517ac4","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/busuanzi-analytics.ejs","hash":"990024f40425098a615b901160349034e7da1dcc","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/comment.ejs","hash":"5cea3f3d18ff181d51ffeace4a64a71ac0f773c6","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/donate.ejs","hash":"046e168c6aad9889199c9a48b57dc973b4f46dab","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/facebook-sdk.ejs","hash":"06038db50d2e1febdefa3f8e1512b332c7da5a17","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/footer.ejs","hash":"c83e3c2ed572229c8f57bd0b5d7a44ca6518249d","modified":1547885358000},{"_id":"themes/hiero/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/head.ejs","hash":"7a87dbcb851e90a71fedb39ed15a4586cc09bc56","modified":1547886611000},{"_id":"themes/hiero/layout/_partial/header-post.ejs","hash":"ff0c97447ce6dcae24148ea51631cd001aecc54d","modified":1547886211000},{"_id":"themes/hiero/layout/_partial/jsHelper.ejs","hash":"39d8783c5381098bd79a065e3b2a5cff68486513","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/tencent-analytics.ejs","hash":"93120ad06c5d73ca777470faf570e993a805e049","modified":1547863043000},{"_id":"themes/hiero/layout/_widget/archive.ejs","hash":"9fffde4e794b35f07c96eaec6d9373a40014da8f","modified":1547863043000},{"_id":"themes/hiero/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1547863043000},{"_id":"themes/hiero/layout/_widget/recent_posts.ejs","hash":"4ce0632c42a1aed974026c88ed945421e775695e","modified":1547863043000},{"_id":"themes/hiero/layout/_widget/search.ejs","hash":"9cd1f4d511e0cf5ffd95abb078bb683f2046000e","modified":1547863043000},{"_id":"themes/hiero/layout/_widget/social.ejs","hash":"013beb5d78dfe34507b766f551b4a43ff628a5fe","modified":1547863043000},{"_id":"themes/hiero/layout/_widget/tagcloud.ejs","hash":"6266c3c57641c9f0cc9d0066c71d891ba2d3757c","modified":1547965122648},{"_id":"themes/hiero/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1547863043000},{"_id":"themes/hiero/layout/search/baidu.ejs","hash":"5ab1e59191c95d58a9935f011c7e1a2129643b36","modified":1547863043000},{"_id":"themes/hiero/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1547863043000},{"_id":"themes/hiero/layout/search/index.ejs","hash":"6ac6b28dc2085613dd380f5b3419e3040f2313df","modified":1547863043000},{"_id":"themes/hiero/layout/search/insight.ejs","hash":"7d2a6d9639c08852345239d131784328ddf0493b","modified":1547863043000},{"_id":"themes/hiero/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1547863043000},{"_id":"themes/hiero/source/css/.DS_Store","hash":"7ec66e7ca19fd457f61126f84673e53e1e662ce9","modified":1547883749000},{"_id":"themes/hiero/source/css/_extend.styl","hash":"b099bbeb871790dbc9e1e48533a1f9a52c767506","modified":1547863043000},{"_id":"themes/hiero/source/css/_variables.styl","hash":"dc75c6537863aeb741acf1e838355306c4d03b61","modified":1547863043000},{"_id":"themes/hiero/source/css/comment-ds.css","hash":"f699db93c8901b302b85385698228e8511d5e9d6","modified":1547863043000},{"_id":"themes/hiero/source/css/comment-gitment.css","hash":"0a109d778790ee7938626a6611009d80a47375ed","modified":1547863043000},{"_id":"themes/hiero/source/css/glyphs.css","hash":"c4088f9a347e42a31d9aabc8aa17ead3d1ed8b8e","modified":1547863043000},{"_id":"themes/hiero/source/css/hiero.css","hash":"e2c5f62610f5816ee6bd7844a028cf696e1db63f","modified":1547883601000},{"_id":"themes/hiero/source/css/my.css","hash":"bff3ece34f1fdbe4f83c77fd7323a7f5fce82a3e","modified":1547863043000},{"_id":"themes/hiero/source/css/style.styl","hash":"d8cdd230ffde72688581816bd8c4cc2b003ae643","modified":1547863043000},{"_id":"themes/hiero/source/css/vdonate.css","hash":"bca2d291a71e7358654c51f23e8bfb467b2bc8b2","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547863043000},{"_id":"themes/hiero/source/preview/browser-support.png","hash":"a6d8498553550c6b18a8f22bcd2f53c993c7d677","modified":1547863043000},{"_id":"source/img/avatar.jpg","hash":"5304e3982426a771746874abc1e70bc93261e197","modified":1547541656000},{"_id":"source/photos/Gyroscope_precession.gif","hash":"a6f264693134c2554c75d824e759aff0c0bad610","modified":1528546140000},{"_id":"themes/hiero/source/css/_partial/footer.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547863043000},{"_id":"themes/hiero/source/css/_partial/header-post.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547863043000},{"_id":"themes/hiero/source/css/_partial/header.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547863043000},{"_id":"themes/hiero/.git/refs/heads/master","hash":"aa705202139635093891380e28976a1e382a4068","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/post/busuanzi-analytics.ejs","hash":"125fcedc8baf7dc67587c2ded05bfa8df868989a","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/post/category.ejs","hash":"7d167be432a0f41034f7e34ea33eb8748202358d","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/post/date.ejs","hash":"441dbe17d28d784805e206d8bbe8227e9ce94c1a","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/post/gallery.ejs","hash":"30028f10a4f03561e53da323d06b292e1ae7990c","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/post/mathjax.ejs","hash":"a6e768593f100041b930b287171b1949d73bd6a8","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/post/nav.ejs","hash":"d521b9150fb5eb1f61f7ab7d9a79dba4b661fb62","modified":1547866441000},{"_id":"themes/hiero/layout/_partial/post/tag.ejs","hash":"e6ab2d49029ed4b15204f84928b14b036a0c9c84","modified":1547863043000},{"_id":"themes/hiero/layout/_partial/post/title.ejs","hash":"a61267f27f2148321e549344be91dbc4e22e1a48","modified":1547863043000},{"_id":"themes/hiero/source/css/_partial/archive.styl","hash":"0653aca784c45499baed0cb8f403c74999caf5f8","modified":1547884351000},{"_id":"themes/hiero/source/css/_partial/article.styl","hash":"793b30c3e2b818785148dd61c81a934308a7f696","modified":1547884956000},{"_id":"themes/hiero/source/css/_partial/comment.styl","hash":"f23dbf9c1224559314f7d10b7fee030a9ffab58a","modified":1547863043000},{"_id":"themes/hiero/source/css/_partial/highlight.styl","hash":"c30e647464bda8bc425b98761c6ed36a5dbedf76","modified":1547863043000},{"_id":"themes/hiero/source/css/_partial/insight.styl","hash":"f1a152ef3b6998e313b7771ce57cb675cd95b269","modified":1547863043000},{"_id":"themes/hiero/source/css/_partial/mobile.styl","hash":"fcfbaf24634519063af46953e0eb733a8ada5556","modified":1547863043000},{"_id":"themes/hiero/source/css/_partial/sidebar-aside.styl","hash":"67e8073e88bf48761e590dbd0f66eb376b748ba9","modified":1547863043000},{"_id":"themes/hiero/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1547863043000},{"_id":"themes/hiero/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1547863043000},{"_id":"themes/hiero/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1547863043000},{"_id":"themes/hiero/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1547863043000},{"_id":"themes/hiero/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1547863043000},{"_id":"themes/hiero/source/css/fonts/athemes-glyphs.woff","hash":"f1ac9ffcc97571ceff48b68792c34de97bc289c0","modified":1547863043000},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1547863043000},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1547863043000},{"_id":"themes/hiero/source/css/images/favicon.ico","hash":"277372f07132304ea7933196b9cfa07fd23fa603","modified":1547863043000},{"_id":"themes/hiero/source/css/js/main.js","hash":"2381eccd9a1ac3d70988f9ea5a36d34f63153bcf","modified":1547863043000},{"_id":"themes/hiero/source/css/js/insight.js","hash":"2995f3f94d0a9887b08e38a6f5053b6ca2997c19","modified":1547863043000},{"_id":"themes/hiero/source/css/js/my.js","hash":"88772319186b065042f9a3d4433059ca0f295174","modified":1547863043000},{"_id":"themes/hiero/source/css/js/scripts.js","hash":"555ad1235d59d427b2ff4793aab276ffe7ed7a87","modified":1547863043000},{"_id":"themes/hiero/source/css/js/totop.js","hash":"560baaa7bbf70ce67261b39aef61293646d9e539","modified":1547863043000},{"_id":"themes/hiero/source/css/js/vdonate.js","hash":"5738414c642d30e43943a69287b3d25a0b6be135","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1547863043000},{"_id":"themes/hiero/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1547863043000},{"_id":"themes/hiero/source/preview/Hiero_home.png","hash":"7b430bf82a3f8f4194bac272822ed697e976117f","modified":1547863043000},{"_id":"themes/hiero/source/preview/logo-preview.jpg","hash":"18ec270e302e6870953bb59bf57052cd663659ec","modified":1547863043000},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1547863043000},{"_id":"themes/hiero/source/preview/mobile-preview.png","hash":"daa8cec3fdae123d97dd9893502e138a3779535e","modified":1547863043000},{"_id":"themes/hiero/.git/logs/refs/heads/master","hash":"bc4fae5685bcf351698d7b36edaf9bbb23e5312d","modified":1547863043000},{"_id":"themes/hiero/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1547863043000},{"_id":"themes/hiero/.git/logs/refs/remotes/origin/HEAD","hash":"bc4fae5685bcf351698d7b36edaf9bbb23e5312d","modified":1547863043000},{"_id":"themes/hiero/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1547863043000},{"_id":"source/img/donate.jpg","hash":"bae2b0f605495463a161716e35884b9c8f23a7a1","modified":1547541656000},{"_id":"themes/hiero/source/css/images/pose.jpg","hash":"e8dcdb6e03bd02d831bae593feccb7028c9dc5e9","modified":1547863043000},{"_id":"themes/hiero/source/preview/code-default-preview.png","hash":"0862313cb73a498155d72aa2fa309470b12bf0cd","modified":1547863043000},{"_id":"themes/hiero/source/preview/code-theme.jpg","hash":"8c8512fd04e6106033656d10e92d51de76cca6d8","modified":1547863043000},{"_id":"source/photos/1.png","hash":"71f2ca6b894fe00de75dad4d94a94f819f3fe04a","modified":1547748948000},{"_id":"themes/hiero/.git/objects/pack/pack-3a8784f0398ab082f45f11c7ee3999110c0b4492.idx","hash":"4e1894c4270ace1c9a921527acf51f10f4def2b6","modified":1547863042000},{"_id":"source/files/UROP.pdf","hash":"9d709e25405f95b3b0f25aa98c3bc62dce75b53d","modified":1535653708000},{"_id":"themes/hiero/source/css/images/data_idea.jpg","hash":"960537d28148b01b6caa242f4a85aa94956fc871","modified":1547961654808},{"_id":"source/files/M2R.pdf","hash":"f6197e5fa22cf4a6d37a97a533fe695a8c12e17c","modified":1529326985000},{"_id":"themes/hiero/.git/objects/pack/pack-3a8784f0398ab082f45f11c7ee3999110c0b4492.pack","hash":"9f63e58e946e20e547377e713c1267dc2a911f7a","modified":1547863042000},{"_id":"public/atom.xml","hash":"98f0500e95d7842efe3e0aa011ea6eee9adfc8da","modified":1554161086055},{"_id":"public/content.json","hash":"c6330d213777db7591bcb367c568407bc5f2e892","modified":1554161086056},{"_id":"public/sitemap.xml","hash":"e3422e8050289cf7db772ac9bc6d1726527e51af","modified":1554161086444},{"_id":"public/2018/10/27/Parallel computing with Fortran, OpenMP and MPI/index.html","hash":"159cd87c52de042b43b953980b600cc9a9eb2599","modified":1554161086466},{"_id":"public/404.html","hash":"da360f0a924ee94c56e6e949976e07e45a055f27","modified":1554161086466},{"_id":"public/about/index.html","hash":"e30443d862de73d6af23f3ed60701f54ddffa728","modified":1554161086466},{"_id":"public/categories/index.html","hash":"4c2932454c272b382a7373fe3566021c1afa4a53","modified":1554161086467},{"_id":"public/2019/01/18/hello-world/index.html","hash":"2cd778c698a4ec52817017470d32d95a9e82c3dc","modified":1554161086467},{"_id":"public/tags/index.html","hash":"6897de2c31cd6454e07c2c2e32006d5aeaa6e410","modified":1554161086467},{"_id":"public/2018/09/27/Stochastic Differential Equation simulations and uniform peacock problem/index.html","hash":"8c0cab26f7c0893e22e3b3df45c0c62e99b59d06","modified":1554161086467},{"_id":"public/2018/08/18/从源码分析sentry的错误信息收集/index.html","hash":"abaf7918a1fe3b6cc86a26f278ff6cefe9efaee8","modified":1554161086467},{"_id":"public/2018/06/20/Lagrangian Mechanics and Heavy-top Motion/index.html","hash":"bb8883821cb38954fdaffd6cbffd0c6c5b15c895","modified":1554161086467},{"_id":"public/2018/06/09/一篇关于react历史的流水账/index.html","hash":"0cacc8e4f8aa75bdd9ef8fd2ac700fa6aa1f155d","modified":1554161086467},{"_id":"public/2018/05/29/十条编写优化的JavaScript代码的建议/index.html","hash":"e15d9af9b6410afdf632250d21e0763ce5a6931f","modified":1554161086467},{"_id":"public/2018/04/11/Linux服务器初始化设置用户和ssh公私钥登陆/index.html","hash":"27a6f3afe53796c023fae8f8c3cb7ae0e23e1f3f","modified":1554161086467},{"_id":"public/2018/05/08/浅谈前端中的二进制数据类型/index.html","hash":"47357e32d2c6e34ddb9df36f9b3449c7d6c303c3","modified":1554161086467},{"_id":"public/2018/04/10/dva源码解读/index.html","hash":"2b2599f4ad22d3ad6b45632f5827e5af98940bd3","modified":1554161086467},{"_id":"public/2018/04/08/构建利用Proxy和Reflect实现双向数据绑定的微框架/index.html","hash":"e32f3bd9f8ba1a26862c2890efc4b435a67b1b91","modified":1554161086467},{"_id":"public/2018/02/10/PWA实践-serviceWorker生命周期、请求代理与通信/index.html","hash":"e615c8bf4192c1fbc9058bfb2b2ea68ec458def8","modified":1554161086467},{"_id":"public/2017/12/14/CentOS安装node8-x版本/index.html","hash":"207c9ab847b727edf1273c671f35fda99b98b2e5","modified":1554161086467},{"_id":"public/2017/08/31/深入浏览器web渲染与优化-续/index.html","hash":"532b2f5d16e057efcd0c32e1378d37549c237b90","modified":1554161086467},{"_id":"public/2017/08/27/深入浏览器web渲染与优化/index.html","hash":"a9d8404a1498dedff7d733bd28f24afdd794d448","modified":1554161086467},{"_id":"public/2017/01/10/JS的静态作用域、子程序引用环境与参数传递类型/index.html","hash":"ea4153c9f20935dff86043c75b8f1187025964ff","modified":1554161086467},{"_id":"public/2016/10/04/CentOS7下安装和配置redis/index.html","hash":"eab6c2753b6911bd04f50f8165a6490785a2406d","modified":1554161086467},{"_id":"public/2016/08/08/腾讯云北美服务器搭建ShadowSocks代理/index.html","hash":"a09b32012ab26085271608879cb849d6c4985a80","modified":1554161086467},{"_id":"public/2016/08/03/centOS7-2搭建nginx环境以及负载均衡/index.html","hash":"50b9737bdeabec9b68ba1e23fd957f772d3a298d","modified":1554161086467},{"_id":"public/categories/Research-projects/index.html","hash":"11b4e5deba873401d25b6adf50abc9f740c74bd7","modified":1554161086467},{"_id":"public/categories/CS-projects/index.html","hash":"88c951dcbf67b69ce33d45711bd16cb02aecee3b","modified":1554161086468},{"_id":"public/categories/Research-projects/M2R/index.html","hash":"da4a815cbc9511f493acc130853c180e359236ef","modified":1554161086468},{"_id":"public/categories/CS-projects/M3C-imperial/index.html","hash":"9c2fe0d360e740a5b8ac3cebd667083158892288","modified":1554161086468},{"_id":"public/categories/Research-projects/UROP/index.html","hash":"86abb7593c43984d887fa9d2a378443b5ba33655","modified":1554161086468},{"_id":"public/archives/index.html","hash":"4367c5908894c0d0db9a93e87726081ebe30953b","modified":1554161086468},{"_id":"public/archives/page/2/index.html","hash":"cdfcb5233ca6af0b63cab256946a5384d541db20","modified":1554161086468},{"_id":"public/archives/2016/index.html","hash":"0b81f43c98ad0cb437b7e4d1b99b916144e410af","modified":1554161086468},{"_id":"public/archives/2016/08/index.html","hash":"d87c1b3478e83467ec07d400ec658cee0189ef2e","modified":1554161086468},{"_id":"public/archives/2016/10/index.html","hash":"a43ab5b43502536fa62b9779bc8059cdf205bf4d","modified":1554161086468},{"_id":"public/archives/2017/index.html","hash":"1653f3bb21ac6be9cc96e46b937bebf67af1a09f","modified":1554161086468},{"_id":"public/archives/2017/01/index.html","hash":"f2e62a282eb85d07c68261122bce34a7c4ec5d7b","modified":1554161086468},{"_id":"public/archives/2017/08/index.html","hash":"befef11985834b1bdc98897bfbc3cfce27568404","modified":1554161086468},{"_id":"public/archives/2017/12/index.html","hash":"c76ea6bff58b502cf687e5d610bdaef0e90cd13e","modified":1554161086468},{"_id":"public/archives/2018/index.html","hash":"bb8eab76753082590b79fecc2bc94b28268afb91","modified":1554161086468},{"_id":"public/archives/2018/page/2/index.html","hash":"7dcbff60ab28ec1c0c17ea6da61512308eed6fc9","modified":1554161086468},{"_id":"public/archives/2018/02/index.html","hash":"c3d6a1365fdd66f1517bfd69d63dafceb3de2c0f","modified":1554161086468},{"_id":"public/archives/2018/04/index.html","hash":"f44bce8f64fd97c6bb7f5d5609c4d2eac2e88e22","modified":1554161086468},{"_id":"public/archives/2018/05/index.html","hash":"cde26ebbb81e8d662cf5a50fde0a07b56cc8dd0a","modified":1554161086468},{"_id":"public/archives/2018/06/index.html","hash":"d5613f163ff2507357b3d60ba489cd6bbf097117","modified":1554161086469},{"_id":"public/archives/2018/08/index.html","hash":"11efa870483e01f6878409c1ec8b275b3174f517","modified":1554161086469},{"_id":"public/archives/2018/09/index.html","hash":"d082012bd0c9b3dedb5a8003a96b70909f323fa2","modified":1554161086469},{"_id":"public/archives/2018/10/index.html","hash":"91ce21cf11492f39e3335a704838da659fc6c64d","modified":1554161086469},{"_id":"public/archives/2019/index.html","hash":"cb38fed0ef2e3e428046bbe678941f4cfcefd247","modified":1554161086469},{"_id":"public/archives/2019/01/index.html","hash":"47f5a9dd2c426e7a990e0129e1480248a18a6655","modified":1554161086469},{"_id":"public/index.html","hash":"c1dd1519e827e5700c63b332b5c85e572fda69b4","modified":1554161086469},{"_id":"public/page/2/index.html","hash":"76b8978ad45c62b148ca7bd1b948a72c76ea5bcf","modified":1554161086469},{"_id":"public/tags/centOS/index.html","hash":"dc333331db70baa2c8cd1bd2858e4814594e668c","modified":1554161086469},{"_id":"public/tags/redis/index.html","hash":"2aed5aa8543ce9cb92140d508a3061e8c778e054","modified":1554161086469},{"_id":"public/tags/node/index.html","hash":"5ddeab121f33d4dae39599b43d665bbefa2fe58b","modified":1554161086469},{"_id":"public/tags/javascript/index.html","hash":"a62d812faa533cde9fa30f0d5dcb953a402200d5","modified":1554161086469},{"_id":"public/tags/Math/index.html","hash":"32f74358343c00f877b20a7f8813314abc138bfa","modified":1554161086469},{"_id":"public/tags/Mechanics/index.html","hash":"cc37772e32ebf146902d6220aebfe555fce8d593","modified":1554161086469},{"_id":"public/tags/Matlab/index.html","hash":"3dcc547338601a3fb16565554f66b3d629aed9d8","modified":1554161086469},{"_id":"public/tags/Linux/index.html","hash":"a0e6b5b7d029a08caa6e4e7a3993e1ff4c553fae","modified":1554161086469},{"_id":"public/tags/ssh/index.html","hash":"61b20a24c932d2392b741b2fa15ed2afb23643bb","modified":1554161086469},{"_id":"public/tags/Computer-science/index.html","hash":"2fabb82ad3f7ad3bba2b5a11c5d1179fd417be6e","modified":1554161086469},{"_id":"public/tags/Parallel-computing/index.html","hash":"3c381c93b3684f888958f34bcc1a7dcb521b4db1","modified":1554161086469},{"_id":"public/tags/Fortran/index.html","hash":"2477084122f5e1f0756eb7b155fe6fe77039bffb","modified":1554161086469},{"_id":"public/tags/OpenMP/index.html","hash":"ade5d4a2b6cdb734637f0d7a3ddbaf2cae3e2af6","modified":1554161086469},{"_id":"public/tags/MPI/index.html","hash":"7aff8e65b2ee30c1422341cd8540aa75d7d931ec","modified":1554161086470},{"_id":"public/tags/性能优化/index.html","hash":"b4128a5790c4b8afad58c45b2f6efa9ef05b02c0","modified":1554161086470},{"_id":"public/tags/ShadowSocks/index.html","hash":"7243960eea9c7b522f12117c2217a539dd0175e4","modified":1554161086470},{"_id":"public/tags/PWA/index.html","hash":"69139bc28d7ffd217022428098f873976a0c198b","modified":1554161086470},{"_id":"public/tags/nginx/index.html","hash":"286fd8bb8cc216ce007499308217301a6f1e95ba","modified":1554161086470},{"_id":"public/tags/Stochastic-Differential-Equations/index.html","hash":"202e03c1df0f925610f70f45985b5aaf7dc34a1e","modified":1554161086470},{"_id":"public/tags/python/index.html","hash":"0daaeaea58a0873924df9edbf1bc222365d5e20f","modified":1554161086470},{"_id":"public/tags/react/index.html","hash":"84db1bf63152e55e5527425d733e095cf91f0877","modified":1554161086470},{"_id":"public/tags/MVVM/index.html","hash":"7af105f91c99e5a20aa05cc3d3b0e8d5776a7295","modified":1554161086470},{"_id":"public/tags/前端监控/index.html","hash":"968b54a46cefc6ded7808d0a6910fbe9c41a713f","modified":1554161086470},{"_id":"public/tags/前端框架/index.html","hash":"75a932b09aab4854f0b3e33b11a00bc4a9ba6d65","modified":1554161086470},{"_id":"public/favicon.ico","hash":"943288f82fef78c3a40694a570cb788e306cf28e","modified":1554161086476},{"_id":"public/img/favicon.ico","hash":"6ed6db9af6e0d7b20e62a81d36d0556f47781d28","modified":1554161086476},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554161086476},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554161086476},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554161086476},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554161086476},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554161086476},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554161086476},{"_id":"public/preview/browser-support.png","hash":"a6d8498553550c6b18a8f22bcd2f53c993c7d677","modified":1554161086476},{"_id":"public/css/fonts/athemes-glyphs.woff","hash":"f1ac9ffcc97571ceff48b68792c34de97bc289c0","modified":1554161086477},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1554161086477},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1554161086477},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1554161086477},{"_id":"public/css/images/favicon.ico","hash":"277372f07132304ea7933196b9cfa07fd23fa603","modified":1554161086477},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554161086477},{"_id":"public/files/CV_grad.pdf","hash":"b23bcfd43b886ed91cf8eb7632b9f9c2b476372d","modified":1554161086813},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1554161086814},{"_id":"public/css/comment-ds.css","hash":"f699db93c8901b302b85385698228e8511d5e9d6","modified":1554161086820},{"_id":"public/css/glyphs.css","hash":"c4088f9a347e42a31d9aabc8aa17ead3d1ed8b8e","modified":1554161086820},{"_id":"public/css/my.css","hash":"bff3ece34f1fdbe4f83c77fd7323a7f5fce82a3e","modified":1554161086820},{"_id":"public/css/vdonate.css","hash":"bca2d291a71e7358654c51f23e8bfb467b2bc8b2","modified":1554161086820},{"_id":"public/css/comment-gitment.css","hash":"0a109d778790ee7938626a6611009d80a47375ed","modified":1554161086820},{"_id":"public/css/js/main.js","hash":"2381eccd9a1ac3d70988f9ea5a36d34f63153bcf","modified":1554161086820},{"_id":"public/css/js/my.js","hash":"88772319186b065042f9a3d4433059ca0f295174","modified":1554161086820},{"_id":"public/css/js/scripts.js","hash":"555ad1235d59d427b2ff4793aab276ffe7ed7a87","modified":1554161086820},{"_id":"public/css/js/totop.js","hash":"560baaa7bbf70ce67261b39aef61293646d9e539","modified":1554161086820},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1554161086820},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1554161086820},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1554161086820},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1554161086820},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1554161086820},{"_id":"public/css/style.css","hash":"8f33c0d41778327d0fb9ccea0aea64eac57d6676","modified":1554161086820},{"_id":"public/files/CV.pdf","hash":"ed85a2cac3176e96e3a669cbbe31e3a16f6d937d","modified":1554161086820},{"_id":"public/preview/Hiero_home.png","hash":"7b430bf82a3f8f4194bac272822ed697e976117f","modified":1554161086820},{"_id":"public/preview/logo-preview.jpg","hash":"18ec270e302e6870953bb59bf57052cd663659ec","modified":1554161086820},{"_id":"public/css/js/insight.js","hash":"2995f3f94d0a9887b08e38a6f5053b6ca2997c19","modified":1554161086824},{"_id":"public/css/js/vdonate.js","hash":"5738414c642d30e43943a69287b3d25a0b6be135","modified":1554161086824},{"_id":"public/photos/Gyroscope_precession.gif","hash":"a6f264693134c2554c75d824e759aff0c0bad610","modified":1554161086824},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1554161086824},{"_id":"public/css/hiero.css","hash":"e2c5f62610f5816ee6bd7844a028cf696e1db63f","modified":1554161086827},{"_id":"public/img/avatar.jpg","hash":"5304e3982426a771746874abc1e70bc93261e197","modified":1554161086828},{"_id":"public/preview/mobile-preview.png","hash":"daa8cec3fdae123d97dd9893502e138a3779535e","modified":1554161086828},{"_id":"public/css/images/pose.jpg","hash":"e8dcdb6e03bd02d831bae593feccb7028c9dc5e9","modified":1554161086839},{"_id":"public/preview/code-default-preview.png","hash":"0862313cb73a498155d72aa2fa309470b12bf0cd","modified":1554161086839},{"_id":"public/preview/code-theme.jpg","hash":"8c8512fd04e6106033656d10e92d51de76cca6d8","modified":1554161086843},{"_id":"public/photos/1.png","hash":"71f2ca6b894fe00de75dad4d94a94f819f3fe04a","modified":1554161086844},{"_id":"public/img/donate.jpg","hash":"bae2b0f605495463a161716e35884b9c8f23a7a1","modified":1554161086845},{"_id":"public/files/UROP.pdf","hash":"9d709e25405f95b3b0f25aa98c3bc62dce75b53d","modified":1554161086849},{"_id":"public/css/images/data_idea.jpg","hash":"960537d28148b01b6caa242f4a85aa94956fc871","modified":1554161086855},{"_id":"public/files/M2R.pdf","hash":"f6197e5fa22cf4a6d37a97a533fe695a8c12e17c","modified":1554161086858}],"Category":[{"name":"Research projects","_id":"cjtyzdrzz000agxy0vo7e8zok"},{"name":"CS projects","_id":"cjtyzds05000fgxy0oy31lz93"},{"name":"M2R","parent":"cjtyzdrzz000agxy0vo7e8zok","_id":"cjtyzds07000lgxy01rttqc4h"},{"name":"M3C@imperial","parent":"cjtyzds05000fgxy0oy31lz93","_id":"cjtyzds08000ogxy0xryaz0wf"},{"name":"UROP","parent":"cjtyzdrzz000agxy0vo7e8zok","_id":"cjtyzds0z001sgxy0bknp1cac"}],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2019-01-19T08:37:26.990Z","updated":"2019-01-15T08:40:56.000Z","path":"404.html","title":"","comments":1,"_id":"cjtyzdryv0000gxy0wdg22l7r","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2019-01-19T12:16:43.000Z","comments":1,"_content":"\n\n>积跬步以至千里<br>One step at a time\n\nMail: zihuan.ran16@imperial.ac.uk\n\nHi!<br><br>I am Alex Ran(冉梓欢), a graduating mathematics undergraduate at Imperial College London. <br><br>I worked as data scientist intern at Hokodo, a fin-tech startup, and I will be working as an intern in Machine Learning and e-commercing at Natwest Markets later this year.<br><br>I am interested in data collection, data cleaning, database managing and statistical&ML models. <br><br>I am also interested in ballet, mediterranean food, Chinese calligraphy and cats.<br><br>I was born in Dalian, China, with combined gene from Inner Mongolia and Sichuan. <br><br>I am aiming to help deriving more helpful insights from data.\n\nFeel free to have a glance at my [one page CV](/files/CV.pdf), [longer one](/files/CV_grad.pdf), or reach me in any way with the media buttons in the side bar.\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2019-01-19 21:16:43\ncomments: true\n---\n\n\n>积跬步以至千里<br>One step at a time\n\nMail: zihuan.ran16@imperial.ac.uk\n\nHi!<br><br>I am Alex Ran(冉梓欢), a graduating mathematics undergraduate at Imperial College London. <br><br>I worked as data scientist intern at Hokodo, a fin-tech startup, and I will be working as an intern in Machine Learning and e-commercing at Natwest Markets later this year.<br><br>I am interested in data collection, data cleaning, database managing and statistical&ML models. <br><br>I am also interested in ballet, mediterranean food, Chinese calligraphy and cats.<br><br>I was born in Dalian, China, with combined gene from Inner Mongolia and Sichuan. <br><br>I am aiming to help deriving more helpful insights from data.\n\nFeel free to have a glance at my [one page CV](/files/CV.pdf), [longer one](/files/CV_grad.pdf), or reach me in any way with the media buttons in the side bar.\n","updated":"2019-01-20T07:23:36.253Z","path":"about/index.html","_id":"cjtyzdrzs0002gxy0q4n60n2n","content":"<blockquote>\n<p>积跬步以至千里<br>One step at a time</p>\n</blockquote>\n<p>Mail: <a href=\"mailto:zihuan.ran16@imperial.ac.uk\" target=\"_blank\" rel=\"noopener\">zihuan.ran16@imperial.ac.uk</a></p>\n<p>Hi!<br><br>I am Alex Ran(冉梓欢), a graduating mathematics undergraduate at Imperial College London. <br><br>I worked as data scientist intern at Hokodo, a fin-tech startup, and I will be working as an intern in Machine Learning and e-commercing at Natwest Markets later this year.<br><br>I am interested in data collection, data cleaning, database managing and statistical&amp;ML models. <br><br>I am also interested in ballet, mediterranean food, Chinese calligraphy and cats.<br><br>I was born in Dalian, China, with combined gene from Inner Mongolia and Sichuan. <br><br>I am aiming to help deriving more helpful insights from data.</p>\n<p>Feel free to have a glance at my <a href=\"/files/CV.pdf\">one page CV</a>, <a href=\"/files/CV_grad.pdf\">longer one</a>, or reach me in any way with the media buttons in the side bar.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>积跬步以至千里<br>One step at a time</p>\n</blockquote>\n<p>Mail: <a href=\"mailto:zihuan.ran16@imperial.ac.uk\" target=\"_blank\" rel=\"noopener\">zihuan.ran16@imperial.ac.uk</a></p>\n<p>Hi!<br><br>I am Alex Ran(冉梓欢), a graduating mathematics undergraduate at Imperial College London. <br><br>I worked as data scientist intern at Hokodo, a fin-tech startup, and I will be working as an intern in Machine Learning and e-commercing at Natwest Markets later this year.<br><br>I am interested in data collection, data cleaning, database managing and statistical&amp;ML models. <br><br>I am also interested in ballet, mediterranean food, Chinese calligraphy and cats.<br><br>I was born in Dalian, China, with combined gene from Inner Mongolia and Sichuan. <br><br>I am aiming to help deriving more helpful insights from data.</p>\n<p>Feel free to have a glance at my <a href=\"/files/CV.pdf\">one page CV</a>, <a href=\"/files/CV_grad.pdf\">longer one</a>, or reach me in any way with the media buttons in the side bar.</p>\n"},{"layout":"categories","title":"Categories","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"Categories\"\n---\n","date":"2019-01-19T08:37:27.805Z","updated":"2019-01-18T23:06:06.000Z","path":"categories/index.html","comments":1,"_id":"cjtyzdrzu0004gxy0o68s3bj7","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\n---\n","date":"2019-04-01T21:28:05.134Z","updated":"2019-01-15T08:40:56.000Z","path":"tags/index.html","comments":1,"_id":"cjtyzds0u001mgxy0cl12ldzq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CentOS7下安装和配置redis","date":"2016-10-04T14:52:11.000Z","_content":"Redis是一个高性能的，开源key-value型数据库。是构建高性能，可扩展的Web应用的完美解决方案，可以内存存储亦可持久化存储。因为要使用跨进程，跨服务级别的数据缓存，在对比多个方案后，决定使用Redis。顺便整理下Redis的安装过程，以便查阅。\n\n\n 1 . 下载Redis\n目前，最新的Redist版本为3.0，使用wget下载，命令如下：\n```\n\n# wget http://download.redis.io/releases/redis-3.0.4.tar.gz\n\n```\n 2 . 解压Redis\n下载完成后，使用tar命令解压下载文件：\n```\n\n# tar -xzvf redis-3.0.4.tar.gz\n```\n3 . 编译安装Redis\n切换至程序目录，并执行make命令编译：\n```\n# cd redis-3.0.4\n# make\n```\n执行安装命令\n```\n# make install\n```\nmake install安装完成后，会在/usr/local/bin目录下生成下面几个可执行文件，它们的作用分别是：\n\n* redis-server：Redis服务器端启动程序\n* redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作\n* redis-benchmark：Redis性能测试工具\n* redis-check-aof：数据修复工具\n* redis-check-dump：检查导出工具\n\n备注\n\n有的机器会出现类似以下错误：\n```\nmake[1]: Entering directory `/root/redis/src'\nYou need tcl 8.5 or newer in order to run the Redis test\n……\n```\n这是因为没有安装tcl导致，yum安装即可：\n```\nyum install tcl\n```\n4 . 配置Redis\n复制配置文件到/etc/目录：\n```\n# cp redis.conf /etc/\n```\n为了让Redis后台运行，一般还需要修改redis.conf文件：\n```\nvi /etc/redis.conf\n```\n修改daemonize配置项为yes，使Redis进程在后台运行：\n```\ndaemonize yes\n```\n5 . 启动Redis\n配置完成后，启动Redis：\n```\n# cd /usr/local/bin\n# ./redis-server /etc/redis.conf\n```\n检查启动情况：\n```\n# ps -ef | grep redis\n```\n看到类似下面的一行，表示启动成功：\n```\nroot     18443     1  0 13:05 ?        00:00:00 ./redis-server *:6379 \n```\n6 . 添加开机启动项\n让Redis开机运行可以将其添加到rc.local文件，也可将添加为系统服务service。本文使用rc.local的方式，添加service请参考：Redis 配置为 Service 系统服务 。\n\n为了能让Redis在服务器重启后自动启动，需要将启动命令写入开机启动项：\n```\necho \"/usr/local/bin/redis-server /etc/redis.conf\" >>/etc/rc.local\n```\n7 . Redis配置参数\n在 前面的操作中，我们用到了使Redis进程在后台运行的参数，下面介绍其它一些常用的Redis启动参数：\n```\ndaemonize：是否以后台daemon方式运行\npidfile：pid文件位置\nport：监听的端口号\ntimeout：请求超时时间\nloglevel：log信息级别\nlogfile：log文件位置\ndatabases：开启数据库的数量\nsave * *：保存快照的频率，第一个*表示多长时间，第三个*表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。\nrdbcompression：是否使用压缩\ndbfilename：数据快照文件名（只是文件名）\ndir：数据快照的保存目录（仅目录）\nappendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。\nappendfsync：appendonlylog如何同步到磁盘。三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步\n```\n","source":"_posts/CentOS7下安装和配置redis.md","raw":"---\ntitle: CentOS7下安装和配置redis\ndate: 2016-10-4 23:52:11\ntags:\n    - centOS\n    - redis\n---\nRedis是一个高性能的，开源key-value型数据库。是构建高性能，可扩展的Web应用的完美解决方案，可以内存存储亦可持久化存储。因为要使用跨进程，跨服务级别的数据缓存，在对比多个方案后，决定使用Redis。顺便整理下Redis的安装过程，以便查阅。\n\n\n 1 . 下载Redis\n目前，最新的Redist版本为3.0，使用wget下载，命令如下：\n```\n\n# wget http://download.redis.io/releases/redis-3.0.4.tar.gz\n\n```\n 2 . 解压Redis\n下载完成后，使用tar命令解压下载文件：\n```\n\n# tar -xzvf redis-3.0.4.tar.gz\n```\n3 . 编译安装Redis\n切换至程序目录，并执行make命令编译：\n```\n# cd redis-3.0.4\n# make\n```\n执行安装命令\n```\n# make install\n```\nmake install安装完成后，会在/usr/local/bin目录下生成下面几个可执行文件，它们的作用分别是：\n\n* redis-server：Redis服务器端启动程序\n* redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作\n* redis-benchmark：Redis性能测试工具\n* redis-check-aof：数据修复工具\n* redis-check-dump：检查导出工具\n\n备注\n\n有的机器会出现类似以下错误：\n```\nmake[1]: Entering directory `/root/redis/src'\nYou need tcl 8.5 or newer in order to run the Redis test\n……\n```\n这是因为没有安装tcl导致，yum安装即可：\n```\nyum install tcl\n```\n4 . 配置Redis\n复制配置文件到/etc/目录：\n```\n# cp redis.conf /etc/\n```\n为了让Redis后台运行，一般还需要修改redis.conf文件：\n```\nvi /etc/redis.conf\n```\n修改daemonize配置项为yes，使Redis进程在后台运行：\n```\ndaemonize yes\n```\n5 . 启动Redis\n配置完成后，启动Redis：\n```\n# cd /usr/local/bin\n# ./redis-server /etc/redis.conf\n```\n检查启动情况：\n```\n# ps -ef | grep redis\n```\n看到类似下面的一行，表示启动成功：\n```\nroot     18443     1  0 13:05 ?        00:00:00 ./redis-server *:6379 \n```\n6 . 添加开机启动项\n让Redis开机运行可以将其添加到rc.local文件，也可将添加为系统服务service。本文使用rc.local的方式，添加service请参考：Redis 配置为 Service 系统服务 。\n\n为了能让Redis在服务器重启后自动启动，需要将启动命令写入开机启动项：\n```\necho \"/usr/local/bin/redis-server /etc/redis.conf\" >>/etc/rc.local\n```\n7 . Redis配置参数\n在 前面的操作中，我们用到了使Redis进程在后台运行的参数，下面介绍其它一些常用的Redis启动参数：\n```\ndaemonize：是否以后台daemon方式运行\npidfile：pid文件位置\nport：监听的端口号\ntimeout：请求超时时间\nloglevel：log信息级别\nlogfile：log文件位置\ndatabases：开启数据库的数量\nsave * *：保存快照的频率，第一个*表示多长时间，第三个*表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。\nrdbcompression：是否使用压缩\ndbfilename：数据快照文件名（只是文件名）\ndir：数据快照的保存目录（仅目录）\nappendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。\nappendfsync：appendonlylog如何同步到磁盘。三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步\n```\n","slug":"CentOS7下安装和配置redis","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzdrzp0001gxy0yzc7m898","content":"<p>Redis是一个高性能的，开源key-value型数据库。是构建高性能，可扩展的Web应用的完美解决方案，可以内存存储亦可持久化存储。因为要使用跨进程，跨服务级别的数据缓存，在对比多个方案后，决定使用Redis。顺便整理下Redis的安装过程，以便查阅。</p>\n<p> 1 . 下载Redis<br>目前，最新的Redist版本为3.0，使用wget下载，命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># wget http://download.redis.io/releases/redis-3.0.4.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p> 2 . 解压Redis<br>下载完成后，使用tar命令解压下载文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># tar -xzvf redis-3.0.4.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>3 . 编译安装Redis<br>切换至程序目录，并执行make命令编译：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd redis-3.0.4</span><br><span class=\"line\"># make</span><br></pre></td></tr></table></figure></p>\n<p>执行安装命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># make install</span><br></pre></td></tr></table></figure></p>\n<p>make install安装完成后，会在/usr/local/bin目录下生成下面几个可执行文件，它们的作用分别是：</p>\n<ul>\n<li>redis-server：Redis服务器端启动程序</li>\n<li>redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作</li>\n<li>redis-benchmark：Redis性能测试工具</li>\n<li>redis-check-aof：数据修复工具</li>\n<li>redis-check-dump：检查导出工具</li>\n</ul>\n<p>备注</p>\n<p>有的机器会出现类似以下错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make[1]: Entering directory `/root/redis/src&apos;</span><br><span class=\"line\">You need tcl 8.5 or newer in order to run the Redis test</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure></p>\n<p>这是因为没有安装tcl导致，yum安装即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install tcl</span><br></pre></td></tr></table></figure></p>\n<p>4 . 配置Redis<br>复制配置文件到/etc/目录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp redis.conf /etc/</span><br></pre></td></tr></table></figure></p>\n<p>为了让Redis后台运行，一般还需要修改redis.conf文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改daemonize配置项为yes，使Redis进程在后台运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure></p>\n<p>5 . 启动Redis<br>配置完成后，启动Redis：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd /usr/local/bin</span><br><span class=\"line\"># ./redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>检查启动情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ps -ef | grep redis</span><br></pre></td></tr></table></figure></p>\n<p>看到类似下面的一行，表示启动成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root     18443     1  0 13:05 ?        00:00:00 ./redis-server *:6379</span><br></pre></td></tr></table></figure></p>\n<p>6 . 添加开机启动项<br>让Redis开机运行可以将其添加到rc.local文件，也可将添加为系统服务service。本文使用rc.local的方式，添加service请参考：Redis 配置为 Service 系统服务 。</p>\n<p>为了能让Redis在服务器重启后自动启动，需要将启动命令写入开机启动项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;/usr/local/bin/redis-server /etc/redis.conf&quot; &gt;&gt;/etc/rc.local</span><br></pre></td></tr></table></figure></p>\n<p>7 . Redis配置参数<br>在 前面的操作中，我们用到了使Redis进程在后台运行的参数，下面介绍其它一些常用的Redis启动参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize：是否以后台daemon方式运行</span><br><span class=\"line\">pidfile：pid文件位置</span><br><span class=\"line\">port：监听的端口号</span><br><span class=\"line\">timeout：请求超时时间</span><br><span class=\"line\">loglevel：log信息级别</span><br><span class=\"line\">logfile：log文件位置</span><br><span class=\"line\">databases：开启数据库的数量</span><br><span class=\"line\">save * *：保存快照的频率，第一个*表示多长时间，第三个*表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。</span><br><span class=\"line\">rdbcompression：是否使用压缩</span><br><span class=\"line\">dbfilename：数据快照文件名（只是文件名）</span><br><span class=\"line\">dir：数据快照的保存目录（仅目录）</span><br><span class=\"line\">appendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。</span><br><span class=\"line\">appendfsync：appendonlylog如何同步到磁盘。三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Redis是一个高性能的，开源key-value型数据库。是构建高性能，可扩展的Web应用的完美解决方案，可以内存存储亦可持久化存储。因为要使用跨进程，跨服务级别的数据缓存，在对比多个方案后，决定使用Redis。顺便整理下Redis的安装过程，以便查阅。</p>\n<p> 1 . 下载Redis<br>目前，最新的Redist版本为3.0，使用wget下载，命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># wget http://download.redis.io/releases/redis-3.0.4.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p> 2 . 解压Redis<br>下载完成后，使用tar命令解压下载文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># tar -xzvf redis-3.0.4.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>3 . 编译安装Redis<br>切换至程序目录，并执行make命令编译：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd redis-3.0.4</span><br><span class=\"line\"># make</span><br></pre></td></tr></table></figure></p>\n<p>执行安装命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># make install</span><br></pre></td></tr></table></figure></p>\n<p>make install安装完成后，会在/usr/local/bin目录下生成下面几个可执行文件，它们的作用分别是：</p>\n<ul>\n<li>redis-server：Redis服务器端启动程序</li>\n<li>redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作</li>\n<li>redis-benchmark：Redis性能测试工具</li>\n<li>redis-check-aof：数据修复工具</li>\n<li>redis-check-dump：检查导出工具</li>\n</ul>\n<p>备注</p>\n<p>有的机器会出现类似以下错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make[1]: Entering directory `/root/redis/src&apos;</span><br><span class=\"line\">You need tcl 8.5 or newer in order to run the Redis test</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure></p>\n<p>这是因为没有安装tcl导致，yum安装即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install tcl</span><br></pre></td></tr></table></figure></p>\n<p>4 . 配置Redis<br>复制配置文件到/etc/目录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp redis.conf /etc/</span><br></pre></td></tr></table></figure></p>\n<p>为了让Redis后台运行，一般还需要修改redis.conf文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改daemonize配置项为yes，使Redis进程在后台运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure></p>\n<p>5 . 启动Redis<br>配置完成后，启动Redis：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd /usr/local/bin</span><br><span class=\"line\"># ./redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>检查启动情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ps -ef | grep redis</span><br></pre></td></tr></table></figure></p>\n<p>看到类似下面的一行，表示启动成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root     18443     1  0 13:05 ?        00:00:00 ./redis-server *:6379</span><br></pre></td></tr></table></figure></p>\n<p>6 . 添加开机启动项<br>让Redis开机运行可以将其添加到rc.local文件，也可将添加为系统服务service。本文使用rc.local的方式，添加service请参考：Redis 配置为 Service 系统服务 。</p>\n<p>为了能让Redis在服务器重启后自动启动，需要将启动命令写入开机启动项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;/usr/local/bin/redis-server /etc/redis.conf&quot; &gt;&gt;/etc/rc.local</span><br></pre></td></tr></table></figure></p>\n<p>7 . Redis配置参数<br>在 前面的操作中，我们用到了使Redis进程在后台运行的参数，下面介绍其它一些常用的Redis启动参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize：是否以后台daemon方式运行</span><br><span class=\"line\">pidfile：pid文件位置</span><br><span class=\"line\">port：监听的端口号</span><br><span class=\"line\">timeout：请求超时时间</span><br><span class=\"line\">loglevel：log信息级别</span><br><span class=\"line\">logfile：log文件位置</span><br><span class=\"line\">databases：开启数据库的数量</span><br><span class=\"line\">save * *：保存快照的频率，第一个*表示多长时间，第三个*表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。</span><br><span class=\"line\">rdbcompression：是否使用压缩</span><br><span class=\"line\">dbfilename：数据快照文件名（只是文件名）</span><br><span class=\"line\">dir：数据快照的保存目录（仅目录）</span><br><span class=\"line\">appendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。</span><br><span class=\"line\">appendfsync：appendonlylog如何同步到磁盘。三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步</span><br></pre></td></tr></table></figure></p>\n"},{"title":"CentOS安装node8.x版本","date":"2017-12-15T03:52:34.000Z","_content":"### CentOS 安装 node 8.x 版本\n\n由于一些原因需要给CentOS服务器安装8.0以上版本的node, 本来直接通过yum管理安装管理，但是没找到好办法，在此记录一下自己最后使用的简单过程：\n\n安装之前删除原来的node和npm (我原来是用yum安装的，如果是第一次安装可以省略这一步):\n\n```\nyum remove nodejs npm -y\n```\n\n首先我们随便进入服务器的一个目录，然后从淘宝的源拉取内容:\n\n```\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\n```\n\n解压缩:\n\n```\nsudo tar -xvf node-v8.0.0-linux-x64.tar.xz\n```\n\n进入解压目录下的 bin 目录，执行 ls 命令\n\n```\ncd node-v8.0.0-linux-x64/bin && ls\n```\n\n我们发现有node 和 npm\n\n这个时候我们测试:\n\n```\n./node -v\n```\n\n这个时候我们发现实际上已经安装好了，接下来就是要建立链接文件。\n\n这里还是，如果我们之前已经安装过了，那么我们要先删除之前建立的链接文件：\n\n```\nsudo rm -rf /usr/bin/node\nsudo rm -rf /usr/bin/npm\n```\n\n然后建立链接文件:\n\n```\nsudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/node /usr/bin/node\nsudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/npm /usr/bin/npm\n```\n\n注意这里的第一个路径不要直接复制粘贴，要写当前文件的真正的路径，这个可以通过pwd获取。\n\n然后我们可以通过`node -v`等测试已经安装成功。\n","source":"_posts/CentOS安装node8-x版本.md","raw":"---\ntitle: CentOS安装node8.x版本\ndate: 2017-12-15 12:52:34\ntags:\n    - centOS\n    - node\n---\n### CentOS 安装 node 8.x 版本\n\n由于一些原因需要给CentOS服务器安装8.0以上版本的node, 本来直接通过yum管理安装管理，但是没找到好办法，在此记录一下自己最后使用的简单过程：\n\n安装之前删除原来的node和npm (我原来是用yum安装的，如果是第一次安装可以省略这一步):\n\n```\nyum remove nodejs npm -y\n```\n\n首先我们随便进入服务器的一个目录，然后从淘宝的源拉取内容:\n\n```\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\n```\n\n解压缩:\n\n```\nsudo tar -xvf node-v8.0.0-linux-x64.tar.xz\n```\n\n进入解压目录下的 bin 目录，执行 ls 命令\n\n```\ncd node-v8.0.0-linux-x64/bin && ls\n```\n\n我们发现有node 和 npm\n\n这个时候我们测试:\n\n```\n./node -v\n```\n\n这个时候我们发现实际上已经安装好了，接下来就是要建立链接文件。\n\n这里还是，如果我们之前已经安装过了，那么我们要先删除之前建立的链接文件：\n\n```\nsudo rm -rf /usr/bin/node\nsudo rm -rf /usr/bin/npm\n```\n\n然后建立链接文件:\n\n```\nsudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/node /usr/bin/node\nsudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/npm /usr/bin/npm\n```\n\n注意这里的第一个路径不要直接复制粘贴，要写当前文件的真正的路径，这个可以通过pwd获取。\n\n然后我们可以通过`node -v`等测试已经安装成功。\n","slug":"CentOS安装node8-x版本","published":1,"updated":"2019-01-19T08:53:54.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzdrzs0003gxy0ixy3lfwb","content":"<h3 id=\"CentOS-安装-node-8-x-版本\"><a href=\"#CentOS-安装-node-8-x-版本\" class=\"headerlink\" title=\"CentOS 安装 node 8.x 版本\"></a>CentOS 安装 node 8.x 版本</h3><p>由于一些原因需要给CentOS服务器安装8.0以上版本的node, 本来直接通过yum管理安装管理，但是没找到好办法，在此记录一下自己最后使用的简单过程：</p>\n<p>安装之前删除原来的node和npm (我原来是用yum安装的，如果是第一次安装可以省略这一步):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove nodejs npm -y</span><br></pre></td></tr></table></figure>\n<p>首先我们随便进入服务器的一个目录，然后从淘宝的源拉取内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>解压缩:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -xvf node-v8.0.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>进入解压目录下的 bin 目录，执行 ls 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd node-v8.0.0-linux-x64/bin &amp;&amp; ls</span><br></pre></td></tr></table></figure>\n<p>我们发现有node 和 npm</p>\n<p>这个时候我们测试:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node -v</span><br></pre></td></tr></table></figure>\n<p>这个时候我们发现实际上已经安装好了，接下来就是要建立链接文件。</p>\n<p>这里还是，如果我们之前已经安装过了，那么我们要先删除之前建立的链接文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf /usr/bin/node</span><br><span class=\"line\">sudo rm -rf /usr/bin/npm</span><br></pre></td></tr></table></figure>\n<p>然后建立链接文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/node /usr/bin/node</span><br><span class=\"line\">sudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure>\n<p>注意这里的第一个路径不要直接复制粘贴，要写当前文件的真正的路径，这个可以通过pwd获取。</p>\n<p>然后我们可以通过<code>node -v</code>等测试已经安装成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CentOS-安装-node-8-x-版本\"><a href=\"#CentOS-安装-node-8-x-版本\" class=\"headerlink\" title=\"CentOS 安装 node 8.x 版本\"></a>CentOS 安装 node 8.x 版本</h3><p>由于一些原因需要给CentOS服务器安装8.0以上版本的node, 本来直接通过yum管理安装管理，但是没找到好办法，在此记录一下自己最后使用的简单过程：</p>\n<p>安装之前删除原来的node和npm (我原来是用yum安装的，如果是第一次安装可以省略这一步):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove nodejs npm -y</span><br></pre></td></tr></table></figure>\n<p>首先我们随便进入服务器的一个目录，然后从淘宝的源拉取内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>解压缩:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -xvf node-v8.0.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>进入解压目录下的 bin 目录，执行 ls 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd node-v8.0.0-linux-x64/bin &amp;&amp; ls</span><br></pre></td></tr></table></figure>\n<p>我们发现有node 和 npm</p>\n<p>这个时候我们测试:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node -v</span><br></pre></td></tr></table></figure>\n<p>这个时候我们发现实际上已经安装好了，接下来就是要建立链接文件。</p>\n<p>这里还是，如果我们之前已经安装过了，那么我们要先删除之前建立的链接文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf /usr/bin/node</span><br><span class=\"line\">sudo rm -rf /usr/bin/npm</span><br></pre></td></tr></table></figure>\n<p>然后建立链接文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/node /usr/bin/node</span><br><span class=\"line\">sudo ln -s /usr/share/node-v8.0.0-linux-x64/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure>\n<p>注意这里的第一个路径不要直接复制粘贴，要写当前文件的真正的路径，这个可以通过pwd获取。</p>\n<p>然后我们可以通过<code>node -v</code>等测试已经安装成功。</p>\n"},{"title":"JS的静态作用域、子程序引用环境与参数传递类型","date":"2017-01-10T16:33:26.000Z","_content":"#### 静态作用域\n\n我们先来看下面这个小程序：\n\n```\n //JS版本：\n function sub1() {\n        var x;\n        function sub2() { alert(x); }\n        function sub3() { var x; x=3; sub4(sub2); }\n        function sub4(subx) { var x; x=4; subx(); }\n        x = 1;\n        sub3();\n    }\n\n    sub1();\n    \n #Python版本\ndef sub1():\n    def sub2():\n        print x\n    def sub3():\n        x=3\n        sub4(sub2)\n    def sub4(subx):\n        x=4\n        subx()\n    x = 1\n    sub3()\n\nsub1()   \n```\n\n不用亲自运行，实际上输出结果都是1，这可能不难猜到，但是需要解释一番，鉴于Python和JS在这一点上表现的类似，我就以JS来分析。\n\n我们知道，JS是静态作用域的，所谓静态作用域就是作用域在编译时确定，所以sub2中引用的x，实际上和x=3以及x=4的x没有任何关系，指向第二行的var x;\n\n#### 子程序的引用环境\n\n实际上这里面还有一个子程序(注：子程序和函数不是很一样，但我们可以认为子程序包括函数，也约等于函数)的概念，sub2、sub3、sub4都是子程序，对于允许嵌套子程序的语言，应该如何使用执行传递的子程序的引用环境？\n\n* 浅绑定：如果这样的话，应该输出4，这对动态作用域的语言来说比较自然。\n* 深绑定：也就是输出1的情况，这对静态作用域的语言来说比较自然。\n* Ad hoc binding: 这是第三种，将子程序作为实际参数传递到调用语句的环境。\n\n#### 参数传递类型\n\n参数传递类型我们普遍认为有按值传递和按引用传递两种，实际上不止。\n\n下面是一张图：\n\n![](https://www.10000h.top/images/call.png)\n\n这张图对应的第一种传递方式，叫做Pass-by-Value(In mode)，第二种是Pass-by-Result(Out mode)，第三种是Pass-by-Value-Result(Inout mode),图上说的比较明白，实际上如果有result就是说明最后把结果再赋值给参数。\n\n第二种和第三种编程语言用的少，原因如下：\n>Potential problem: sub(p1, p1)   \nWith the two corresponding formal parameters having different names, whichever formal parameter is copied back last will represent current value of p1\n\n","source":"_posts/JS的静态作用域、子程序引用环境与参数传递类型.md","raw":"---\ntitle: JS的静态作用域、子程序引用环境与参数传递类型\ndate: 2017-01-11 1:33:26\ntags:\n    - javascript\n---\n#### 静态作用域\n\n我们先来看下面这个小程序：\n\n```\n //JS版本：\n function sub1() {\n        var x;\n        function sub2() { alert(x); }\n        function sub3() { var x; x=3; sub4(sub2); }\n        function sub4(subx) { var x; x=4; subx(); }\n        x = 1;\n        sub3();\n    }\n\n    sub1();\n    \n #Python版本\ndef sub1():\n    def sub2():\n        print x\n    def sub3():\n        x=3\n        sub4(sub2)\n    def sub4(subx):\n        x=4\n        subx()\n    x = 1\n    sub3()\n\nsub1()   \n```\n\n不用亲自运行，实际上输出结果都是1，这可能不难猜到，但是需要解释一番，鉴于Python和JS在这一点上表现的类似，我就以JS来分析。\n\n我们知道，JS是静态作用域的，所谓静态作用域就是作用域在编译时确定，所以sub2中引用的x，实际上和x=3以及x=4的x没有任何关系，指向第二行的var x;\n\n#### 子程序的引用环境\n\n实际上这里面还有一个子程序(注：子程序和函数不是很一样，但我们可以认为子程序包括函数，也约等于函数)的概念，sub2、sub3、sub4都是子程序，对于允许嵌套子程序的语言，应该如何使用执行传递的子程序的引用环境？\n\n* 浅绑定：如果这样的话，应该输出4，这对动态作用域的语言来说比较自然。\n* 深绑定：也就是输出1的情况，这对静态作用域的语言来说比较自然。\n* Ad hoc binding: 这是第三种，将子程序作为实际参数传递到调用语句的环境。\n\n#### 参数传递类型\n\n参数传递类型我们普遍认为有按值传递和按引用传递两种，实际上不止。\n\n下面是一张图：\n\n![](https://www.10000h.top/images/call.png)\n\n这张图对应的第一种传递方式，叫做Pass-by-Value(In mode)，第二种是Pass-by-Result(Out mode)，第三种是Pass-by-Value-Result(Inout mode),图上说的比较明白，实际上如果有result就是说明最后把结果再赋值给参数。\n\n第二种和第三种编程语言用的少，原因如下：\n>Potential problem: sub(p1, p1)   \nWith the two corresponding formal parameters having different names, whichever formal parameter is copied back last will represent current value of p1\n\n","slug":"JS的静态作用域、子程序引用环境与参数传递类型","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzdrzw0006gxy00gb51tvd","content":"<h4 id=\"静态作用域\"><a href=\"#静态作用域\" class=\"headerlink\" title=\"静态作用域\"></a>静态作用域</h4><p>我们先来看下面这个小程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //JS版本：</span><br><span class=\"line\"> function sub1() &#123;</span><br><span class=\"line\">        var x;</span><br><span class=\"line\">        function sub2() &#123; alert(x); &#125;</span><br><span class=\"line\">        function sub3() &#123; var x; x=3; sub4(sub2); &#125;</span><br><span class=\"line\">        function sub4(subx) &#123; var x; x=4; subx(); &#125;</span><br><span class=\"line\">        x = 1;</span><br><span class=\"line\">        sub3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sub1();</span><br><span class=\"line\">    </span><br><span class=\"line\"> #Python版本</span><br><span class=\"line\">def sub1():</span><br><span class=\"line\">    def sub2():</span><br><span class=\"line\">        print x</span><br><span class=\"line\">    def sub3():</span><br><span class=\"line\">        x=3</span><br><span class=\"line\">        sub4(sub2)</span><br><span class=\"line\">    def sub4(subx):</span><br><span class=\"line\">        x=4</span><br><span class=\"line\">        subx()</span><br><span class=\"line\">    x = 1</span><br><span class=\"line\">    sub3()</span><br><span class=\"line\"></span><br><span class=\"line\">sub1()</span><br></pre></td></tr></table></figure>\n<p>不用亲自运行，实际上输出结果都是1，这可能不难猜到，但是需要解释一番，鉴于Python和JS在这一点上表现的类似，我就以JS来分析。</p>\n<p>我们知道，JS是静态作用域的，所谓静态作用域就是作用域在编译时确定，所以sub2中引用的x，实际上和x=3以及x=4的x没有任何关系，指向第二行的var x;</p>\n<h4 id=\"子程序的引用环境\"><a href=\"#子程序的引用环境\" class=\"headerlink\" title=\"子程序的引用环境\"></a>子程序的引用环境</h4><p>实际上这里面还有一个子程序(注：子程序和函数不是很一样，但我们可以认为子程序包括函数，也约等于函数)的概念，sub2、sub3、sub4都是子程序，对于允许嵌套子程序的语言，应该如何使用执行传递的子程序的引用环境？</p>\n<ul>\n<li>浅绑定：如果这样的话，应该输出4，这对动态作用域的语言来说比较自然。</li>\n<li>深绑定：也就是输出1的情况，这对静态作用域的语言来说比较自然。</li>\n<li>Ad hoc binding: 这是第三种，将子程序作为实际参数传递到调用语句的环境。</li>\n</ul>\n<h4 id=\"参数传递类型\"><a href=\"#参数传递类型\" class=\"headerlink\" title=\"参数传递类型\"></a>参数传递类型</h4><p>参数传递类型我们普遍认为有按值传递和按引用传递两种，实际上不止。</p>\n<p>下面是一张图：</p>\n<p><img src=\"https://www.10000h.top/images/call.png\" alt=\"\"></p>\n<p>这张图对应的第一种传递方式，叫做Pass-by-Value(In mode)，第二种是Pass-by-Result(Out mode)，第三种是Pass-by-Value-Result(Inout mode),图上说的比较明白，实际上如果有result就是说明最后把结果再赋值给参数。</p>\n<p>第二种和第三种编程语言用的少，原因如下：</p>\n<blockquote>\n<p>Potential problem: sub(p1, p1)<br>With the two corresponding formal parameters having different names, whichever formal parameter is copied back last will represent current value of p1</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"静态作用域\"><a href=\"#静态作用域\" class=\"headerlink\" title=\"静态作用域\"></a>静态作用域</h4><p>我们先来看下面这个小程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //JS版本：</span><br><span class=\"line\"> function sub1() &#123;</span><br><span class=\"line\">        var x;</span><br><span class=\"line\">        function sub2() &#123; alert(x); &#125;</span><br><span class=\"line\">        function sub3() &#123; var x; x=3; sub4(sub2); &#125;</span><br><span class=\"line\">        function sub4(subx) &#123; var x; x=4; subx(); &#125;</span><br><span class=\"line\">        x = 1;</span><br><span class=\"line\">        sub3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sub1();</span><br><span class=\"line\">    </span><br><span class=\"line\"> #Python版本</span><br><span class=\"line\">def sub1():</span><br><span class=\"line\">    def sub2():</span><br><span class=\"line\">        print x</span><br><span class=\"line\">    def sub3():</span><br><span class=\"line\">        x=3</span><br><span class=\"line\">        sub4(sub2)</span><br><span class=\"line\">    def sub4(subx):</span><br><span class=\"line\">        x=4</span><br><span class=\"line\">        subx()</span><br><span class=\"line\">    x = 1</span><br><span class=\"line\">    sub3()</span><br><span class=\"line\"></span><br><span class=\"line\">sub1()</span><br></pre></td></tr></table></figure>\n<p>不用亲自运行，实际上输出结果都是1，这可能不难猜到，但是需要解释一番，鉴于Python和JS在这一点上表现的类似，我就以JS来分析。</p>\n<p>我们知道，JS是静态作用域的，所谓静态作用域就是作用域在编译时确定，所以sub2中引用的x，实际上和x=3以及x=4的x没有任何关系，指向第二行的var x;</p>\n<h4 id=\"子程序的引用环境\"><a href=\"#子程序的引用环境\" class=\"headerlink\" title=\"子程序的引用环境\"></a>子程序的引用环境</h4><p>实际上这里面还有一个子程序(注：子程序和函数不是很一样，但我们可以认为子程序包括函数，也约等于函数)的概念，sub2、sub3、sub4都是子程序，对于允许嵌套子程序的语言，应该如何使用执行传递的子程序的引用环境？</p>\n<ul>\n<li>浅绑定：如果这样的话，应该输出4，这对动态作用域的语言来说比较自然。</li>\n<li>深绑定：也就是输出1的情况，这对静态作用域的语言来说比较自然。</li>\n<li>Ad hoc binding: 这是第三种，将子程序作为实际参数传递到调用语句的环境。</li>\n</ul>\n<h4 id=\"参数传递类型\"><a href=\"#参数传递类型\" class=\"headerlink\" title=\"参数传递类型\"></a>参数传递类型</h4><p>参数传递类型我们普遍认为有按值传递和按引用传递两种，实际上不止。</p>\n<p>下面是一张图：</p>\n<p><img src=\"https://www.10000h.top/images/call.png\" alt=\"\"></p>\n<p>这张图对应的第一种传递方式，叫做Pass-by-Value(In mode)，第二种是Pass-by-Result(Out mode)，第三种是Pass-by-Value-Result(Inout mode),图上说的比较明白，实际上如果有result就是说明最后把结果再赋值给参数。</p>\n<p>第二种和第三种编程语言用的少，原因如下：</p>\n<blockquote>\n<p>Potential problem: sub(p1, p1)<br>With the two corresponding formal parameters having different names, whichever formal parameter is copied back last will represent current value of p1</p>\n</blockquote>\n"},{"title":"Lagrangian Mechanics and Rigid Body Motion","date":"2018-06-20T10:23:09.000Z","layout":"post","_content":"This is a group research project I did in my second year at Imperial College London as a math undergraduate student. I cooperated with the team in explaining and proving basic Lagrangian Mechanics and the investigation into the heavy-top problems.\n\nHere is an abstract of what this project is about. The full report reveals more about the proof, examples and Matlab code.\n\n> In our report we will discuss Lagrangian Mechanics and the Motion of Rigid Bodies. La- grangian Mechanics is a reformulation of Classical Mechanics, first introduced by the famous mathematician Joseph-Louis Lagrange, in 1788. We shall discuss the uses of Lagrangian Me- chanics and include two examples - the Spherical Pendulum and the Double Pendulum. In each case we will derive the equations of motion, and then try to solve these numerically and/or analytically. We will investigate the effect of removing the gravitational field (in the case of the Spherical Pendulum) and discuss any links between the two, as well as any implications of the solutions. <br><br>A rigid body is a collection of N points such that the distance between any two of them is fixed regardless of any external forces they are subject to. We shall look at the kinematics, the Inertia Tensor and Euler’s Equation and use this to explain about the dynamical stability of rigid bodies. Symmetric tops are the main example that we will investigate and discuss. We will look into the precession rate and the spinning rate and discuss two examples, Feynman’s wobbling plate and the hula hoop. A more complicated rigid body we shall then explore is the heavy symmetric top, in which we take into account the forces exerted by a gravitational field.\n\nFull report is [here](/files/M2R.pdf).\n","source":"_posts/Lagrangian Mechanics and Heavy-top Motion.md","raw":"---\ntitle: Lagrangian Mechanics and Rigid Body Motion\ndate: 2018-06-20 19:23:09\nlayout: post\ntags:\n    - Math\n    - Mechanics\n    - Matlab\ncategories:\n    - Research projects\n    - M2R\nphoto :\n    - /photos/Gyroscope_precession.gif\n---\nThis is a group research project I did in my second year at Imperial College London as a math undergraduate student. I cooperated with the team in explaining and proving basic Lagrangian Mechanics and the investigation into the heavy-top problems.\n\nHere is an abstract of what this project is about. The full report reveals more about the proof, examples and Matlab code.\n\n> In our report we will discuss Lagrangian Mechanics and the Motion of Rigid Bodies. La- grangian Mechanics is a reformulation of Classical Mechanics, first introduced by the famous mathematician Joseph-Louis Lagrange, in 1788. We shall discuss the uses of Lagrangian Me- chanics and include two examples - the Spherical Pendulum and the Double Pendulum. In each case we will derive the equations of motion, and then try to solve these numerically and/or analytically. We will investigate the effect of removing the gravitational field (in the case of the Spherical Pendulum) and discuss any links between the two, as well as any implications of the solutions. <br><br>A rigid body is a collection of N points such that the distance between any two of them is fixed regardless of any external forces they are subject to. We shall look at the kinematics, the Inertia Tensor and Euler’s Equation and use this to explain about the dynamical stability of rigid bodies. Symmetric tops are the main example that we will investigate and discuss. We will look into the precession rate and the spinning rate and discuss two examples, Feynman’s wobbling plate and the hula hoop. A more complicated rigid body we shall then explore is the heavy symmetric top, in which we take into account the forces exerted by a gravitational field.\n\nFull report is [here](/files/M2R.pdf).\n","slug":"Lagrangian Mechanics and Heavy-top Motion","published":1,"updated":"2019-01-20T06:59:35.207Z","photos":["/photos/Gyroscope_precession.gif"],"comments":1,"link":"","_id":"cjtyzdrzx0007gxy0g8jbo33f","content":"<p>This is a group research project I did in my second year at Imperial College London as a math undergraduate student. I cooperated with the team in explaining and proving basic Lagrangian Mechanics and the investigation into the heavy-top problems.</p>\n<p>Here is an abstract of what this project is about. The full report reveals more about the proof, examples and Matlab code.</p>\n<blockquote>\n<p>In our report we will discuss Lagrangian Mechanics and the Motion of Rigid Bodies. La- grangian Mechanics is a reformulation of Classical Mechanics, first introduced by the famous mathematician Joseph-Louis Lagrange, in 1788. We shall discuss the uses of Lagrangian Me- chanics and include two examples - the Spherical Pendulum and the Double Pendulum. In each case we will derive the equations of motion, and then try to solve these numerically and/or analytically. We will investigate the effect of removing the gravitational field (in the case of the Spherical Pendulum) and discuss any links between the two, as well as any implications of the solutions. <br><br>A rigid body is a collection of N points such that the distance between any two of them is fixed regardless of any external forces they are subject to. We shall look at the kinematics, the Inertia Tensor and Euler’s Equation and use this to explain about the dynamical stability of rigid bodies. Symmetric tops are the main example that we will investigate and discuss. We will look into the precession rate and the spinning rate and discuss two examples, Feynman’s wobbling plate and the hula hoop. A more complicated rigid body we shall then explore is the heavy symmetric top, in which we take into account the forces exerted by a gravitational field.</p>\n</blockquote>\n<p>Full report is <a href=\"/files/M2R.pdf\">here</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is a group research project I did in my second year at Imperial College London as a math undergraduate student. I cooperated with the team in explaining and proving basic Lagrangian Mechanics and the investigation into the heavy-top problems.</p>\n<p>Here is an abstract of what this project is about. The full report reveals more about the proof, examples and Matlab code.</p>\n<blockquote>\n<p>In our report we will discuss Lagrangian Mechanics and the Motion of Rigid Bodies. La- grangian Mechanics is a reformulation of Classical Mechanics, first introduced by the famous mathematician Joseph-Louis Lagrange, in 1788. We shall discuss the uses of Lagrangian Me- chanics and include two examples - the Spherical Pendulum and the Double Pendulum. In each case we will derive the equations of motion, and then try to solve these numerically and/or analytically. We will investigate the effect of removing the gravitational field (in the case of the Spherical Pendulum) and discuss any links between the two, as well as any implications of the solutions. <br><br>A rigid body is a collection of N points such that the distance between any two of them is fixed regardless of any external forces they are subject to. We shall look at the kinematics, the Inertia Tensor and Euler’s Equation and use this to explain about the dynamical stability of rigid bodies. Symmetric tops are the main example that we will investigate and discuss. We will look into the precession rate and the spinning rate and discuss two examples, Feynman’s wobbling plate and the hula hoop. A more complicated rigid body we shall then explore is the heavy symmetric top, in which we take into account the forces exerted by a gravitational field.</p>\n</blockquote>\n<p>Full report is <a href=\"/files/M2R.pdf\">here</a>.</p>\n"},{"title":"Linux服务器初始化设置用户和ssh公私钥登陆","date":"2018-04-11T08:16:37.000Z","_content":"\n>当我们开始使用一个新的服务器的时候，首先一定要对服务器的登陆等做一些修改工作，笔者曾经就因为对服务器登陆安全没有重视，导致服务器数据全部丢失。接下来我们按照步骤，罗列出应该做的一些事情。\n\n### 修改ssh端口号\n\n第一件事情：\n\n修改ssh端口号： 之后加上一个端口比如说50000\n\n`vi /etc/ssh/sshd_config`之后在port字段加上一个端口比如说50000，原来的端口号字段可能是被注释掉的，要先解除注释。\n\n然后执行：\n\n```\nservice sshd restart\n```\n\n这个时候可能还要重新配置一下防火墙，开放50000端口，具体如何配置也可以参考[这里](https://blog.csdn.net/ul646691993/article/details/52104082)的后半部分。但是目前，阿里云的服务器实测是不需要再配置防火墙的，但是需要去登陆到网页后台修改安全组。\n\n之后就可以通过这样的方式登录了：(注意登录方式一定要写对)\n\n```shell\nssh root@115.29.102.81 -p 50000\n```\n\n### 创建用户\n\n这个时候我们还是用root进行操作，所以我们接下来要给自己创建一个账户，比如创建一个如下的用户：\n\n```\nuseradd xiaotao\npasswd xiaotao\n```\n\n可以用`ls -al /home/``查看一下账户\n\n对创建的这个用户增加sudo权限： 相关配置文件/etc/sudoers中，但是这个文件是只读的，所以要更改一下权限\n\n```\nchmod u+w sudoers\n```\n\n然后进入这个文件在这里进行更改：\n\n```\nroot    ALL=(ALL)       ALL\nxiaotao  ALL=(ALL)       ALL\n```\n\n然后再改回权限：\n\n```\nchmod u-w sudoers\n```\n\n注意一点，CentOS 7预设容许任何帐号透过ssh登入（也就是说自己根本不用改改，直接新建帐号登录即可），包括根和一般帐号，为了不受根帐号被黑客暴力入侵，我们必须禁止 root帐号的ssh功能，事实上root也没有必要ssh登入伺服器，因为只要使用su或sudo（当然需要输入root的密码）普通帐号便可以拥有root的权限。使用vim（或任何文本编辑器）开启的/ etc/ SSH/ sshd_config中，寻找：\n\n```\n＃PermitRootLogin yes\n```\n修改：\n\n```\nPermitRootLogin no\n```\n\n### 配置公私钥加密登录\n\n**这一步骤要切换到自己新建的用户，不能再用 root 用户了，否则可能无法正常登陆。**\n\n很多时候以上所说的还是不够安全，为了更加安全方便，我们采用公私钥对称加密登录，简单的讲做法就是再客户端生成一把私钥一把公钥，私钥是在客户端的，公钥上传到服务端，对称加密进行登录。\n\n在客户端先进到这个目录：\n\n```\ncd ~/.ssh\n```\n\n生成公钥和私钥（实际上如果之前有的话就不用重新生成了）\n\n```\nssh-keygen -t rsa\n```\n\n接下来把公钥上传到服务端\n\n```\nscp ~/.ssh/id_rsa.pub xiaotao@<ssh_server_ip>:~\n```\n\n在服务端执行以下命令(如果没有相关的文件和文件夹要先进行创建，注意不要使用 sudo )\n\n```\ncat  id_rsa.pub >> ～/.ssh/authorized_keys\n```\n\n配置服务器的/etc/ssh/sshd_config，下面是一些建议的配置：\n\n```\nvim /etc/ssh/sshd_config\n# 禁用root账户登录，非必要，但为了安全性，请配置\nPermitRootLogin no\n\n# 是否让 sshd 去检查用户家目录或相关档案的权限数据，\n# 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。\n# 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入\nStrictModes no\n\n# 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。\n# 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile      %h/.ssh/authorized_keys\n\n#有了证书登录了，就禁用密码登录吧，安全要紧\nPasswordAuthentication no\n```\n\n然后不要忘记 `sudo service sshd restart`\n\n\n一般来讲，这样就算是成功了，我们可以在客户端尝试：\n\n```\nssh -i ~/.ssh/id_rsa remote_username@remote_ip\n```\n\n如果不行，可能是服务端或客户端相关 `.ssh` 文件权限不对，可以进行如下尝试：\n\n```\n服务端\nchown -R 0700  ~/.ssh\nchown -R 0644  ~/.ssh/authorized_keys\n\n客户端改一下\nchmod 600 id_rsa\n```","source":"_posts/Linux服务器初始化设置用户和ssh公私钥登陆.md","raw":"---\ntitle: Linux服务器初始化设置用户和ssh公私钥登陆\ndate: 2018-04-11 17:16:37\ntags:\n    - Linux\n    - ssh\n---\n\n>当我们开始使用一个新的服务器的时候，首先一定要对服务器的登陆等做一些修改工作，笔者曾经就因为对服务器登陆安全没有重视，导致服务器数据全部丢失。接下来我们按照步骤，罗列出应该做的一些事情。\n\n### 修改ssh端口号\n\n第一件事情：\n\n修改ssh端口号： 之后加上一个端口比如说50000\n\n`vi /etc/ssh/sshd_config`之后在port字段加上一个端口比如说50000，原来的端口号字段可能是被注释掉的，要先解除注释。\n\n然后执行：\n\n```\nservice sshd restart\n```\n\n这个时候可能还要重新配置一下防火墙，开放50000端口，具体如何配置也可以参考[这里](https://blog.csdn.net/ul646691993/article/details/52104082)的后半部分。但是目前，阿里云的服务器实测是不需要再配置防火墙的，但是需要去登陆到网页后台修改安全组。\n\n之后就可以通过这样的方式登录了：(注意登录方式一定要写对)\n\n```shell\nssh root@115.29.102.81 -p 50000\n```\n\n### 创建用户\n\n这个时候我们还是用root进行操作，所以我们接下来要给自己创建一个账户，比如创建一个如下的用户：\n\n```\nuseradd xiaotao\npasswd xiaotao\n```\n\n可以用`ls -al /home/``查看一下账户\n\n对创建的这个用户增加sudo权限： 相关配置文件/etc/sudoers中，但是这个文件是只读的，所以要更改一下权限\n\n```\nchmod u+w sudoers\n```\n\n然后进入这个文件在这里进行更改：\n\n```\nroot    ALL=(ALL)       ALL\nxiaotao  ALL=(ALL)       ALL\n```\n\n然后再改回权限：\n\n```\nchmod u-w sudoers\n```\n\n注意一点，CentOS 7预设容许任何帐号透过ssh登入（也就是说自己根本不用改改，直接新建帐号登录即可），包括根和一般帐号，为了不受根帐号被黑客暴力入侵，我们必须禁止 root帐号的ssh功能，事实上root也没有必要ssh登入伺服器，因为只要使用su或sudo（当然需要输入root的密码）普通帐号便可以拥有root的权限。使用vim（或任何文本编辑器）开启的/ etc/ SSH/ sshd_config中，寻找：\n\n```\n＃PermitRootLogin yes\n```\n修改：\n\n```\nPermitRootLogin no\n```\n\n### 配置公私钥加密登录\n\n**这一步骤要切换到自己新建的用户，不能再用 root 用户了，否则可能无法正常登陆。**\n\n很多时候以上所说的还是不够安全，为了更加安全方便，我们采用公私钥对称加密登录，简单的讲做法就是再客户端生成一把私钥一把公钥，私钥是在客户端的，公钥上传到服务端，对称加密进行登录。\n\n在客户端先进到这个目录：\n\n```\ncd ~/.ssh\n```\n\n生成公钥和私钥（实际上如果之前有的话就不用重新生成了）\n\n```\nssh-keygen -t rsa\n```\n\n接下来把公钥上传到服务端\n\n```\nscp ~/.ssh/id_rsa.pub xiaotao@<ssh_server_ip>:~\n```\n\n在服务端执行以下命令(如果没有相关的文件和文件夹要先进行创建，注意不要使用 sudo )\n\n```\ncat  id_rsa.pub >> ～/.ssh/authorized_keys\n```\n\n配置服务器的/etc/ssh/sshd_config，下面是一些建议的配置：\n\n```\nvim /etc/ssh/sshd_config\n# 禁用root账户登录，非必要，但为了安全性，请配置\nPermitRootLogin no\n\n# 是否让 sshd 去检查用户家目录或相关档案的权限数据，\n# 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。\n# 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入\nStrictModes no\n\n# 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。\n# 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile      %h/.ssh/authorized_keys\n\n#有了证书登录了，就禁用密码登录吧，安全要紧\nPasswordAuthentication no\n```\n\n然后不要忘记 `sudo service sshd restart`\n\n\n一般来讲，这样就算是成功了，我们可以在客户端尝试：\n\n```\nssh -i ~/.ssh/id_rsa remote_username@remote_ip\n```\n\n如果不行，可能是服务端或客户端相关 `.ssh` 文件权限不对，可以进行如下尝试：\n\n```\n服务端\nchown -R 0700  ~/.ssh\nchown -R 0644  ~/.ssh/authorized_keys\n\n客户端改一下\nchmod 600 id_rsa\n```","slug":"Linux服务器初始化设置用户和ssh公私钥登陆","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzdrzy0008gxy0h8ds373a","content":"<blockquote>\n<p>当我们开始使用一个新的服务器的时候，首先一定要对服务器的登陆等做一些修改工作，笔者曾经就因为对服务器登陆安全没有重视，导致服务器数据全部丢失。接下来我们按照步骤，罗列出应该做的一些事情。</p>\n</blockquote>\n<h3 id=\"修改ssh端口号\"><a href=\"#修改ssh端口号\" class=\"headerlink\" title=\"修改ssh端口号\"></a>修改ssh端口号</h3><p>第一件事情：</p>\n<p>修改ssh端口号： 之后加上一个端口比如说50000</p>\n<p><code>vi /etc/ssh/sshd_config</code>之后在port字段加上一个端口比如说50000，原来的端口号字段可能是被注释掉的，要先解除注释。</p>\n<p>然后执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<p>这个时候可能还要重新配置一下防火墙，开放50000端口，具体如何配置也可以参考<a href=\"https://blog.csdn.net/ul646691993/article/details/52104082\" target=\"_blank\" rel=\"noopener\">这里</a>的后半部分。但是目前，阿里云的服务器实测是不需要再配置防火墙的，但是需要去登陆到网页后台修改安全组。</p>\n<p>之后就可以通过这样的方式登录了：(注意登录方式一定要写对)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@115.29.102.81 -p 50000</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>这个时候我们还是用root进行操作，所以我们接下来要给自己创建一个账户，比如创建一个如下的用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd xiaotao</span><br><span class=\"line\">passwd xiaotao</span><br></pre></td></tr></table></figure>\n<p>可以用<code>ls -al /home/`</code>查看一下账户</p>\n<p>对创建的这个用户增加sudo权限： 相关配置文件/etc/sudoers中，但是这个文件是只读的，所以要更改一下权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+w sudoers</span><br></pre></td></tr></table></figure>\n<p>然后进入这个文件在这里进行更改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root    ALL=(ALL)       ALL</span><br><span class=\"line\">xiaotao  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>\n<p>然后再改回权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u-w sudoers</span><br></pre></td></tr></table></figure>\n<p>注意一点，CentOS 7预设容许任何帐号透过ssh登入（也就是说自己根本不用改改，直接新建帐号登录即可），包括根和一般帐号，为了不受根帐号被黑客暴力入侵，我们必须禁止 root帐号的ssh功能，事实上root也没有必要ssh登入伺服器，因为只要使用su或sudo（当然需要输入root的密码）普通帐号便可以拥有root的权限。使用vim（或任何文本编辑器）开启的/ etc/ SSH/ sshd_config中，寻找：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃PermitRootLogin yes</span><br></pre></td></tr></table></figure>\n<p>修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PermitRootLogin no</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置公私钥加密登录\"><a href=\"#配置公私钥加密登录\" class=\"headerlink\" title=\"配置公私钥加密登录\"></a>配置公私钥加密登录</h3><p><strong>这一步骤要切换到自己新建的用户，不能再用 root 用户了，否则可能无法正常登陆。</strong></p>\n<p>很多时候以上所说的还是不够安全，为了更加安全方便，我们采用公私钥对称加密登录，简单的讲做法就是再客户端生成一把私钥一把公钥，私钥是在客户端的，公钥上传到服务端，对称加密进行登录。</p>\n<p>在客户端先进到这个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>生成公钥和私钥（实际上如果之前有的话就不用重新生成了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p>接下来把公钥上传到服务端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp ~/.ssh/id_rsa.pub xiaotao@&lt;ssh_server_ip&gt;:~</span><br></pre></td></tr></table></figure>\n<p>在服务端执行以下命令(如果没有相关的文件和文件夹要先进行创建，注意不要使用 sudo )</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat  id_rsa.pub &gt;&gt; ～/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>配置服务器的/etc/ssh/sshd_config，下面是一些建议的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\"># 禁用root账户登录，非必要，但为了安全性，请配置</span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否让 sshd 去检查用户家目录或相关档案的权限数据，</span><br><span class=\"line\"># 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。</span><br><span class=\"line\"># 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入</span><br><span class=\"line\">StrictModes no</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。</span><br><span class=\"line\"># 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile      %h/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\">#有了证书登录了，就禁用密码登录吧，安全要紧</span><br><span class=\"line\">PasswordAuthentication no</span><br></pre></td></tr></table></figure>\n<p>然后不要忘记 <code>sudo service sshd restart</code></p>\n<p>一般来讲，这样就算是成功了，我们可以在客户端尝试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i ~/.ssh/id_rsa remote_username@remote_ip</span><br></pre></td></tr></table></figure>\n<p>如果不行，可能是服务端或客户端相关 <code>.ssh</code> 文件权限不对，可以进行如下尝试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端</span><br><span class=\"line\">chown -R 0700  ~/.ssh</span><br><span class=\"line\">chown -R 0644  ~/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\">客户端改一下</span><br><span class=\"line\">chmod 600 id_rsa</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>当我们开始使用一个新的服务器的时候，首先一定要对服务器的登陆等做一些修改工作，笔者曾经就因为对服务器登陆安全没有重视，导致服务器数据全部丢失。接下来我们按照步骤，罗列出应该做的一些事情。</p>\n</blockquote>\n<h3 id=\"修改ssh端口号\"><a href=\"#修改ssh端口号\" class=\"headerlink\" title=\"修改ssh端口号\"></a>修改ssh端口号</h3><p>第一件事情：</p>\n<p>修改ssh端口号： 之后加上一个端口比如说50000</p>\n<p><code>vi /etc/ssh/sshd_config</code>之后在port字段加上一个端口比如说50000，原来的端口号字段可能是被注释掉的，要先解除注释。</p>\n<p>然后执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<p>这个时候可能还要重新配置一下防火墙，开放50000端口，具体如何配置也可以参考<a href=\"https://blog.csdn.net/ul646691993/article/details/52104082\" target=\"_blank\" rel=\"noopener\">这里</a>的后半部分。但是目前，阿里云的服务器实测是不需要再配置防火墙的，但是需要去登陆到网页后台修改安全组。</p>\n<p>之后就可以通过这样的方式登录了：(注意登录方式一定要写对)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@115.29.102.81 -p 50000</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>这个时候我们还是用root进行操作，所以我们接下来要给自己创建一个账户，比如创建一个如下的用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd xiaotao</span><br><span class=\"line\">passwd xiaotao</span><br></pre></td></tr></table></figure>\n<p>可以用<code>ls -al /home/`</code>查看一下账户</p>\n<p>对创建的这个用户增加sudo权限： 相关配置文件/etc/sudoers中，但是这个文件是只读的，所以要更改一下权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+w sudoers</span><br></pre></td></tr></table></figure>\n<p>然后进入这个文件在这里进行更改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root    ALL=(ALL)       ALL</span><br><span class=\"line\">xiaotao  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>\n<p>然后再改回权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u-w sudoers</span><br></pre></td></tr></table></figure>\n<p>注意一点，CentOS 7预设容许任何帐号透过ssh登入（也就是说自己根本不用改改，直接新建帐号登录即可），包括根和一般帐号，为了不受根帐号被黑客暴力入侵，我们必须禁止 root帐号的ssh功能，事实上root也没有必要ssh登入伺服器，因为只要使用su或sudo（当然需要输入root的密码）普通帐号便可以拥有root的权限。使用vim（或任何文本编辑器）开启的/ etc/ SSH/ sshd_config中，寻找：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃PermitRootLogin yes</span><br></pre></td></tr></table></figure>\n<p>修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PermitRootLogin no</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置公私钥加密登录\"><a href=\"#配置公私钥加密登录\" class=\"headerlink\" title=\"配置公私钥加密登录\"></a>配置公私钥加密登录</h3><p><strong>这一步骤要切换到自己新建的用户，不能再用 root 用户了，否则可能无法正常登陆。</strong></p>\n<p>很多时候以上所说的还是不够安全，为了更加安全方便，我们采用公私钥对称加密登录，简单的讲做法就是再客户端生成一把私钥一把公钥，私钥是在客户端的，公钥上传到服务端，对称加密进行登录。</p>\n<p>在客户端先进到这个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>生成公钥和私钥（实际上如果之前有的话就不用重新生成了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p>接下来把公钥上传到服务端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp ~/.ssh/id_rsa.pub xiaotao@&lt;ssh_server_ip&gt;:~</span><br></pre></td></tr></table></figure>\n<p>在服务端执行以下命令(如果没有相关的文件和文件夹要先进行创建，注意不要使用 sudo )</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat  id_rsa.pub &gt;&gt; ～/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>配置服务器的/etc/ssh/sshd_config，下面是一些建议的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\"># 禁用root账户登录，非必要，但为了安全性，请配置</span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否让 sshd 去检查用户家目录或相关档案的权限数据，</span><br><span class=\"line\"># 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。</span><br><span class=\"line\"># 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入</span><br><span class=\"line\">StrictModes no</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。</span><br><span class=\"line\"># 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile      %h/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\">#有了证书登录了，就禁用密码登录吧，安全要紧</span><br><span class=\"line\">PasswordAuthentication no</span><br></pre></td></tr></table></figure>\n<p>然后不要忘记 <code>sudo service sshd restart</code></p>\n<p>一般来讲，这样就算是成功了，我们可以在客户端尝试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i ~/.ssh/id_rsa remote_username@remote_ip</span><br></pre></td></tr></table></figure>\n<p>如果不行，可能是服务端或客户端相关 <code>.ssh</code> 文件权限不对，可以进行如下尝试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端</span><br><span class=\"line\">chown -R 0700  ~/.ssh</span><br><span class=\"line\">chown -R 0644  ~/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\">客户端改一下</span><br><span class=\"line\">chmod 600 id_rsa</span><br></pre></td></tr></table></figure>"},{"title":"Parallel Computing with Fortran, OpenMP and MPI","date":"2018-10-27T13:17:00.000Z","_content":"","source":"_posts/Parallel computing with Fortran, OpenMP and MPI.md","raw":"---\ntitle: Parallel Computing with Fortran, OpenMP and MPI\ndate: 2018-10-27 22:17:00\ntags:\n    - Computer science\n    - Parallel computing\n    - Fortran\n    - OpenMP\n    - MPI\ncategories:\n    - CS projects\n    - M3C@imperial\n---\n","slug":"Parallel computing with Fortran, OpenMP and MPI","published":1,"updated":"2019-01-20T07:13:20.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds00000bgxy0lhq8b495","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","photos":["https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png","https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png","https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png","https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png"],"_content":"\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n![](/photos/1.png)\n\n\n<!-- more-->\n\n\n### Run server\n\n``` bash\n$ hexo server\n\n```\n![](https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png)\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nphotos: \n\t- https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png\n\t- https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png\n\t- https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png\n\t- https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png\n---\n\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n![](/photos/1.png)\n\n\n<!-- more-->\n\n\n### Run server\n\n``` bash\n$ hexo server\n\n```\n![](https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png)\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-01-19T01:29:19.000Z","updated":"2019-01-19T01:29:19.000Z","comments":1,"layout":"post","link":"","_id":"cjtyzds01000cgxy0sbkygouj","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<p><img src=\"/photos/1.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png\" alt=\"\"></p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<p><img src=\"/photos/1.png\" alt=\"\"></p>","more":"<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png\" alt=\"\"></p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"十条编写优化的 JavaScript 代码的建议","date":"2018-05-29T07:59:40.000Z","_content":"\n本文总结了十条编写优秀的 JavaScript 代码的习惯，主要针对 V8 引擎：\n\n1.始终以相同的顺序实例化对象属性，以便可以共享隐藏类和随后优化的代码。V8 在对 js 代码解析的时候会有构建隐藏类的过程，以相同的顺序实例化（属性赋值）的对象会共享相同的隐藏类。下面给出一个不好的实践：\n\n```javascript\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\nvar p1 = new Point(1, 2);\np1.a = 5;\np1.b = 6;\nvar p2 = new Point(3, 4);\np2.b = 7;\np2.a = 8;\n// 由于 a 和 b 的赋值顺序不同，p1 和 p2 无法共享隐藏类\n```\n\n2.避免分配动态属性。在实例化之后向对象添加属性将强制隐藏类更改，并减慢为先前隐藏类优化的所有方法。相反，在其构造函数中分配所有对象的属性。  \n\n3.重复执行相同方法的代码将比仅执行一次（由于内联缓存）执行许多不同方法的代码运行得更快。  \n\n4.避免创建稀疏数组。稀疏数组由于不是所有的元素都存在，因此是一个哈希表，因此访问稀疏数组中的元素代价更高。另外，尽量不要采用预分配数量的大数组，更好的办法是随着你的需要把它的容量增大。最后，尽量不要删除数组中的元素，它会让数组变得稀疏。  \n\n5.标记值：V8采用32位来表示对象和数字，其中用一位来区别对象（flag = 0）或数字（flag = 1），因此这被称之为 SMI (Small Integer)因为它只有31位。因此，如果一个数字大于31位，V8需要对其进行包装，将其变成双精度并且用一个对象来封装它，因此应该尽量使用31位有符号数字从而避免昂贵的封装操作。  \n\n6.检查你的依赖，去掉不需要 import 的内容。  \n\n7.将你的代码分割成一些小的 chunks ，而不是整个引入。 \n \n8.尽可能使用 defer 来推迟加载 JavaScript，另外只加载当前路由需要的代码段。\n  \n9.使用 dev tools 和 DeviceTiming 来寻找代码瓶颈。  \n\n10.使用诸如Optimize.js这样的工具来帮助解析器决定何时需要提前解析以及何时需要延后解析。  \n  \n以上内容来源：\n* [How JavaScript works: Parsing, Abstract Syntax Trees (ASTs) + 5 tips on how to minimize parse time](https://blog.sessionstack.com/how-javascript-works-parsing-abstract-syntax-trees-asts-5-tips-on-how-to-minimize-parse-time-abfcf7e8a0c8)\n* [How JavaScript works: inside the V8 engine + 5 tips on how to write optimized code](https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e)\n\n","source":"_posts/十条编写优化的JavaScript代码的建议.md","raw":"---\ntitle: 十条编写优化的 JavaScript 代码的建议\ndate: 2018-05-29 16:59:40\ntags:\n    - javascript\n---\n\n本文总结了十条编写优秀的 JavaScript 代码的习惯，主要针对 V8 引擎：\n\n1.始终以相同的顺序实例化对象属性，以便可以共享隐藏类和随后优化的代码。V8 在对 js 代码解析的时候会有构建隐藏类的过程，以相同的顺序实例化（属性赋值）的对象会共享相同的隐藏类。下面给出一个不好的实践：\n\n```javascript\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\nvar p1 = new Point(1, 2);\np1.a = 5;\np1.b = 6;\nvar p2 = new Point(3, 4);\np2.b = 7;\np2.a = 8;\n// 由于 a 和 b 的赋值顺序不同，p1 和 p2 无法共享隐藏类\n```\n\n2.避免分配动态属性。在实例化之后向对象添加属性将强制隐藏类更改，并减慢为先前隐藏类优化的所有方法。相反，在其构造函数中分配所有对象的属性。  \n\n3.重复执行相同方法的代码将比仅执行一次（由于内联缓存）执行许多不同方法的代码运行得更快。  \n\n4.避免创建稀疏数组。稀疏数组由于不是所有的元素都存在，因此是一个哈希表，因此访问稀疏数组中的元素代价更高。另外，尽量不要采用预分配数量的大数组，更好的办法是随着你的需要把它的容量增大。最后，尽量不要删除数组中的元素，它会让数组变得稀疏。  \n\n5.标记值：V8采用32位来表示对象和数字，其中用一位来区别对象（flag = 0）或数字（flag = 1），因此这被称之为 SMI (Small Integer)因为它只有31位。因此，如果一个数字大于31位，V8需要对其进行包装，将其变成双精度并且用一个对象来封装它，因此应该尽量使用31位有符号数字从而避免昂贵的封装操作。  \n\n6.检查你的依赖，去掉不需要 import 的内容。  \n\n7.将你的代码分割成一些小的 chunks ，而不是整个引入。 \n \n8.尽可能使用 defer 来推迟加载 JavaScript，另外只加载当前路由需要的代码段。\n  \n9.使用 dev tools 和 DeviceTiming 来寻找代码瓶颈。  \n\n10.使用诸如Optimize.js这样的工具来帮助解析器决定何时需要提前解析以及何时需要延后解析。  \n  \n以上内容来源：\n* [How JavaScript works: Parsing, Abstract Syntax Trees (ASTs) + 5 tips on how to minimize parse time](https://blog.sessionstack.com/how-javascript-works-parsing-abstract-syntax-trees-asts-5-tips-on-how-to-minimize-parse-time-abfcf7e8a0c8)\n* [How JavaScript works: inside the V8 engine + 5 tips on how to write optimized code](https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e)\n\n","slug":"十条编写优化的JavaScript代码的建议","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds04000egxy04bwymul0","content":"<p>本文总结了十条编写优秀的 JavaScript 代码的习惯，主要针对 V8 引擎：</p>\n<p>1.始终以相同的顺序实例化对象属性，以便可以共享隐藏类和随后优化的代码。V8 在对 js 代码解析的时候会有构建隐藏类的过程，以相同的顺序实例化（属性赋值）的对象会共享相同的隐藏类。下面给出一个不好的实践：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">p1.a = <span class=\"number\">5</span>;</span><br><span class=\"line\">p1.b = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">p2.b = <span class=\"number\">7</span>;</span><br><span class=\"line\">p2.a = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"comment\">// 由于 a 和 b 的赋值顺序不同，p1 和 p2 无法共享隐藏类</span></span><br></pre></td></tr></table></figure>\n<p>2.避免分配动态属性。在实例化之后向对象添加属性将强制隐藏类更改，并减慢为先前隐藏类优化的所有方法。相反，在其构造函数中分配所有对象的属性。  </p>\n<p>3.重复执行相同方法的代码将比仅执行一次（由于内联缓存）执行许多不同方法的代码运行得更快。  </p>\n<p>4.避免创建稀疏数组。稀疏数组由于不是所有的元素都存在，因此是一个哈希表，因此访问稀疏数组中的元素代价更高。另外，尽量不要采用预分配数量的大数组，更好的办法是随着你的需要把它的容量增大。最后，尽量不要删除数组中的元素，它会让数组变得稀疏。  </p>\n<p>5.标记值：V8采用32位来表示对象和数字，其中用一位来区别对象（flag = 0）或数字（flag = 1），因此这被称之为 SMI (Small Integer)因为它只有31位。因此，如果一个数字大于31位，V8需要对其进行包装，将其变成双精度并且用一个对象来封装它，因此应该尽量使用31位有符号数字从而避免昂贵的封装操作。  </p>\n<p>6.检查你的依赖，去掉不需要 import 的内容。  </p>\n<p>7.将你的代码分割成一些小的 chunks ，而不是整个引入。 </p>\n<p>8.尽可能使用 defer 来推迟加载 JavaScript，另外只加载当前路由需要的代码段。</p>\n<p>9.使用 dev tools 和 DeviceTiming 来寻找代码瓶颈。  </p>\n<p>10.使用诸如Optimize.js这样的工具来帮助解析器决定何时需要提前解析以及何时需要延后解析。  </p>\n<p>以上内容来源：</p>\n<ul>\n<li><a href=\"https://blog.sessionstack.com/how-javascript-works-parsing-abstract-syntax-trees-asts-5-tips-on-how-to-minimize-parse-time-abfcf7e8a0c8\" target=\"_blank\" rel=\"noopener\">How JavaScript works: Parsing, Abstract Syntax Trees (ASTs) + 5 tips on how to minimize parse time</a></li>\n<li><a href=\"https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e\" target=\"_blank\" rel=\"noopener\">How JavaScript works: inside the V8 engine + 5 tips on how to write optimized code</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本文总结了十条编写优秀的 JavaScript 代码的习惯，主要针对 V8 引擎：</p>\n<p>1.始终以相同的顺序实例化对象属性，以便可以共享隐藏类和随后优化的代码。V8 在对 js 代码解析的时候会有构建隐藏类的过程，以相同的顺序实例化（属性赋值）的对象会共享相同的隐藏类。下面给出一个不好的实践：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">p1.a = <span class=\"number\">5</span>;</span><br><span class=\"line\">p1.b = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">p2.b = <span class=\"number\">7</span>;</span><br><span class=\"line\">p2.a = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"comment\">// 由于 a 和 b 的赋值顺序不同，p1 和 p2 无法共享隐藏类</span></span><br></pre></td></tr></table></figure>\n<p>2.避免分配动态属性。在实例化之后向对象添加属性将强制隐藏类更改，并减慢为先前隐藏类优化的所有方法。相反，在其构造函数中分配所有对象的属性。  </p>\n<p>3.重复执行相同方法的代码将比仅执行一次（由于内联缓存）执行许多不同方法的代码运行得更快。  </p>\n<p>4.避免创建稀疏数组。稀疏数组由于不是所有的元素都存在，因此是一个哈希表，因此访问稀疏数组中的元素代价更高。另外，尽量不要采用预分配数量的大数组，更好的办法是随着你的需要把它的容量增大。最后，尽量不要删除数组中的元素，它会让数组变得稀疏。  </p>\n<p>5.标记值：V8采用32位来表示对象和数字，其中用一位来区别对象（flag = 0）或数字（flag = 1），因此这被称之为 SMI (Small Integer)因为它只有31位。因此，如果一个数字大于31位，V8需要对其进行包装，将其变成双精度并且用一个对象来封装它，因此应该尽量使用31位有符号数字从而避免昂贵的封装操作。  </p>\n<p>6.检查你的依赖，去掉不需要 import 的内容。  </p>\n<p>7.将你的代码分割成一些小的 chunks ，而不是整个引入。 </p>\n<p>8.尽可能使用 defer 来推迟加载 JavaScript，另外只加载当前路由需要的代码段。</p>\n<p>9.使用 dev tools 和 DeviceTiming 来寻找代码瓶颈。  </p>\n<p>10.使用诸如Optimize.js这样的工具来帮助解析器决定何时需要提前解析以及何时需要延后解析。  </p>\n<p>以上内容来源：</p>\n<ul>\n<li><a href=\"https://blog.sessionstack.com/how-javascript-works-parsing-abstract-syntax-trees-asts-5-tips-on-how-to-minimize-parse-time-abfcf7e8a0c8\" target=\"_blank\" rel=\"noopener\">How JavaScript works: Parsing, Abstract Syntax Trees (ASTs) + 5 tips on how to minimize parse time</a></li>\n<li><a href=\"https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e\" target=\"_blank\" rel=\"noopener\">How JavaScript works: inside the V8 engine + 5 tips on how to write optimized code</a></li>\n</ul>\n"},{"title":"深入浏览器web渲染与优化-续","date":"2017-08-31T10:04:03.000Z","_content":">本篇文章接上一篇继续分析浏览器web渲染相关内容，但是更侧重优化工作。当然，主要还是基于X5来分析\n\n上一篇文章我们主要是从浏览器内核的线程角度来分析相关工作的，对整体流程没有宏观清晰的分析，这次我们从宏观到微观，从整体到局部，来进行分析和探究可以优化的地方。\n\n首先，一个网页的加载，需要什么工作呢？\n\n![](https://www.10000h.top/images/data_img/webRender2/P1.png)\n\n这个工作可以分为三部分：云(云端)、管(传输链路)、端(客户端)，从云经过管传到端，然后经过加载解析排版渲染，从而完成网页从请求到呈现的工作(当然，我们这里没有涉及协议的分析，实际上根据协议不同，这个传输可能是多次传输)。\n\n数据到端之后，又经过以下过程，才最终显示出来：\n\n![](https://www.10000h.top/images/data_img/webRender2/P2.png)\n\n在这个过程中，我们怎么衡量性能呢？\n\n固然，我们有诸多浏览器提供的API，这些API能让我们获取到较多信息并且记录上报：\n\n![](https://www.10000h.top/images/data_img/webRender2/P3.png)\n\n但是这些具体数值表达的含义有限，并且他们实际上也不等于用户体验。\n\n所以，找到一个科学并且可以检测的标准，并且这个标准可以和用户体验有正相关关系，这个是至关重要的。\n\n目前这个标准是**首屏时间**(就之前自己的了解，具体的还区分首屏展示时间和首屏可交互时间，但是这里讲师不做区分，就下文提供的测算方法而言，显然这里指的是首屏展示时间，*另外，展示后到用户的第一次操作都会有一个至少1s的延时，毕竟用户手指按下的动作是会比较慢的，这个时间js的交互都能完成了，所以首屏展示时间更加重要--from dorsywang*)\n\n那么**首屏时间**怎么测量呢？\n\n**拿摄像机快速拍照测量的**。这个答案可能有些吃惊，但是目前X5内核业务的相关开发人员的确就是采用这种方式测算的，通过高速相机不断拍照，然后辅助图像识别，判断首屏是否已经加载完成，最终再通过人工回归校对。  \n因为如果采用程序检测的话，基本上都会对过程本身造成一定的影响，所以没有采用这种方式。\n当然，通过摄像+图像识别的这种方式也是有一定的弊端，比如说，假设首屏有一个图片，而图片的加载通常比较慢并且不影响css、js的加载，这个时候直接通过图片识别的话就可能会有一定的误判。\n\n知道了怎么测算，那么接下来分析影响这个指标的一些原因：\n\n* 资源阻塞内核线程\n\n我们知道，一般情况下，css和JS是阻塞页面的，当然也会对首屏时间造成影响。\n\n对这个问题，X5内核有关键子资源(阻塞资源)缓存，这里的关键资源，指的是内核经过统计判断得出的业务常用的关键子资源。\n\n当然，这个统计也可能缺乏一定的准确性，所以相关团队也正在推进这方面的内容规范化(比如写入Web App Manifest)\n\n* 中文Layout的时间过长\n\n这个问题我之前没有听说过，但是的确是这样子，实际上，浏览器在绘制文字的时候经历的过程非常的多，其中有一个环节是找到文字的宽度和高度(因为在英文状态下，每一个字符的宽度是不同的，所以每一个字符都要查找，但是英文总共只有26个字符)，而中文由于字符比较多，常用得就有6000多个，完整的更是有2万个以上，所以这个过程需要花费更多的时间。\n\n为了解决这个问题，X5内核考虑到中文文字几乎都是等宽等高的，所以这个过程对一个文字串来说只需要查询一次即可，实际上是节约了这个环节。\n\n* 首次渲染太慢\n\n为了解决这个问题，可以采用先绘制首屏的方式，这个也就是基于第一篇文章中讲到的浏览器的分块渲染机制\n\n* 一次解析内容过多\n\n采用首屏探测机制，优先解析首屏内容。\n\n另外，这里可以前端配合去做首屏优化：\n\n\n在首屏的位置插入首屏标签，内核解析到标签后立即终止解析并且排版上屏\n\n```\n<meta name=‘x5-pagetype’ content=‘optpage'>\n```\n然后在首屏分界的地方：\n\n```\n<first-screen/>\n```\n\n有了这，可以专门去优化首屏标签之前的内容(这个标签前尽量展现耗时少和不需要阻塞解析的资源)。\n\n另外，X5内核也提供了主资源预拉取的接口，并且考虑到预拉取的cookie问题，还提供了preconnect预链接。  \n*TIP:主资源中关联的子资源预拉取不用主动调用*\n\n* 预先操作\n\n另外为了提供更加极致的优化，X5内核(QQ浏览器、手Q Webview)还提供了如下诸多预操作：\n\n* 在\"黏贴并转到\"之前就开始进行网络请求和预渲染\n* 经常访问的站点可以预解析DNS\n* 点击地址栏时进行搜索预连接\n* 点击链接时，先预链接，再做跳转。\n* ......\n\n### 其他方式优化\n\n实际上上文主要讲了客户端方面的优化工作，实际上对于\"云\"、\"管\"两端，还是有很多优化工作可以讲的，但是由于这个和前端关系不是特别密切，我挑一部分讲一讲。这些在我们前端做个人项目的后台时候也可以参考\n\n##### 后台提速\n\n* 直接使用IP，节省dns的查询时间\n* 维持长连接\n* HTTP1.1启用包头节省\n* 服务器缓存\n* 文本资源压缩传输GZIP(6)\n* 图片尺寸压缩、图片质量压缩、支持webp和sharpp/hevc格式。\n\n##### 降低网络时延\n\n* 就快接入和就近接入\n\n在选择接入点的时候，如果采用就近接入，可以保持路由稳定，有利于负载均衡，并且实现简单，便于维护。但是也有一定的缺点：经验判断，准确度不够高 ； 无法自动切换路由。\n\n相比较而言，选择就快接入，是一个能够提效的方式。\n\n##### 内容防劫持\n\n运营商劫持对我们来说已经是不陌生的话题了，但是X5内核有一个比较新的防劫持手段，就是客户端和云加速服务器同时采用轻量级http加密，虽然这种方式普适性不强，但是的确可以解决腾讯自身业务的防劫持问题。\n\n#### QUIC和http2\n\nQUIC 基于UDP的协议通讯方式，有这些优势：\n\n* 延迟少\n* 前向纠错\n* 没有**线头阻塞[注1]**的多路复用\n* 通信通道的定义基于ID而不是IP+端口，使得切换网络后继续转发链接成为可能\n\n——————\n\n注1：线头阻塞：\n\n![](https://www.10000h.top/images/data_img/webRender2/P4.png)\n\n——————\n\n附1: 带宽和延迟对网页加载的影响：\n\n![](https://www.10000h.top/images/data_img/webRender2/X1.png)\n","source":"_posts/深入浏览器web渲染与优化-续.md","raw":"---\ntitle: 深入浏览器web渲染与优化-续\ndate: 2017-08-31 19:04:03\ntags:\n    - 性能优化\n---\n>本篇文章接上一篇继续分析浏览器web渲染相关内容，但是更侧重优化工作。当然，主要还是基于X5来分析\n\n上一篇文章我们主要是从浏览器内核的线程角度来分析相关工作的，对整体流程没有宏观清晰的分析，这次我们从宏观到微观，从整体到局部，来进行分析和探究可以优化的地方。\n\n首先，一个网页的加载，需要什么工作呢？\n\n![](https://www.10000h.top/images/data_img/webRender2/P1.png)\n\n这个工作可以分为三部分：云(云端)、管(传输链路)、端(客户端)，从云经过管传到端，然后经过加载解析排版渲染，从而完成网页从请求到呈现的工作(当然，我们这里没有涉及协议的分析，实际上根据协议不同，这个传输可能是多次传输)。\n\n数据到端之后，又经过以下过程，才最终显示出来：\n\n![](https://www.10000h.top/images/data_img/webRender2/P2.png)\n\n在这个过程中，我们怎么衡量性能呢？\n\n固然，我们有诸多浏览器提供的API，这些API能让我们获取到较多信息并且记录上报：\n\n![](https://www.10000h.top/images/data_img/webRender2/P3.png)\n\n但是这些具体数值表达的含义有限，并且他们实际上也不等于用户体验。\n\n所以，找到一个科学并且可以检测的标准，并且这个标准可以和用户体验有正相关关系，这个是至关重要的。\n\n目前这个标准是**首屏时间**(就之前自己的了解，具体的还区分首屏展示时间和首屏可交互时间，但是这里讲师不做区分，就下文提供的测算方法而言，显然这里指的是首屏展示时间，*另外，展示后到用户的第一次操作都会有一个至少1s的延时，毕竟用户手指按下的动作是会比较慢的，这个时间js的交互都能完成了，所以首屏展示时间更加重要--from dorsywang*)\n\n那么**首屏时间**怎么测量呢？\n\n**拿摄像机快速拍照测量的**。这个答案可能有些吃惊，但是目前X5内核业务的相关开发人员的确就是采用这种方式测算的，通过高速相机不断拍照，然后辅助图像识别，判断首屏是否已经加载完成，最终再通过人工回归校对。  \n因为如果采用程序检测的话，基本上都会对过程本身造成一定的影响，所以没有采用这种方式。\n当然，通过摄像+图像识别的这种方式也是有一定的弊端，比如说，假设首屏有一个图片，而图片的加载通常比较慢并且不影响css、js的加载，这个时候直接通过图片识别的话就可能会有一定的误判。\n\n知道了怎么测算，那么接下来分析影响这个指标的一些原因：\n\n* 资源阻塞内核线程\n\n我们知道，一般情况下，css和JS是阻塞页面的，当然也会对首屏时间造成影响。\n\n对这个问题，X5内核有关键子资源(阻塞资源)缓存，这里的关键资源，指的是内核经过统计判断得出的业务常用的关键子资源。\n\n当然，这个统计也可能缺乏一定的准确性，所以相关团队也正在推进这方面的内容规范化(比如写入Web App Manifest)\n\n* 中文Layout的时间过长\n\n这个问题我之前没有听说过，但是的确是这样子，实际上，浏览器在绘制文字的时候经历的过程非常的多，其中有一个环节是找到文字的宽度和高度(因为在英文状态下，每一个字符的宽度是不同的，所以每一个字符都要查找，但是英文总共只有26个字符)，而中文由于字符比较多，常用得就有6000多个，完整的更是有2万个以上，所以这个过程需要花费更多的时间。\n\n为了解决这个问题，X5内核考虑到中文文字几乎都是等宽等高的，所以这个过程对一个文字串来说只需要查询一次即可，实际上是节约了这个环节。\n\n* 首次渲染太慢\n\n为了解决这个问题，可以采用先绘制首屏的方式，这个也就是基于第一篇文章中讲到的浏览器的分块渲染机制\n\n* 一次解析内容过多\n\n采用首屏探测机制，优先解析首屏内容。\n\n另外，这里可以前端配合去做首屏优化：\n\n\n在首屏的位置插入首屏标签，内核解析到标签后立即终止解析并且排版上屏\n\n```\n<meta name=‘x5-pagetype’ content=‘optpage'>\n```\n然后在首屏分界的地方：\n\n```\n<first-screen/>\n```\n\n有了这，可以专门去优化首屏标签之前的内容(这个标签前尽量展现耗时少和不需要阻塞解析的资源)。\n\n另外，X5内核也提供了主资源预拉取的接口，并且考虑到预拉取的cookie问题，还提供了preconnect预链接。  \n*TIP:主资源中关联的子资源预拉取不用主动调用*\n\n* 预先操作\n\n另外为了提供更加极致的优化，X5内核(QQ浏览器、手Q Webview)还提供了如下诸多预操作：\n\n* 在\"黏贴并转到\"之前就开始进行网络请求和预渲染\n* 经常访问的站点可以预解析DNS\n* 点击地址栏时进行搜索预连接\n* 点击链接时，先预链接，再做跳转。\n* ......\n\n### 其他方式优化\n\n实际上上文主要讲了客户端方面的优化工作，实际上对于\"云\"、\"管\"两端，还是有很多优化工作可以讲的，但是由于这个和前端关系不是特别密切，我挑一部分讲一讲。这些在我们前端做个人项目的后台时候也可以参考\n\n##### 后台提速\n\n* 直接使用IP，节省dns的查询时间\n* 维持长连接\n* HTTP1.1启用包头节省\n* 服务器缓存\n* 文本资源压缩传输GZIP(6)\n* 图片尺寸压缩、图片质量压缩、支持webp和sharpp/hevc格式。\n\n##### 降低网络时延\n\n* 就快接入和就近接入\n\n在选择接入点的时候，如果采用就近接入，可以保持路由稳定，有利于负载均衡，并且实现简单，便于维护。但是也有一定的缺点：经验判断，准确度不够高 ； 无法自动切换路由。\n\n相比较而言，选择就快接入，是一个能够提效的方式。\n\n##### 内容防劫持\n\n运营商劫持对我们来说已经是不陌生的话题了，但是X5内核有一个比较新的防劫持手段，就是客户端和云加速服务器同时采用轻量级http加密，虽然这种方式普适性不强，但是的确可以解决腾讯自身业务的防劫持问题。\n\n#### QUIC和http2\n\nQUIC 基于UDP的协议通讯方式，有这些优势：\n\n* 延迟少\n* 前向纠错\n* 没有**线头阻塞[注1]**的多路复用\n* 通信通道的定义基于ID而不是IP+端口，使得切换网络后继续转发链接成为可能\n\n——————\n\n注1：线头阻塞：\n\n![](https://www.10000h.top/images/data_img/webRender2/P4.png)\n\n——————\n\n附1: 带宽和延迟对网页加载的影响：\n\n![](https://www.10000h.top/images/data_img/webRender2/X1.png)\n","slug":"深入浏览器web渲染与优化-续","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds05000hgxy05fgopd8p","content":"<blockquote>\n<p>本篇文章接上一篇继续分析浏览器web渲染相关内容，但是更侧重优化工作。当然，主要还是基于X5来分析</p>\n</blockquote>\n<p>上一篇文章我们主要是从浏览器内核的线程角度来分析相关工作的，对整体流程没有宏观清晰的分析，这次我们从宏观到微观，从整体到局部，来进行分析和探究可以优化的地方。</p>\n<p>首先，一个网页的加载，需要什么工作呢？</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/P1.png\" alt=\"\"></p>\n<p>这个工作可以分为三部分：云(云端)、管(传输链路)、端(客户端)，从云经过管传到端，然后经过加载解析排版渲染，从而完成网页从请求到呈现的工作(当然，我们这里没有涉及协议的分析，实际上根据协议不同，这个传输可能是多次传输)。</p>\n<p>数据到端之后，又经过以下过程，才最终显示出来：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/P2.png\" alt=\"\"></p>\n<p>在这个过程中，我们怎么衡量性能呢？</p>\n<p>固然，我们有诸多浏览器提供的API，这些API能让我们获取到较多信息并且记录上报：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/P3.png\" alt=\"\"></p>\n<p>但是这些具体数值表达的含义有限，并且他们实际上也不等于用户体验。</p>\n<p>所以，找到一个科学并且可以检测的标准，并且这个标准可以和用户体验有正相关关系，这个是至关重要的。</p>\n<p>目前这个标准是<strong>首屏时间</strong>(就之前自己的了解，具体的还区分首屏展示时间和首屏可交互时间，但是这里讲师不做区分，就下文提供的测算方法而言，显然这里指的是首屏展示时间，<em>另外，展示后到用户的第一次操作都会有一个至少1s的延时，毕竟用户手指按下的动作是会比较慢的，这个时间js的交互都能完成了，所以首屏展示时间更加重要–from dorsywang</em>)</p>\n<p>那么<strong>首屏时间</strong>怎么测量呢？</p>\n<p><strong>拿摄像机快速拍照测量的</strong>。这个答案可能有些吃惊，但是目前X5内核业务的相关开发人员的确就是采用这种方式测算的，通过高速相机不断拍照，然后辅助图像识别，判断首屏是否已经加载完成，最终再通过人工回归校对。<br>因为如果采用程序检测的话，基本上都会对过程本身造成一定的影响，所以没有采用这种方式。<br>当然，通过摄像+图像识别的这种方式也是有一定的弊端，比如说，假设首屏有一个图片，而图片的加载通常比较慢并且不影响css、js的加载，这个时候直接通过图片识别的话就可能会有一定的误判。</p>\n<p>知道了怎么测算，那么接下来分析影响这个指标的一些原因：</p>\n<ul>\n<li>资源阻塞内核线程</li>\n</ul>\n<p>我们知道，一般情况下，css和JS是阻塞页面的，当然也会对首屏时间造成影响。</p>\n<p>对这个问题，X5内核有关键子资源(阻塞资源)缓存，这里的关键资源，指的是内核经过统计判断得出的业务常用的关键子资源。</p>\n<p>当然，这个统计也可能缺乏一定的准确性，所以相关团队也正在推进这方面的内容规范化(比如写入Web App Manifest)</p>\n<ul>\n<li>中文Layout的时间过长</li>\n</ul>\n<p>这个问题我之前没有听说过，但是的确是这样子，实际上，浏览器在绘制文字的时候经历的过程非常的多，其中有一个环节是找到文字的宽度和高度(因为在英文状态下，每一个字符的宽度是不同的，所以每一个字符都要查找，但是英文总共只有26个字符)，而中文由于字符比较多，常用得就有6000多个，完整的更是有2万个以上，所以这个过程需要花费更多的时间。</p>\n<p>为了解决这个问题，X5内核考虑到中文文字几乎都是等宽等高的，所以这个过程对一个文字串来说只需要查询一次即可，实际上是节约了这个环节。</p>\n<ul>\n<li>首次渲染太慢</li>\n</ul>\n<p>为了解决这个问题，可以采用先绘制首屏的方式，这个也就是基于第一篇文章中讲到的浏览器的分块渲染机制</p>\n<ul>\n<li>一次解析内容过多</li>\n</ul>\n<p>采用首屏探测机制，优先解析首屏内容。</p>\n<p>另外，这里可以前端配合去做首屏优化：</p>\n<p>在首屏的位置插入首屏标签，内核解析到标签后立即终止解析并且排版上屏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=‘x5-pagetype’ content=‘optpage&apos;&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在首屏分界的地方：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;first-screen/&gt;</span><br></pre></td></tr></table></figure>\n<p>有了这，可以专门去优化首屏标签之前的内容(这个标签前尽量展现耗时少和不需要阻塞解析的资源)。</p>\n<p>另外，X5内核也提供了主资源预拉取的接口，并且考虑到预拉取的cookie问题，还提供了preconnect预链接。<br><em>TIP:主资源中关联的子资源预拉取不用主动调用</em></p>\n<ul>\n<li>预先操作</li>\n</ul>\n<p>另外为了提供更加极致的优化，X5内核(QQ浏览器、手Q Webview)还提供了如下诸多预操作：</p>\n<ul>\n<li>在”黏贴并转到”之前就开始进行网络请求和预渲染</li>\n<li>经常访问的站点可以预解析DNS</li>\n<li>点击地址栏时进行搜索预连接</li>\n<li>点击链接时，先预链接，再做跳转。</li>\n<li>……</li>\n</ul>\n<h3 id=\"其他方式优化\"><a href=\"#其他方式优化\" class=\"headerlink\" title=\"其他方式优化\"></a>其他方式优化</h3><p>实际上上文主要讲了客户端方面的优化工作，实际上对于”云”、”管”两端，还是有很多优化工作可以讲的，但是由于这个和前端关系不是特别密切，我挑一部分讲一讲。这些在我们前端做个人项目的后台时候也可以参考</p>\n<h5 id=\"后台提速\"><a href=\"#后台提速\" class=\"headerlink\" title=\"后台提速\"></a>后台提速</h5><ul>\n<li>直接使用IP，节省dns的查询时间</li>\n<li>维持长连接</li>\n<li>HTTP1.1启用包头节省</li>\n<li>服务器缓存</li>\n<li>文本资源压缩传输GZIP(6)</li>\n<li>图片尺寸压缩、图片质量压缩、支持webp和sharpp/hevc格式。</li>\n</ul>\n<h5 id=\"降低网络时延\"><a href=\"#降低网络时延\" class=\"headerlink\" title=\"降低网络时延\"></a>降低网络时延</h5><ul>\n<li>就快接入和就近接入</li>\n</ul>\n<p>在选择接入点的时候，如果采用就近接入，可以保持路由稳定，有利于负载均衡，并且实现简单，便于维护。但是也有一定的缺点：经验判断，准确度不够高 ； 无法自动切换路由。</p>\n<p>相比较而言，选择就快接入，是一个能够提效的方式。</p>\n<h5 id=\"内容防劫持\"><a href=\"#内容防劫持\" class=\"headerlink\" title=\"内容防劫持\"></a>内容防劫持</h5><p>运营商劫持对我们来说已经是不陌生的话题了，但是X5内核有一个比较新的防劫持手段，就是客户端和云加速服务器同时采用轻量级http加密，虽然这种方式普适性不强，但是的确可以解决腾讯自身业务的防劫持问题。</p>\n<h4 id=\"QUIC和http2\"><a href=\"#QUIC和http2\" class=\"headerlink\" title=\"QUIC和http2\"></a>QUIC和http2</h4><p>QUIC 基于UDP的协议通讯方式，有这些优势：</p>\n<ul>\n<li>延迟少</li>\n<li>前向纠错</li>\n<li>没有<strong>线头阻塞[注1]</strong>的多路复用</li>\n<li>通信通道的定义基于ID而不是IP+端口，使得切换网络后继续转发链接成为可能</li>\n</ul>\n<p>——————</p>\n<p>注1：线头阻塞：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/P4.png\" alt=\"\"></p>\n<p>——————</p>\n<p>附1: 带宽和延迟对网页加载的影响：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/X1.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本篇文章接上一篇继续分析浏览器web渲染相关内容，但是更侧重优化工作。当然，主要还是基于X5来分析</p>\n</blockquote>\n<p>上一篇文章我们主要是从浏览器内核的线程角度来分析相关工作的，对整体流程没有宏观清晰的分析，这次我们从宏观到微观，从整体到局部，来进行分析和探究可以优化的地方。</p>\n<p>首先，一个网页的加载，需要什么工作呢？</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/P1.png\" alt=\"\"></p>\n<p>这个工作可以分为三部分：云(云端)、管(传输链路)、端(客户端)，从云经过管传到端，然后经过加载解析排版渲染，从而完成网页从请求到呈现的工作(当然，我们这里没有涉及协议的分析，实际上根据协议不同，这个传输可能是多次传输)。</p>\n<p>数据到端之后，又经过以下过程，才最终显示出来：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/P2.png\" alt=\"\"></p>\n<p>在这个过程中，我们怎么衡量性能呢？</p>\n<p>固然，我们有诸多浏览器提供的API，这些API能让我们获取到较多信息并且记录上报：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/P3.png\" alt=\"\"></p>\n<p>但是这些具体数值表达的含义有限，并且他们实际上也不等于用户体验。</p>\n<p>所以，找到一个科学并且可以检测的标准，并且这个标准可以和用户体验有正相关关系，这个是至关重要的。</p>\n<p>目前这个标准是<strong>首屏时间</strong>(就之前自己的了解，具体的还区分首屏展示时间和首屏可交互时间，但是这里讲师不做区分，就下文提供的测算方法而言，显然这里指的是首屏展示时间，<em>另外，展示后到用户的第一次操作都会有一个至少1s的延时，毕竟用户手指按下的动作是会比较慢的，这个时间js的交互都能完成了，所以首屏展示时间更加重要–from dorsywang</em>)</p>\n<p>那么<strong>首屏时间</strong>怎么测量呢？</p>\n<p><strong>拿摄像机快速拍照测量的</strong>。这个答案可能有些吃惊，但是目前X5内核业务的相关开发人员的确就是采用这种方式测算的，通过高速相机不断拍照，然后辅助图像识别，判断首屏是否已经加载完成，最终再通过人工回归校对。<br>因为如果采用程序检测的话，基本上都会对过程本身造成一定的影响，所以没有采用这种方式。<br>当然，通过摄像+图像识别的这种方式也是有一定的弊端，比如说，假设首屏有一个图片，而图片的加载通常比较慢并且不影响css、js的加载，这个时候直接通过图片识别的话就可能会有一定的误判。</p>\n<p>知道了怎么测算，那么接下来分析影响这个指标的一些原因：</p>\n<ul>\n<li>资源阻塞内核线程</li>\n</ul>\n<p>我们知道，一般情况下，css和JS是阻塞页面的，当然也会对首屏时间造成影响。</p>\n<p>对这个问题，X5内核有关键子资源(阻塞资源)缓存，这里的关键资源，指的是内核经过统计判断得出的业务常用的关键子资源。</p>\n<p>当然，这个统计也可能缺乏一定的准确性，所以相关团队也正在推进这方面的内容规范化(比如写入Web App Manifest)</p>\n<ul>\n<li>中文Layout的时间过长</li>\n</ul>\n<p>这个问题我之前没有听说过，但是的确是这样子，实际上，浏览器在绘制文字的时候经历的过程非常的多，其中有一个环节是找到文字的宽度和高度(因为在英文状态下，每一个字符的宽度是不同的，所以每一个字符都要查找，但是英文总共只有26个字符)，而中文由于字符比较多，常用得就有6000多个，完整的更是有2万个以上，所以这个过程需要花费更多的时间。</p>\n<p>为了解决这个问题，X5内核考虑到中文文字几乎都是等宽等高的，所以这个过程对一个文字串来说只需要查询一次即可，实际上是节约了这个环节。</p>\n<ul>\n<li>首次渲染太慢</li>\n</ul>\n<p>为了解决这个问题，可以采用先绘制首屏的方式，这个也就是基于第一篇文章中讲到的浏览器的分块渲染机制</p>\n<ul>\n<li>一次解析内容过多</li>\n</ul>\n<p>采用首屏探测机制，优先解析首屏内容。</p>\n<p>另外，这里可以前端配合去做首屏优化：</p>\n<p>在首屏的位置插入首屏标签，内核解析到标签后立即终止解析并且排版上屏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=‘x5-pagetype’ content=‘optpage&apos;&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在首屏分界的地方：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;first-screen/&gt;</span><br></pre></td></tr></table></figure>\n<p>有了这，可以专门去优化首屏标签之前的内容(这个标签前尽量展现耗时少和不需要阻塞解析的资源)。</p>\n<p>另外，X5内核也提供了主资源预拉取的接口，并且考虑到预拉取的cookie问题，还提供了preconnect预链接。<br><em>TIP:主资源中关联的子资源预拉取不用主动调用</em></p>\n<ul>\n<li>预先操作</li>\n</ul>\n<p>另外为了提供更加极致的优化，X5内核(QQ浏览器、手Q Webview)还提供了如下诸多预操作：</p>\n<ul>\n<li>在”黏贴并转到”之前就开始进行网络请求和预渲染</li>\n<li>经常访问的站点可以预解析DNS</li>\n<li>点击地址栏时进行搜索预连接</li>\n<li>点击链接时，先预链接，再做跳转。</li>\n<li>……</li>\n</ul>\n<h3 id=\"其他方式优化\"><a href=\"#其他方式优化\" class=\"headerlink\" title=\"其他方式优化\"></a>其他方式优化</h3><p>实际上上文主要讲了客户端方面的优化工作，实际上对于”云”、”管”两端，还是有很多优化工作可以讲的，但是由于这个和前端关系不是特别密切，我挑一部分讲一讲。这些在我们前端做个人项目的后台时候也可以参考</p>\n<h5 id=\"后台提速\"><a href=\"#后台提速\" class=\"headerlink\" title=\"后台提速\"></a>后台提速</h5><ul>\n<li>直接使用IP，节省dns的查询时间</li>\n<li>维持长连接</li>\n<li>HTTP1.1启用包头节省</li>\n<li>服务器缓存</li>\n<li>文本资源压缩传输GZIP(6)</li>\n<li>图片尺寸压缩、图片质量压缩、支持webp和sharpp/hevc格式。</li>\n</ul>\n<h5 id=\"降低网络时延\"><a href=\"#降低网络时延\" class=\"headerlink\" title=\"降低网络时延\"></a>降低网络时延</h5><ul>\n<li>就快接入和就近接入</li>\n</ul>\n<p>在选择接入点的时候，如果采用就近接入，可以保持路由稳定，有利于负载均衡，并且实现简单，便于维护。但是也有一定的缺点：经验判断，准确度不够高 ； 无法自动切换路由。</p>\n<p>相比较而言，选择就快接入，是一个能够提效的方式。</p>\n<h5 id=\"内容防劫持\"><a href=\"#内容防劫持\" class=\"headerlink\" title=\"内容防劫持\"></a>内容防劫持</h5><p>运营商劫持对我们来说已经是不陌生的话题了，但是X5内核有一个比较新的防劫持手段，就是客户端和云加速服务器同时采用轻量级http加密，虽然这种方式普适性不强，但是的确可以解决腾讯自身业务的防劫持问题。</p>\n<h4 id=\"QUIC和http2\"><a href=\"#QUIC和http2\" class=\"headerlink\" title=\"QUIC和http2\"></a>QUIC和http2</h4><p>QUIC 基于UDP的协议通讯方式，有这些优势：</p>\n<ul>\n<li>延迟少</li>\n<li>前向纠错</li>\n<li>没有<strong>线头阻塞[注1]</strong>的多路复用</li>\n<li>通信通道的定义基于ID而不是IP+端口，使得切换网络后继续转发链接成为可能</li>\n</ul>\n<p>——————</p>\n<p>注1：线头阻塞：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/P4.png\" alt=\"\"></p>\n<p>——————</p>\n<p>附1: 带宽和延迟对网页加载的影响：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender2/X1.png\" alt=\"\"></p>\n"},{"title":"腾讯云北美服务器搭建ShadowSocks代理","date":"2016-08-08T10:15:01.000Z","_content":"\n注：本教程适合centos系列和red hat系列\n\n登陆SSH \n新的VPS可以先升级\n\n```\nyum -y update\n```\n\n有些VPS 没有wget \n这种要先装\n\n```\nyum -y install wget\n```\n\n输入以下命令：（可以复制）\n\n```\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\nchmod +x shadowsocks.sh\n./shadowsocks.sh 2>&1 | tee shadowsocks.log\n```\n\n第一行是下载命令，下载东西，第二行是修改权限，第三行是安装命令\n\n下面是按照配置图\n\n```\n配置：\n密码：（默认是teddysun.com）\n端口：默认是8989\n然后按任意键安装，退出按 Ctrl+c\n```\n\n安装完成会有一个配置\n\n```\nCongratulations, shadowsocks install completed!Your Server IP:  ***** VPS的IP地址Your Server Port:  *****  你刚才设置的端口Your Password:  ****  你刚才设置的密码Your Local IP:  127.0.0.1 Your Local Port:  1080 Your Encryption Method:  aes-256-cfb Welcome to visit:https://teddysun.com/342.htmlEnjoy it!\n```\n\n然后即可以使用\n\n卸载方法：\n\n使用 root 用户登录，运行以下命令：\n\n```\n./shadowsocksR.sh uninstall\n```\n\n安装完成后即已后台启动 ShadowsocksR ，运行：\n\n```\n/etc/init.d/shadowsocks status\n```\n","source":"_posts/腾讯云北美服务器搭建ShadowSocks代理.md","raw":"---\ntitle: 腾讯云北美服务器搭建ShadowSocks代理\ndate: 2016-08-08 19:15:01\ntags:\n    - ShadowSocks\n---\n\n注：本教程适合centos系列和red hat系列\n\n登陆SSH \n新的VPS可以先升级\n\n```\nyum -y update\n```\n\n有些VPS 没有wget \n这种要先装\n\n```\nyum -y install wget\n```\n\n输入以下命令：（可以复制）\n\n```\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\nchmod +x shadowsocks.sh\n./shadowsocks.sh 2>&1 | tee shadowsocks.log\n```\n\n第一行是下载命令，下载东西，第二行是修改权限，第三行是安装命令\n\n下面是按照配置图\n\n```\n配置：\n密码：（默认是teddysun.com）\n端口：默认是8989\n然后按任意键安装，退出按 Ctrl+c\n```\n\n安装完成会有一个配置\n\n```\nCongratulations, shadowsocks install completed!Your Server IP:  ***** VPS的IP地址Your Server Port:  *****  你刚才设置的端口Your Password:  ****  你刚才设置的密码Your Local IP:  127.0.0.1 Your Local Port:  1080 Your Encryption Method:  aes-256-cfb Welcome to visit:https://teddysun.com/342.htmlEnjoy it!\n```\n\n然后即可以使用\n\n卸载方法：\n\n使用 root 用户登录，运行以下命令：\n\n```\n./shadowsocksR.sh uninstall\n```\n\n安装完成后即已后台启动 ShadowsocksR ，运行：\n\n```\n/etc/init.d/shadowsocks status\n```\n","slug":"腾讯云北美服务器搭建ShadowSocks代理","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds06000kgxy0doi8xma1","content":"<p>注：本教程适合centos系列和red hat系列</p>\n<p>登陆SSH<br>新的VPS可以先升级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update</span><br></pre></td></tr></table></figure>\n<p>有些VPS 没有wget<br>这种要先装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>\n<p>输入以下命令：（可以复制）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class=\"line\">chmod +x shadowsocks.sh</span><br><span class=\"line\">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure>\n<p>第一行是下载命令，下载东西，第二行是修改权限，第三行是安装命令</p>\n<p>下面是按照配置图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置：</span><br><span class=\"line\">密码：（默认是teddysun.com）</span><br><span class=\"line\">端口：默认是8989</span><br><span class=\"line\">然后按任意键安装，退出按 Ctrl+c</span><br></pre></td></tr></table></figure>\n<p>安装完成会有一个配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, shadowsocks install completed!Your Server IP:  ***** VPS的IP地址Your Server Port:  *****  你刚才设置的端口Your Password:  ****  你刚才设置的密码Your Local IP:  127.0.0.1 Your Local Port:  1080 Your Encryption Method:  aes-256-cfb Welcome to visit:https://teddysun.com/342.htmlEnjoy it!</span><br></pre></td></tr></table></figure>\n<p>然后即可以使用</p>\n<p>卸载方法：</p>\n<p>使用 root 用户登录，运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocksR.sh uninstall</span><br></pre></td></tr></table></figure>\n<p>安装完成后即已后台启动 ShadowsocksR ，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>注：本教程适合centos系列和red hat系列</p>\n<p>登陆SSH<br>新的VPS可以先升级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update</span><br></pre></td></tr></table></figure>\n<p>有些VPS 没有wget<br>这种要先装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>\n<p>输入以下命令：（可以复制）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class=\"line\">chmod +x shadowsocks.sh</span><br><span class=\"line\">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure>\n<p>第一行是下载命令，下载东西，第二行是修改权限，第三行是安装命令</p>\n<p>下面是按照配置图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">配置：</span><br><span class=\"line\">密码：（默认是teddysun.com）</span><br><span class=\"line\">端口：默认是8989</span><br><span class=\"line\">然后按任意键安装，退出按 Ctrl+c</span><br></pre></td></tr></table></figure>\n<p>安装完成会有一个配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, shadowsocks install completed!Your Server IP:  ***** VPS的IP地址Your Server Port:  *****  你刚才设置的端口Your Password:  ****  你刚才设置的密码Your Local IP:  127.0.0.1 Your Local Port:  1080 Your Encryption Method:  aes-256-cfb Welcome to visit:https://teddysun.com/342.htmlEnjoy it!</span><br></pre></td></tr></table></figure>\n<p>然后即可以使用</p>\n<p>卸载方法：</p>\n<p>使用 root 用户登录，运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocksR.sh uninstall</span><br></pre></td></tr></table></figure>\n<p>安装完成后即已后台启动 ShadowsocksR ，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure>\n"},{"title":"[PWA实践]serviceWorker生命周期、请求代理与通信","date":"2018-02-11T06:05:43.000Z","_content":"\n本文主要讲 serviceWorker 生命周期和挂载、卸载等问题，适合对 serviceWorker 的作用有所了解但是具体细节不是特别清楚的读者\n\n**以下所有分析基于 Chrome V63**\n\n### serviceWorker的挂载\n\n先来一段代码感受serviceWorker注册:\n\n```\nif ('serviceWorker' in navigator) {\n      window.addEventListener('load', function () {\n          navigator.serviceWorker.register('/sw.js', {scope: '/'})\n              .then(function (registration) {\n                  // 注册成功\n                  console.log('ServiceWorker registration successful with scope: ', registration.scope);\n              })\n              .catch(function (err) {\n                  // 注册失败:(\n                  console.log('ServiceWorker registration failed: ', err);\n              });\n      });\n}\n```\n通过上述代码，我们定义在`/sw.js`里的内容就会生效(对于当前页面之前没有 serviceWorker 的情况而言，我们注册的 serviceWorker 肯定会生效，如果当前页面已经有了我们之前注册的 serviceWorker，这个时候涉及到 serviceWorker的更新机制，下文详述)\n\n如果我们在`sw.js`没有变化的情况下刷新这个页面，每次还是会有注册成功的回调以及相应的log输出，但是这个时候浏览器发现我们的 serviceWorker 并没有发生变化，并不会重置一遍 serviceWorker\n\n### serviceWorker更新\n\n我们如果想更新一个 serviceWorker，根据我们的一般web开发策略，可能会想到以下几种策略：\n\n* 仅变更文件名(比如把`sw.js`变成`sw-v2.js`或者加一个hash)\n* 仅变更文件内容(仅仅更新`sw.js`的内容，文件名不变)\n* 同时变更：同时执行以上两条\n\n在这里，我可以很负责的告诉你，**变更serviceWorker文件名绝对不是一个好的实践**，浏览器判断 serviceWorker 是否相同基本和文件名没有关系，甚至有可能还会造成浏览器抛出404异常(因为找不到原来的文件名对应的文件了)。\n\n所以我们只需要变更内容即可，实际上，我们每次打开或者刷新该页面，浏览器都会重新请求一遍 serviceWorker 的定义文件，如果发现文件内容和之前的不同了，这个时候:\n\n(*下文中，我们使用“有关 tab”来表示受 serviceWorker 控制的页面*，刷新均指普通刷新(F5/CommandR)并不指Hard Reload)\n\n* 这个新的 serviceWorker 就会进入到一个 “waiting to activate” 的状态，并且只要我们不关闭这个网站的所有tab(更准确地说，是这个 serviceWorker 控制的所有页面)，新的 serviceWorker 始终不会进入替换原有的进入到 running 状态(就算我们只打开了一个有关 tab，直接刷新也不会让新的替换旧的)。\n\n* 如果我们多次更新了 serviceWorker 并且没有关闭当前的 tab 页面，那么新的 serviceWorker 就会挤掉原先处于第二顺位(waiting to activate)的serviceWorker，变成`waiting to activate`状态\n\n也就是说，我们只有关闭当前旧的 serviceWorker 控制的所有页面 的所有tab，之后浏览器才会把旧的 serviveWorker 移除掉，换成新的，再打开相应的页面就会使用新的了。\n\n当然，也有一个特殊情况：如果我们在新的 serviceWorker 使用了`self.skipWaiting();`，像这样：\n\n```\nself.addEventListener('install', function(event) {\n    self.skipWaiting();\n});\n```\n\n这个时候，要分为以下两种情况：\n\n* 如果当前我们只打开了一个有关 tab，这个时候，我们直接刷新，发现新的已经替换掉旧的了。\n* 如果我们当前打开了若干有关 tab，这个时候，无论我们刷新多少次，新的也不会替换掉旧的，只有我们一个一个关掉tab(或者跳转走)只剩下最后一个了，这个时候刷新，会让新的替换旧的(也就是上一种情况)\n\nChrome 的这种机制，防止了同一个页面先后被新旧两个不同的 serviceWorker 接管的情况出现。\n\n#### 手动更新\n\n虽然说，在页面每次进入的时候浏览器都会检查一遍 serviceWorker 是否更新，但如果我们想要手动更新 serviceWorker 也没有问题：\n\n```\nnavigator.serviceWorker.register(\"/sw.js\").then(reg => {\n  reg.update();\n  // 或者 一段时间之后更新\n});\n```\n\n这个时候如果 serviceWorker 变化了，那么会重新触发 install 执行一遍 install 的回调函数，如果没有变，就不会触发这个生命周期。\n\n#### install 生命周期钩子\n\n我们一般会在 sw.js 中，添加`install`的回调，一般在回调中，我们会进行缓存处理操作，像这样：\n\n```\nself.addEventListener('install', function(event) {\n    console.log('[sw2] serviceWorker Installed successfully', event)\n\n    event.waitUntil(\n        caches.open('mysite-static-v1').then(function(cache) {\n            return cache.addAll([\n                '/stylesheets/style.css',\n                '/javascripts/common.39c462651d449a73b5bb.js',\n            ]);\n        })\n    )\n}    \n```\n\n如果我们新打开一个页面，如果之前有 serviceWorker，那么会触发`install`，如果之前没有， 那么在 serviceWorker 装载后会触发 `install`。\n\n如果我们刷新页面，serviceWorker 和之前没有变化或者 serviceWorker 已经处在 `waiting to activate`，不会触发`install`，如果有变化，会触发`install`，但不会接管页面(上文中提到)。\n\n#### activate 生命周期钩子\n\nactivate 在什么时候被触发呢？\n\n如果当前页面没有 serviceworker ，那么会在 install 之后触发。\n\n如果当前页面有 serviceWorker，并且有 serviceWorker更新，新的 serviceWorker 只会触发 install ，不会触发 activate\n\n换句话说，当前变成 active 的 serviceWorker 才会被触发这个生命周期钩子\n\n\n### serviceWorker 代理请求\n\nserviceWorker 代理请求相对来说比较好理解，以下是一个很简单的例子：\n\n```\nself.addEventListener('install', function(event) {\n    console.log('[sw2] serviceWorker Installed successfully', event)\n\n    event.waitUntil(\n        caches.open('mysite-static-v1').then(function(cache) {\n            return cache.addAll([\n                '/stylesheets/style.css',\n                '/javascripts/common.39c462651d449a73b5bb.js',\n            ]);\n        })\n    );\n});\n\nself.addEventListener('fetch', function(event) {\n    console.log('Handling fetch event for', event.request.url);\n    // console.log('[sw2]fetch but do nothing')\n\n    event.respondWith(\n        // caches.match() will look for a cache entry in all of the caches available to the service worker.\n        // It's an alternative to first opening a specific named cache and then matching on that.\n        caches.match(event.request).then(function(response) {\n            if (response) {\n                console.log('Found response in cache:', response);\n\n                return response;\n            }\n\n            console.log('No response found in cache. About to fetch from network...');\n\n            // event.request will always have the proper mode set ('cors, 'no-cors', etc.) so we don't\n            // have to hardcode 'no-cors' like we do when fetch()ing in the install handler.\n            return fetch(event.request).then(function(response) {\n                console.log('Response from network is:', response);\n\n                return response;\n            }).catch(function(error) {\n                // This catch() will handle exceptions thrown from the fetch() operation.\n                // Note that a HTTP error response (e.g. 404) will NOT trigger an exception.\n                // It will return a normal response object that has the appropriate error code set.\n                console.error('Fetching failed:', error);\n\n                throw error;\n            });\n        })\n    );\n});\n```\n\n有两点要注意的：\n\n我们如果这样代理了，哪怕没有 cache 命中，实际上也会在控制台写from serviceWorker，而那些真正由serviceWorker发出的请求也会显示，有一个齿轮图标，如下图：\n\n![](https://www.10000h.top/images/sw_1.png)\n\n第二点就是我们如果在 fetch 的 listener 里面 do nothing， 也不会导致这个请求直接假死掉的。\n\n另外，通过上面的代码我们发现，实际上由于现在我们习惯给我们的文件资源加上 hash，所以我们基本上不可能手动输入需要缓存的文件列表，现在大多数情况下，我们都是借助 webpack 插件，完成这部分工作。\n\n### serviceWorker 和 页面之间的通信\n\nserviceWorker向页面发消息：\n\n```\nsw.js:\n\nself.clients.matchAll().then(clients => {\n    clients.forEach(client => {\n        console.log('%c [sw message]', 'color:#00aa00', client)\n        client.postMessage(\"This message is from serviceWorker\")\n    })\n})\n\n主页面:\n\nnavigator.serviceWorker.addEventListener('message', function (event) {\n    console.log('[Main] receive from serviceWorker:', event.data, event)\n});\n```\n\n当然，这里面是有坑的：\n\n* 主界面的事件监听需要等serviceWorker注册完毕后，所以一般`navigator.serviceWorker.register`的回调到来之后再进行注册(或者延迟足够的时间)。\n* 如果在主界面事件监听还没有注册成功的时候 serviceWorker 发送消息，自然是收不到的。如果我们把 serviceWorker 直接写在 install 的回调中，也是不能被正常收到的。\n\n从页面向 serviceWorker 发送消息：\n\n```\n主页面:\n\nnavigator.serviceWorker.controller && navigator.serviceWorker.controller.postMessage('hello serviceWorker');\n\nsw.js:\nself.addEventListener('message', function (event) {\n    console.log(\"[sw from main]\",event.data); // 输出：'sw.updatedone'\n});\n```\n\n同样的，这也要求主界面的代码需要等到serviceWorker注册完毕后触发，另外还有一点值得注意， serviceWorker 的事件绑定代码要求主界面的serviceWorker已经注册完毕后才可以。\n\n也就是说，如果当前页面没有该serviceWorker 第一次注册是不会收到主界面接收到的消息的。\n\n记住，只有当前已经在 active 的 serviceWorker， 才能和主页面收发消息等。\n\n**以上就是和 serviceWorker 有关的一些内容，在下一篇文章中，我会对PWA 添加至主屏幕等功能进行总结**\n\n","source":"_posts/PWA实践-serviceWorker生命周期、请求代理与通信.md","raw":"---\ntitle: '[PWA实践]serviceWorker生命周期、请求代理与通信'\ndate: 2018-02-11 15:05:43\ntags:\n    - PWA\n---\n\n本文主要讲 serviceWorker 生命周期和挂载、卸载等问题，适合对 serviceWorker 的作用有所了解但是具体细节不是特别清楚的读者\n\n**以下所有分析基于 Chrome V63**\n\n### serviceWorker的挂载\n\n先来一段代码感受serviceWorker注册:\n\n```\nif ('serviceWorker' in navigator) {\n      window.addEventListener('load', function () {\n          navigator.serviceWorker.register('/sw.js', {scope: '/'})\n              .then(function (registration) {\n                  // 注册成功\n                  console.log('ServiceWorker registration successful with scope: ', registration.scope);\n              })\n              .catch(function (err) {\n                  // 注册失败:(\n                  console.log('ServiceWorker registration failed: ', err);\n              });\n      });\n}\n```\n通过上述代码，我们定义在`/sw.js`里的内容就会生效(对于当前页面之前没有 serviceWorker 的情况而言，我们注册的 serviceWorker 肯定会生效，如果当前页面已经有了我们之前注册的 serviceWorker，这个时候涉及到 serviceWorker的更新机制，下文详述)\n\n如果我们在`sw.js`没有变化的情况下刷新这个页面，每次还是会有注册成功的回调以及相应的log输出，但是这个时候浏览器发现我们的 serviceWorker 并没有发生变化，并不会重置一遍 serviceWorker\n\n### serviceWorker更新\n\n我们如果想更新一个 serviceWorker，根据我们的一般web开发策略，可能会想到以下几种策略：\n\n* 仅变更文件名(比如把`sw.js`变成`sw-v2.js`或者加一个hash)\n* 仅变更文件内容(仅仅更新`sw.js`的内容，文件名不变)\n* 同时变更：同时执行以上两条\n\n在这里，我可以很负责的告诉你，**变更serviceWorker文件名绝对不是一个好的实践**，浏览器判断 serviceWorker 是否相同基本和文件名没有关系，甚至有可能还会造成浏览器抛出404异常(因为找不到原来的文件名对应的文件了)。\n\n所以我们只需要变更内容即可，实际上，我们每次打开或者刷新该页面，浏览器都会重新请求一遍 serviceWorker 的定义文件，如果发现文件内容和之前的不同了，这个时候:\n\n(*下文中，我们使用“有关 tab”来表示受 serviceWorker 控制的页面*，刷新均指普通刷新(F5/CommandR)并不指Hard Reload)\n\n* 这个新的 serviceWorker 就会进入到一个 “waiting to activate” 的状态，并且只要我们不关闭这个网站的所有tab(更准确地说，是这个 serviceWorker 控制的所有页面)，新的 serviceWorker 始终不会进入替换原有的进入到 running 状态(就算我们只打开了一个有关 tab，直接刷新也不会让新的替换旧的)。\n\n* 如果我们多次更新了 serviceWorker 并且没有关闭当前的 tab 页面，那么新的 serviceWorker 就会挤掉原先处于第二顺位(waiting to activate)的serviceWorker，变成`waiting to activate`状态\n\n也就是说，我们只有关闭当前旧的 serviceWorker 控制的所有页面 的所有tab，之后浏览器才会把旧的 serviveWorker 移除掉，换成新的，再打开相应的页面就会使用新的了。\n\n当然，也有一个特殊情况：如果我们在新的 serviceWorker 使用了`self.skipWaiting();`，像这样：\n\n```\nself.addEventListener('install', function(event) {\n    self.skipWaiting();\n});\n```\n\n这个时候，要分为以下两种情况：\n\n* 如果当前我们只打开了一个有关 tab，这个时候，我们直接刷新，发现新的已经替换掉旧的了。\n* 如果我们当前打开了若干有关 tab，这个时候，无论我们刷新多少次，新的也不会替换掉旧的，只有我们一个一个关掉tab(或者跳转走)只剩下最后一个了，这个时候刷新，会让新的替换旧的(也就是上一种情况)\n\nChrome 的这种机制，防止了同一个页面先后被新旧两个不同的 serviceWorker 接管的情况出现。\n\n#### 手动更新\n\n虽然说，在页面每次进入的时候浏览器都会检查一遍 serviceWorker 是否更新，但如果我们想要手动更新 serviceWorker 也没有问题：\n\n```\nnavigator.serviceWorker.register(\"/sw.js\").then(reg => {\n  reg.update();\n  // 或者 一段时间之后更新\n});\n```\n\n这个时候如果 serviceWorker 变化了，那么会重新触发 install 执行一遍 install 的回调函数，如果没有变，就不会触发这个生命周期。\n\n#### install 生命周期钩子\n\n我们一般会在 sw.js 中，添加`install`的回调，一般在回调中，我们会进行缓存处理操作，像这样：\n\n```\nself.addEventListener('install', function(event) {\n    console.log('[sw2] serviceWorker Installed successfully', event)\n\n    event.waitUntil(\n        caches.open('mysite-static-v1').then(function(cache) {\n            return cache.addAll([\n                '/stylesheets/style.css',\n                '/javascripts/common.39c462651d449a73b5bb.js',\n            ]);\n        })\n    )\n}    \n```\n\n如果我们新打开一个页面，如果之前有 serviceWorker，那么会触发`install`，如果之前没有， 那么在 serviceWorker 装载后会触发 `install`。\n\n如果我们刷新页面，serviceWorker 和之前没有变化或者 serviceWorker 已经处在 `waiting to activate`，不会触发`install`，如果有变化，会触发`install`，但不会接管页面(上文中提到)。\n\n#### activate 生命周期钩子\n\nactivate 在什么时候被触发呢？\n\n如果当前页面没有 serviceworker ，那么会在 install 之后触发。\n\n如果当前页面有 serviceWorker，并且有 serviceWorker更新，新的 serviceWorker 只会触发 install ，不会触发 activate\n\n换句话说，当前变成 active 的 serviceWorker 才会被触发这个生命周期钩子\n\n\n### serviceWorker 代理请求\n\nserviceWorker 代理请求相对来说比较好理解，以下是一个很简单的例子：\n\n```\nself.addEventListener('install', function(event) {\n    console.log('[sw2] serviceWorker Installed successfully', event)\n\n    event.waitUntil(\n        caches.open('mysite-static-v1').then(function(cache) {\n            return cache.addAll([\n                '/stylesheets/style.css',\n                '/javascripts/common.39c462651d449a73b5bb.js',\n            ]);\n        })\n    );\n});\n\nself.addEventListener('fetch', function(event) {\n    console.log('Handling fetch event for', event.request.url);\n    // console.log('[sw2]fetch but do nothing')\n\n    event.respondWith(\n        // caches.match() will look for a cache entry in all of the caches available to the service worker.\n        // It's an alternative to first opening a specific named cache and then matching on that.\n        caches.match(event.request).then(function(response) {\n            if (response) {\n                console.log('Found response in cache:', response);\n\n                return response;\n            }\n\n            console.log('No response found in cache. About to fetch from network...');\n\n            // event.request will always have the proper mode set ('cors, 'no-cors', etc.) so we don't\n            // have to hardcode 'no-cors' like we do when fetch()ing in the install handler.\n            return fetch(event.request).then(function(response) {\n                console.log('Response from network is:', response);\n\n                return response;\n            }).catch(function(error) {\n                // This catch() will handle exceptions thrown from the fetch() operation.\n                // Note that a HTTP error response (e.g. 404) will NOT trigger an exception.\n                // It will return a normal response object that has the appropriate error code set.\n                console.error('Fetching failed:', error);\n\n                throw error;\n            });\n        })\n    );\n});\n```\n\n有两点要注意的：\n\n我们如果这样代理了，哪怕没有 cache 命中，实际上也会在控制台写from serviceWorker，而那些真正由serviceWorker发出的请求也会显示，有一个齿轮图标，如下图：\n\n![](https://www.10000h.top/images/sw_1.png)\n\n第二点就是我们如果在 fetch 的 listener 里面 do nothing， 也不会导致这个请求直接假死掉的。\n\n另外，通过上面的代码我们发现，实际上由于现在我们习惯给我们的文件资源加上 hash，所以我们基本上不可能手动输入需要缓存的文件列表，现在大多数情况下，我们都是借助 webpack 插件，完成这部分工作。\n\n### serviceWorker 和 页面之间的通信\n\nserviceWorker向页面发消息：\n\n```\nsw.js:\n\nself.clients.matchAll().then(clients => {\n    clients.forEach(client => {\n        console.log('%c [sw message]', 'color:#00aa00', client)\n        client.postMessage(\"This message is from serviceWorker\")\n    })\n})\n\n主页面:\n\nnavigator.serviceWorker.addEventListener('message', function (event) {\n    console.log('[Main] receive from serviceWorker:', event.data, event)\n});\n```\n\n当然，这里面是有坑的：\n\n* 主界面的事件监听需要等serviceWorker注册完毕后，所以一般`navigator.serviceWorker.register`的回调到来之后再进行注册(或者延迟足够的时间)。\n* 如果在主界面事件监听还没有注册成功的时候 serviceWorker 发送消息，自然是收不到的。如果我们把 serviceWorker 直接写在 install 的回调中，也是不能被正常收到的。\n\n从页面向 serviceWorker 发送消息：\n\n```\n主页面:\n\nnavigator.serviceWorker.controller && navigator.serviceWorker.controller.postMessage('hello serviceWorker');\n\nsw.js:\nself.addEventListener('message', function (event) {\n    console.log(\"[sw from main]\",event.data); // 输出：'sw.updatedone'\n});\n```\n\n同样的，这也要求主界面的代码需要等到serviceWorker注册完毕后触发，另外还有一点值得注意， serviceWorker 的事件绑定代码要求主界面的serviceWorker已经注册完毕后才可以。\n\n也就是说，如果当前页面没有该serviceWorker 第一次注册是不会收到主界面接收到的消息的。\n\n记住，只有当前已经在 active 的 serviceWorker， 才能和主页面收发消息等。\n\n**以上就是和 serviceWorker 有关的一些内容，在下一篇文章中，我会对PWA 添加至主屏幕等功能进行总结**\n\n","slug":"PWA实践-serviceWorker生命周期、请求代理与通信","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds0t001lgxy0v8nciigf","content":"<p>本文主要讲 serviceWorker 生命周期和挂载、卸载等问题，适合对 serviceWorker 的作用有所了解但是具体细节不是特别清楚的读者</p>\n<p><strong>以下所有分析基于 Chrome V63</strong></p>\n<h3 id=\"serviceWorker的挂载\"><a href=\"#serviceWorker的挂载\" class=\"headerlink\" title=\"serviceWorker的挂载\"></a>serviceWorker的挂载</h3><p>先来一段代码感受serviceWorker注册:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (&apos;serviceWorker&apos; in navigator) &#123;</span><br><span class=\"line\">      window.addEventListener(&apos;load&apos;, function () &#123;</span><br><span class=\"line\">          navigator.serviceWorker.register(&apos;/sw.js&apos;, &#123;scope: &apos;/&apos;&#125;)</span><br><span class=\"line\">              .then(function (registration) &#123;</span><br><span class=\"line\">                  // 注册成功</span><br><span class=\"line\">                  console.log(&apos;ServiceWorker registration successful with scope: &apos;, registration.scope);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">              .catch(function (err) &#123;</span><br><span class=\"line\">                  // 注册失败:(</span><br><span class=\"line\">                  console.log(&apos;ServiceWorker registration failed: &apos;, err);</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述代码，我们定义在<code>/sw.js</code>里的内容就会生效(对于当前页面之前没有 serviceWorker 的情况而言，我们注册的 serviceWorker 肯定会生效，如果当前页面已经有了我们之前注册的 serviceWorker，这个时候涉及到 serviceWorker的更新机制，下文详述)</p>\n<p>如果我们在<code>sw.js</code>没有变化的情况下刷新这个页面，每次还是会有注册成功的回调以及相应的log输出，但是这个时候浏览器发现我们的 serviceWorker 并没有发生变化，并不会重置一遍 serviceWorker</p>\n<h3 id=\"serviceWorker更新\"><a href=\"#serviceWorker更新\" class=\"headerlink\" title=\"serviceWorker更新\"></a>serviceWorker更新</h3><p>我们如果想更新一个 serviceWorker，根据我们的一般web开发策略，可能会想到以下几种策略：</p>\n<ul>\n<li>仅变更文件名(比如把<code>sw.js</code>变成<code>sw-v2.js</code>或者加一个hash)</li>\n<li>仅变更文件内容(仅仅更新<code>sw.js</code>的内容，文件名不变)</li>\n<li>同时变更：同时执行以上两条</li>\n</ul>\n<p>在这里，我可以很负责的告诉你，<strong>变更serviceWorker文件名绝对不是一个好的实践</strong>，浏览器判断 serviceWorker 是否相同基本和文件名没有关系，甚至有可能还会造成浏览器抛出404异常(因为找不到原来的文件名对应的文件了)。</p>\n<p>所以我们只需要变更内容即可，实际上，我们每次打开或者刷新该页面，浏览器都会重新请求一遍 serviceWorker 的定义文件，如果发现文件内容和之前的不同了，这个时候:</p>\n<p>(<em>下文中，我们使用“有关 tab”来表示受 serviceWorker 控制的页面</em>，刷新均指普通刷新(F5/CommandR)并不指Hard Reload)</p>\n<ul>\n<li><p>这个新的 serviceWorker 就会进入到一个 “waiting to activate” 的状态，并且只要我们不关闭这个网站的所有tab(更准确地说，是这个 serviceWorker 控制的所有页面)，新的 serviceWorker 始终不会进入替换原有的进入到 running 状态(就算我们只打开了一个有关 tab，直接刷新也不会让新的替换旧的)。</p>\n</li>\n<li><p>如果我们多次更新了 serviceWorker 并且没有关闭当前的 tab 页面，那么新的 serviceWorker 就会挤掉原先处于第二顺位(waiting to activate)的serviceWorker，变成<code>waiting to activate</code>状态</p>\n</li>\n</ul>\n<p>也就是说，我们只有关闭当前旧的 serviceWorker 控制的所有页面 的所有tab，之后浏览器才会把旧的 serviveWorker 移除掉，换成新的，再打开相应的页面就会使用新的了。</p>\n<p>当然，也有一个特殊情况：如果我们在新的 serviceWorker 使用了<code>self.skipWaiting();</code>，像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(&apos;install&apos;, function(event) &#123;</span><br><span class=\"line\">    self.skipWaiting();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个时候，要分为以下两种情况：</p>\n<ul>\n<li>如果当前我们只打开了一个有关 tab，这个时候，我们直接刷新，发现新的已经替换掉旧的了。</li>\n<li>如果我们当前打开了若干有关 tab，这个时候，无论我们刷新多少次，新的也不会替换掉旧的，只有我们一个一个关掉tab(或者跳转走)只剩下最后一个了，这个时候刷新，会让新的替换旧的(也就是上一种情况)</li>\n</ul>\n<p>Chrome 的这种机制，防止了同一个页面先后被新旧两个不同的 serviceWorker 接管的情况出现。</p>\n<h4 id=\"手动更新\"><a href=\"#手动更新\" class=\"headerlink\" title=\"手动更新\"></a>手动更新</h4><p>虽然说，在页面每次进入的时候浏览器都会检查一遍 serviceWorker 是否更新，但如果我们想要手动更新 serviceWorker 也没有问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.serviceWorker.register(&quot;/sw.js&quot;).then(reg =&gt; &#123;</span><br><span class=\"line\">  reg.update();</span><br><span class=\"line\">  // 或者 一段时间之后更新</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个时候如果 serviceWorker 变化了，那么会重新触发 install 执行一遍 install 的回调函数，如果没有变，就不会触发这个生命周期。</p>\n<h4 id=\"install-生命周期钩子\"><a href=\"#install-生命周期钩子\" class=\"headerlink\" title=\"install 生命周期钩子\"></a>install 生命周期钩子</h4><p>我们一般会在 sw.js 中，添加<code>install</code>的回调，一般在回调中，我们会进行缓存处理操作，像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(&apos;install&apos;, function(event) &#123;</span><br><span class=\"line\">    console.log(&apos;[sw2] serviceWorker Installed successfully&apos;, event)</span><br><span class=\"line\"></span><br><span class=\"line\">    event.waitUntil(</span><br><span class=\"line\">        caches.open(&apos;mysite-static-v1&apos;).then(function(cache) &#123;</span><br><span class=\"line\">            return cache.addAll([</span><br><span class=\"line\">                &apos;/stylesheets/style.css&apos;,</span><br><span class=\"line\">                &apos;/javascripts/common.39c462651d449a73b5bb.js&apos;,</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们新打开一个页面，如果之前有 serviceWorker，那么会触发<code>install</code>，如果之前没有， 那么在 serviceWorker 装载后会触发 <code>install</code>。</p>\n<p>如果我们刷新页面，serviceWorker 和之前没有变化或者 serviceWorker 已经处在 <code>waiting to activate</code>，不会触发<code>install</code>，如果有变化，会触发<code>install</code>，但不会接管页面(上文中提到)。</p>\n<h4 id=\"activate-生命周期钩子\"><a href=\"#activate-生命周期钩子\" class=\"headerlink\" title=\"activate 生命周期钩子\"></a>activate 生命周期钩子</h4><p>activate 在什么时候被触发呢？</p>\n<p>如果当前页面没有 serviceworker ，那么会在 install 之后触发。</p>\n<p>如果当前页面有 serviceWorker，并且有 serviceWorker更新，新的 serviceWorker 只会触发 install ，不会触发 activate</p>\n<p>换句话说，当前变成 active 的 serviceWorker 才会被触发这个生命周期钩子</p>\n<h3 id=\"serviceWorker-代理请求\"><a href=\"#serviceWorker-代理请求\" class=\"headerlink\" title=\"serviceWorker 代理请求\"></a>serviceWorker 代理请求</h3><p>serviceWorker 代理请求相对来说比较好理解，以下是一个很简单的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(&apos;install&apos;, function(event) &#123;</span><br><span class=\"line\">    console.log(&apos;[sw2] serviceWorker Installed successfully&apos;, event)</span><br><span class=\"line\"></span><br><span class=\"line\">    event.waitUntil(</span><br><span class=\"line\">        caches.open(&apos;mysite-static-v1&apos;).then(function(cache) &#123;</span><br><span class=\"line\">            return cache.addAll([</span><br><span class=\"line\">                &apos;/stylesheets/style.css&apos;,</span><br><span class=\"line\">                &apos;/javascripts/common.39c462651d449a73b5bb.js&apos;,</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">self.addEventListener(&apos;fetch&apos;, function(event) &#123;</span><br><span class=\"line\">    console.log(&apos;Handling fetch event for&apos;, event.request.url);</span><br><span class=\"line\">    // console.log(&apos;[sw2]fetch but do nothing&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    event.respondWith(</span><br><span class=\"line\">        // caches.match() will look for a cache entry in all of the caches available to the service worker.</span><br><span class=\"line\">        // It&apos;s an alternative to first opening a specific named cache and then matching on that.</span><br><span class=\"line\">        caches.match(event.request).then(function(response) &#123;</span><br><span class=\"line\">            if (response) &#123;</span><br><span class=\"line\">                console.log(&apos;Found response in cache:&apos;, response);</span><br><span class=\"line\"></span><br><span class=\"line\">                return response;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(&apos;No response found in cache. About to fetch from network...&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // event.request will always have the proper mode set (&apos;cors, &apos;no-cors&apos;, etc.) so we don&apos;t</span><br><span class=\"line\">            // have to hardcode &apos;no-cors&apos; like we do when fetch()ing in the install handler.</span><br><span class=\"line\">            return fetch(event.request).then(function(response) &#123;</span><br><span class=\"line\">                console.log(&apos;Response from network is:&apos;, response);</span><br><span class=\"line\"></span><br><span class=\"line\">                return response;</span><br><span class=\"line\">            &#125;).catch(function(error) &#123;</span><br><span class=\"line\">                // This catch() will handle exceptions thrown from the fetch() operation.</span><br><span class=\"line\">                // Note that a HTTP error response (e.g. 404) will NOT trigger an exception.</span><br><span class=\"line\">                // It will return a normal response object that has the appropriate error code set.</span><br><span class=\"line\">                console.error(&apos;Fetching failed:&apos;, error);</span><br><span class=\"line\"></span><br><span class=\"line\">                throw error;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有两点要注意的：</p>\n<p>我们如果这样代理了，哪怕没有 cache 命中，实际上也会在控制台写from serviceWorker，而那些真正由serviceWorker发出的请求也会显示，有一个齿轮图标，如下图：</p>\n<p><img src=\"https://www.10000h.top/images/sw_1.png\" alt=\"\"></p>\n<p>第二点就是我们如果在 fetch 的 listener 里面 do nothing， 也不会导致这个请求直接假死掉的。</p>\n<p>另外，通过上面的代码我们发现，实际上由于现在我们习惯给我们的文件资源加上 hash，所以我们基本上不可能手动输入需要缓存的文件列表，现在大多数情况下，我们都是借助 webpack 插件，完成这部分工作。</p>\n<h3 id=\"serviceWorker-和-页面之间的通信\"><a href=\"#serviceWorker-和-页面之间的通信\" class=\"headerlink\" title=\"serviceWorker 和 页面之间的通信\"></a>serviceWorker 和 页面之间的通信</h3><p>serviceWorker向页面发消息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sw.js:</span><br><span class=\"line\"></span><br><span class=\"line\">self.clients.matchAll().then(clients =&gt; &#123;</span><br><span class=\"line\">    clients.forEach(client =&gt; &#123;</span><br><span class=\"line\">        console.log(&apos;%c [sw message]&apos;, &apos;color:#00aa00&apos;, client)</span><br><span class=\"line\">        client.postMessage(&quot;This message is from serviceWorker&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">主页面:</span><br><span class=\"line\"></span><br><span class=\"line\">navigator.serviceWorker.addEventListener(&apos;message&apos;, function (event) &#123;</span><br><span class=\"line\">    console.log(&apos;[Main] receive from serviceWorker:&apos;, event.data, event)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当然，这里面是有坑的：</p>\n<ul>\n<li>主界面的事件监听需要等serviceWorker注册完毕后，所以一般<code>navigator.serviceWorker.register</code>的回调到来之后再进行注册(或者延迟足够的时间)。</li>\n<li>如果在主界面事件监听还没有注册成功的时候 serviceWorker 发送消息，自然是收不到的。如果我们把 serviceWorker 直接写在 install 的回调中，也是不能被正常收到的。</li>\n</ul>\n<p>从页面向 serviceWorker 发送消息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主页面:</span><br><span class=\"line\"></span><br><span class=\"line\">navigator.serviceWorker.controller &amp;&amp; navigator.serviceWorker.controller.postMessage(&apos;hello serviceWorker&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">sw.js:</span><br><span class=\"line\">self.addEventListener(&apos;message&apos;, function (event) &#123;</span><br><span class=\"line\">    console.log(&quot;[sw from main]&quot;,event.data); // 输出：&apos;sw.updatedone&apos;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>同样的，这也要求主界面的代码需要等到serviceWorker注册完毕后触发，另外还有一点值得注意， serviceWorker 的事件绑定代码要求主界面的serviceWorker已经注册完毕后才可以。</p>\n<p>也就是说，如果当前页面没有该serviceWorker 第一次注册是不会收到主界面接收到的消息的。</p>\n<p>记住，只有当前已经在 active 的 serviceWorker， 才能和主页面收发消息等。</p>\n<p><strong>以上就是和 serviceWorker 有关的一些内容，在下一篇文章中，我会对PWA 添加至主屏幕等功能进行总结</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要讲 serviceWorker 生命周期和挂载、卸载等问题，适合对 serviceWorker 的作用有所了解但是具体细节不是特别清楚的读者</p>\n<p><strong>以下所有分析基于 Chrome V63</strong></p>\n<h3 id=\"serviceWorker的挂载\"><a href=\"#serviceWorker的挂载\" class=\"headerlink\" title=\"serviceWorker的挂载\"></a>serviceWorker的挂载</h3><p>先来一段代码感受serviceWorker注册:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (&apos;serviceWorker&apos; in navigator) &#123;</span><br><span class=\"line\">      window.addEventListener(&apos;load&apos;, function () &#123;</span><br><span class=\"line\">          navigator.serviceWorker.register(&apos;/sw.js&apos;, &#123;scope: &apos;/&apos;&#125;)</span><br><span class=\"line\">              .then(function (registration) &#123;</span><br><span class=\"line\">                  // 注册成功</span><br><span class=\"line\">                  console.log(&apos;ServiceWorker registration successful with scope: &apos;, registration.scope);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">              .catch(function (err) &#123;</span><br><span class=\"line\">                  // 注册失败:(</span><br><span class=\"line\">                  console.log(&apos;ServiceWorker registration failed: &apos;, err);</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上述代码，我们定义在<code>/sw.js</code>里的内容就会生效(对于当前页面之前没有 serviceWorker 的情况而言，我们注册的 serviceWorker 肯定会生效，如果当前页面已经有了我们之前注册的 serviceWorker，这个时候涉及到 serviceWorker的更新机制，下文详述)</p>\n<p>如果我们在<code>sw.js</code>没有变化的情况下刷新这个页面，每次还是会有注册成功的回调以及相应的log输出，但是这个时候浏览器发现我们的 serviceWorker 并没有发生变化，并不会重置一遍 serviceWorker</p>\n<h3 id=\"serviceWorker更新\"><a href=\"#serviceWorker更新\" class=\"headerlink\" title=\"serviceWorker更新\"></a>serviceWorker更新</h3><p>我们如果想更新一个 serviceWorker，根据我们的一般web开发策略，可能会想到以下几种策略：</p>\n<ul>\n<li>仅变更文件名(比如把<code>sw.js</code>变成<code>sw-v2.js</code>或者加一个hash)</li>\n<li>仅变更文件内容(仅仅更新<code>sw.js</code>的内容，文件名不变)</li>\n<li>同时变更：同时执行以上两条</li>\n</ul>\n<p>在这里，我可以很负责的告诉你，<strong>变更serviceWorker文件名绝对不是一个好的实践</strong>，浏览器判断 serviceWorker 是否相同基本和文件名没有关系，甚至有可能还会造成浏览器抛出404异常(因为找不到原来的文件名对应的文件了)。</p>\n<p>所以我们只需要变更内容即可，实际上，我们每次打开或者刷新该页面，浏览器都会重新请求一遍 serviceWorker 的定义文件，如果发现文件内容和之前的不同了，这个时候:</p>\n<p>(<em>下文中，我们使用“有关 tab”来表示受 serviceWorker 控制的页面</em>，刷新均指普通刷新(F5/CommandR)并不指Hard Reload)</p>\n<ul>\n<li><p>这个新的 serviceWorker 就会进入到一个 “waiting to activate” 的状态，并且只要我们不关闭这个网站的所有tab(更准确地说，是这个 serviceWorker 控制的所有页面)，新的 serviceWorker 始终不会进入替换原有的进入到 running 状态(就算我们只打开了一个有关 tab，直接刷新也不会让新的替换旧的)。</p>\n</li>\n<li><p>如果我们多次更新了 serviceWorker 并且没有关闭当前的 tab 页面，那么新的 serviceWorker 就会挤掉原先处于第二顺位(waiting to activate)的serviceWorker，变成<code>waiting to activate</code>状态</p>\n</li>\n</ul>\n<p>也就是说，我们只有关闭当前旧的 serviceWorker 控制的所有页面 的所有tab，之后浏览器才会把旧的 serviveWorker 移除掉，换成新的，再打开相应的页面就会使用新的了。</p>\n<p>当然，也有一个特殊情况：如果我们在新的 serviceWorker 使用了<code>self.skipWaiting();</code>，像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(&apos;install&apos;, function(event) &#123;</span><br><span class=\"line\">    self.skipWaiting();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个时候，要分为以下两种情况：</p>\n<ul>\n<li>如果当前我们只打开了一个有关 tab，这个时候，我们直接刷新，发现新的已经替换掉旧的了。</li>\n<li>如果我们当前打开了若干有关 tab，这个时候，无论我们刷新多少次，新的也不会替换掉旧的，只有我们一个一个关掉tab(或者跳转走)只剩下最后一个了，这个时候刷新，会让新的替换旧的(也就是上一种情况)</li>\n</ul>\n<p>Chrome 的这种机制，防止了同一个页面先后被新旧两个不同的 serviceWorker 接管的情况出现。</p>\n<h4 id=\"手动更新\"><a href=\"#手动更新\" class=\"headerlink\" title=\"手动更新\"></a>手动更新</h4><p>虽然说，在页面每次进入的时候浏览器都会检查一遍 serviceWorker 是否更新，但如果我们想要手动更新 serviceWorker 也没有问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.serviceWorker.register(&quot;/sw.js&quot;).then(reg =&gt; &#123;</span><br><span class=\"line\">  reg.update();</span><br><span class=\"line\">  // 或者 一段时间之后更新</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个时候如果 serviceWorker 变化了，那么会重新触发 install 执行一遍 install 的回调函数，如果没有变，就不会触发这个生命周期。</p>\n<h4 id=\"install-生命周期钩子\"><a href=\"#install-生命周期钩子\" class=\"headerlink\" title=\"install 生命周期钩子\"></a>install 生命周期钩子</h4><p>我们一般会在 sw.js 中，添加<code>install</code>的回调，一般在回调中，我们会进行缓存处理操作，像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(&apos;install&apos;, function(event) &#123;</span><br><span class=\"line\">    console.log(&apos;[sw2] serviceWorker Installed successfully&apos;, event)</span><br><span class=\"line\"></span><br><span class=\"line\">    event.waitUntil(</span><br><span class=\"line\">        caches.open(&apos;mysite-static-v1&apos;).then(function(cache) &#123;</span><br><span class=\"line\">            return cache.addAll([</span><br><span class=\"line\">                &apos;/stylesheets/style.css&apos;,</span><br><span class=\"line\">                &apos;/javascripts/common.39c462651d449a73b5bb.js&apos;,</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们新打开一个页面，如果之前有 serviceWorker，那么会触发<code>install</code>，如果之前没有， 那么在 serviceWorker 装载后会触发 <code>install</code>。</p>\n<p>如果我们刷新页面，serviceWorker 和之前没有变化或者 serviceWorker 已经处在 <code>waiting to activate</code>，不会触发<code>install</code>，如果有变化，会触发<code>install</code>，但不会接管页面(上文中提到)。</p>\n<h4 id=\"activate-生命周期钩子\"><a href=\"#activate-生命周期钩子\" class=\"headerlink\" title=\"activate 生命周期钩子\"></a>activate 生命周期钩子</h4><p>activate 在什么时候被触发呢？</p>\n<p>如果当前页面没有 serviceworker ，那么会在 install 之后触发。</p>\n<p>如果当前页面有 serviceWorker，并且有 serviceWorker更新，新的 serviceWorker 只会触发 install ，不会触发 activate</p>\n<p>换句话说，当前变成 active 的 serviceWorker 才会被触发这个生命周期钩子</p>\n<h3 id=\"serviceWorker-代理请求\"><a href=\"#serviceWorker-代理请求\" class=\"headerlink\" title=\"serviceWorker 代理请求\"></a>serviceWorker 代理请求</h3><p>serviceWorker 代理请求相对来说比较好理解，以下是一个很简单的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(&apos;install&apos;, function(event) &#123;</span><br><span class=\"line\">    console.log(&apos;[sw2] serviceWorker Installed successfully&apos;, event)</span><br><span class=\"line\"></span><br><span class=\"line\">    event.waitUntil(</span><br><span class=\"line\">        caches.open(&apos;mysite-static-v1&apos;).then(function(cache) &#123;</span><br><span class=\"line\">            return cache.addAll([</span><br><span class=\"line\">                &apos;/stylesheets/style.css&apos;,</span><br><span class=\"line\">                &apos;/javascripts/common.39c462651d449a73b5bb.js&apos;,</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">self.addEventListener(&apos;fetch&apos;, function(event) &#123;</span><br><span class=\"line\">    console.log(&apos;Handling fetch event for&apos;, event.request.url);</span><br><span class=\"line\">    // console.log(&apos;[sw2]fetch but do nothing&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    event.respondWith(</span><br><span class=\"line\">        // caches.match() will look for a cache entry in all of the caches available to the service worker.</span><br><span class=\"line\">        // It&apos;s an alternative to first opening a specific named cache and then matching on that.</span><br><span class=\"line\">        caches.match(event.request).then(function(response) &#123;</span><br><span class=\"line\">            if (response) &#123;</span><br><span class=\"line\">                console.log(&apos;Found response in cache:&apos;, response);</span><br><span class=\"line\"></span><br><span class=\"line\">                return response;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(&apos;No response found in cache. About to fetch from network...&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // event.request will always have the proper mode set (&apos;cors, &apos;no-cors&apos;, etc.) so we don&apos;t</span><br><span class=\"line\">            // have to hardcode &apos;no-cors&apos; like we do when fetch()ing in the install handler.</span><br><span class=\"line\">            return fetch(event.request).then(function(response) &#123;</span><br><span class=\"line\">                console.log(&apos;Response from network is:&apos;, response);</span><br><span class=\"line\"></span><br><span class=\"line\">                return response;</span><br><span class=\"line\">            &#125;).catch(function(error) &#123;</span><br><span class=\"line\">                // This catch() will handle exceptions thrown from the fetch() operation.</span><br><span class=\"line\">                // Note that a HTTP error response (e.g. 404) will NOT trigger an exception.</span><br><span class=\"line\">                // It will return a normal response object that has the appropriate error code set.</span><br><span class=\"line\">                console.error(&apos;Fetching failed:&apos;, error);</span><br><span class=\"line\"></span><br><span class=\"line\">                throw error;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>有两点要注意的：</p>\n<p>我们如果这样代理了，哪怕没有 cache 命中，实际上也会在控制台写from serviceWorker，而那些真正由serviceWorker发出的请求也会显示，有一个齿轮图标，如下图：</p>\n<p><img src=\"https://www.10000h.top/images/sw_1.png\" alt=\"\"></p>\n<p>第二点就是我们如果在 fetch 的 listener 里面 do nothing， 也不会导致这个请求直接假死掉的。</p>\n<p>另外，通过上面的代码我们发现，实际上由于现在我们习惯给我们的文件资源加上 hash，所以我们基本上不可能手动输入需要缓存的文件列表，现在大多数情况下，我们都是借助 webpack 插件，完成这部分工作。</p>\n<h3 id=\"serviceWorker-和-页面之间的通信\"><a href=\"#serviceWorker-和-页面之间的通信\" class=\"headerlink\" title=\"serviceWorker 和 页面之间的通信\"></a>serviceWorker 和 页面之间的通信</h3><p>serviceWorker向页面发消息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sw.js:</span><br><span class=\"line\"></span><br><span class=\"line\">self.clients.matchAll().then(clients =&gt; &#123;</span><br><span class=\"line\">    clients.forEach(client =&gt; &#123;</span><br><span class=\"line\">        console.log(&apos;%c [sw message]&apos;, &apos;color:#00aa00&apos;, client)</span><br><span class=\"line\">        client.postMessage(&quot;This message is from serviceWorker&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">主页面:</span><br><span class=\"line\"></span><br><span class=\"line\">navigator.serviceWorker.addEventListener(&apos;message&apos;, function (event) &#123;</span><br><span class=\"line\">    console.log(&apos;[Main] receive from serviceWorker:&apos;, event.data, event)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当然，这里面是有坑的：</p>\n<ul>\n<li>主界面的事件监听需要等serviceWorker注册完毕后，所以一般<code>navigator.serviceWorker.register</code>的回调到来之后再进行注册(或者延迟足够的时间)。</li>\n<li>如果在主界面事件监听还没有注册成功的时候 serviceWorker 发送消息，自然是收不到的。如果我们把 serviceWorker 直接写在 install 的回调中，也是不能被正常收到的。</li>\n</ul>\n<p>从页面向 serviceWorker 发送消息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主页面:</span><br><span class=\"line\"></span><br><span class=\"line\">navigator.serviceWorker.controller &amp;&amp; navigator.serviceWorker.controller.postMessage(&apos;hello serviceWorker&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">sw.js:</span><br><span class=\"line\">self.addEventListener(&apos;message&apos;, function (event) &#123;</span><br><span class=\"line\">    console.log(&quot;[sw from main]&quot;,event.data); // 输出：&apos;sw.updatedone&apos;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>同样的，这也要求主界面的代码需要等到serviceWorker注册完毕后触发，另外还有一点值得注意， serviceWorker 的事件绑定代码要求主界面的serviceWorker已经注册完毕后才可以。</p>\n<p>也就是说，如果当前页面没有该serviceWorker 第一次注册是不会收到主界面接收到的消息的。</p>\n<p>记住，只有当前已经在 active 的 serviceWorker， 才能和主页面收发消息等。</p>\n<p><strong>以上就是和 serviceWorker 有关的一些内容，在下一篇文章中，我会对PWA 添加至主屏幕等功能进行总结</strong></p>\n"},{"layout":"阿里云服务器ecs","title":"centOS7.2搭建nginx环境以及负载均衡","date":"2016-08-03T12:16:24.000Z","_content":" 之所以要整理出这篇文章，是因为1是搭建环境的过程中会遇到大大小小各种问题，2是网上目前也没有关于centos7.2搭建nginx环境的问题整理，因此在这里记录。\n\n前置工作就不赘述了，首先`ssh root@115.29.102.81` (换成你们自己的公网IP)登陆进入到自己的服务器命令行，之后开始基本的安装：\n\n**1.添加资源**\n\n添加CentOS 7 Nginx yum资源库,打开终端,使用以下命令(没有换行):\n\n```\nsudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n\n```\n\n**2.安装Nginx**\n\n在你的CentOS 7 服务器中使用yum命令从Nginx源服务器中获取来安装Nginx：\n>*这里有一个需要注意的地方，尽量不要用网上的下载源码包然后再传到服务器上的方式进行安装，因为nginx已经不算是简单的Linux了，做了很多扩展，这个时候如果你用源码包安装会出现各种各样的问题，尽量用已经封装好的rpm\\yum进行安装*\n```\nsudo yum install -y nginx\n```\nNginx将完成安装在你的CentOS 7 服务器中。\n\n**3.启动Nginx**\n\n刚安装的Nginx不会自行启动。运行Nginx:\n```\nsudo systemctl start nginx.service\n```\n如果一切进展顺利的话，现在你可以通过你的域名或IP来访问你的Web页面来预览一下Nginx的默认页面\n\n>当然，这里一般很可能会无法访问的。\n\n我们先不急于解决我们的问题，先看看nginx的基本配置：\n\n\nNginx配置信息\n```\n网站文件存放默认目录\n\n/usr/share/nginx/html\n网站默认站点配置\n\n/etc/nginx/conf.d/default.conf\n自定义Nginx站点配置文件存放目录,自己在这里也可以定义别的名字的.conf，这个的作用以后再说。\n\n/etc/nginx/conf.d/\nNginx全局配置\n\n/etc/nginx/nginx.conf\n在这里你可以改变设置用户运行Nginx守护程序进程一样,和工作进程的数量得到了Nginx正在运行,等等。\n```\nLinux查看公网IP\n\n您可以运行以下命令来显示你的服务器的公共IP地址:(这个其实没用，不是公网IP)\n```\nip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\\/.*$//'\n```\n___\n好了，这个时候我们再来看看可能遇到的问题：无法在公网访问。\n\n这个时候首先看看配置文件default.conf对不对，一个正确的例子：\n(域名要先进行解析到响应的IP)\n```\nserver {\n    listen       80;\n    server_name  nginx.310058.cn;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/log/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n\n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n```\n\n确定文件没问题了，看看这个时候是不是开启了nginx进程：\n\n```\n ps -ef | grep nginx\n```\n\n应该会输出一个或者多个进程，如果没有的话就开启或者重启试试看。\n\n这个时候接下来再试试在服务器上：\n```\nping  115.29.102.81\ntelnet 115.29.102.81 80\nwget nginx.310058.cn\n```\n如果有的命令没有就直接yum安装下:\n```\nyum -y install telnet\n```\n如果都可以的话，之后在本机尝试以上三行。如果没有命令也要安装下：\n```\nbrew install wget\n```\n\n发现很可能本机telnet不通，而服务器telnet通。\n这个时候就是**防火墙**的问题。\n\n####centos7.2防火墙\n\n由于centos 7版本以后默认使用firewalld后，网上关于iptables的设置方法已经不管用了，所以根本就别想用配置iptables做啥，根本没用。\n\n查看下防火墙状态：\n```\n[root@iZ28dcsp7egZ conf.d]# systemctl status firewalld  \n● firewalld.service - firewalld - dynamic firewall daemon\n   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2016-08-03 12:06:44 CST; 2h 49min ago\n Main PID: 424 (firewalld)\n   CGroup: /system.slice/firewalld.service\n           └─424 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid\n\nAug 03 12:06:41 iZ28dcsp7egZ systemd[1]: Starting firewalld - dynamic firewall daemon...\nAug 03 12:06:44 iZ28dcsp7egZ systemd[1]: Started firewalld - dynamic firewall daemon.\n```\n\n增加80端口的权限：\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent  \n```\n \n 别忘了更新防火墙的配置：\n```\nfirewall-cmd --reload\n```\n这个时候再`restart  nginx.service` 一下就会发现应该好了。\n\n\nnginx 停止：\n\n```\nservice nginx restart\n也可以重启nginx\n\nkill -QUIT 进程号  \n#从容停止\n\nkill -TERM 进程号\n#或者\nkill -INT 进程号\n#快速停止\n\np-kill -9 nginx\n强制停止\n\nnginx -t \n#验证配置文件 前提是进入相应的配置的目录（自己实际测试的时候发现没有进入相应的配置目录也是可以的）\n\nnginx -s reload\n#重启\n\nkill -HUP 进程号\n#重启的另外一种方式\n```\n\n官方文档地址：\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#sec-Introduction_to_firewalld\n\n附1:一个简单的负载均衡的实现:\nweight默认是1，自己也可以更改。\n```\nupstream mypro {\n\t\t\t\tip_hash;\n                server 111.13.100.92 weight=2;\n                server 183.232.41.1;\n                server 42.156.140.7;\n                }\n\n        server {\n                listen 8090;\n                location / {\n                proxy_pass http://mypro;\n                }\n        }\n\n```\n\n\n附2:防火墙基本学习：\n\n``` \n\n1、firewalld简介\nfirewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念\n \nfirewalld有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍\n \nfirewalld的字符界面管理工具是 firewall-cmd \n \nfirewalld默认配置文件有两个：/usr/lib/firewalld/ （系统配置，尽量不要修改）和 /etc/firewalld/ （用户配置地址）\n \nzone概念：\n硬件防火墙默认一般有三个区，firewalld引入这一概念系统默认存在以下区域（根据文档自己理解，如果有误请指正）：\ndrop：默认丢弃所有包\nblock：拒绝所有外部连接，允许内部发起的连接\npublic：指定外部连接可以进入\nexternal：这个不太明白，功能上和上面相同，允许指定的外部连接\ndmz：和硬件防火墙一样，受限制的公共连接可以进入\nwork：工作区，概念和workgoup一样，也是指定的外部连接允许\nhome：类似家庭组\ninternal：信任所有连接\n对防火墙不算太熟悉，还没想明白public、external、dmz、work、home从功能上都需要自定义允许连接，具体使用上的区别还需高人指点\n \n2、安装firewalld\nroot执行 # yum install firewalld firewall-config\n \n3、运行、停止、禁用firewalld\n启动：# systemctl start  firewalld\n查看状态：# systemctl status firewalld 或者 firewall-cmd --state\n停止：# systemctl disable firewalld\n禁用：# systemctl stop firewalld\n \n4、配置firewalld\n查看版本：$ firewall-cmd --version\n查看帮助：$ firewall-cmd --help\n查看设置：\n                显示状态：$ firewall-cmd --state\n                查看区域信息: $ firewall-cmd --get-active-zones\n                查看指定接口所属区域：$ firewall-cmd --get-zone-of-interface=eth0\n拒绝所有包：# firewall-cmd --panic-on\n取消拒绝状态：# firewall-cmd --panic-off\n查看是否拒绝：$ firewall-cmd --query-panic\n \n更新防火墙规则：# firewall-cmd --reload\n                            # firewall-cmd --complete-reload\n    两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务\n \n将接口添加到区域，默认接口都在public\n# firewall-cmd --zone=public --add-interface=eth0\n永久生效再加上 --permanent 然后reload防火墙\n \n设置默认接口区域\n# firewall-cmd --set-default-zone=public\n立即生效无需重启\n \n打开端口（貌似这个才最常用）\n查看所有打开的端口：\n# firewall-cmd --zone=dmz --list-ports\n加入一个端口到区域：\n# firewall-cmd --zone=dmz --add-port=8080/tcp\n若要永久生效方法同上\n \n打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档\n# firewall-cmd --zone=work --add-service=smtp\n \n移除服务\n# firewall-cmd --zone=work --remove-service=smtp\n \n还有端口转发功能、自定义复杂规则功能、lockdown，由于还没用到，以后再学习\n\n```\n","source":"_posts/centOS7-2搭建nginx环境以及负载均衡.md","raw":"---\nlayout: 阿里云服务器ecs\ntitle: centOS7.2搭建nginx环境以及负载均衡\ndate: 2016-08-03 21:16:24\ntags:\n    - centOS\n    - nginx\n---\n 之所以要整理出这篇文章，是因为1是搭建环境的过程中会遇到大大小小各种问题，2是网上目前也没有关于centos7.2搭建nginx环境的问题整理，因此在这里记录。\n\n前置工作就不赘述了，首先`ssh root@115.29.102.81` (换成你们自己的公网IP)登陆进入到自己的服务器命令行，之后开始基本的安装：\n\n**1.添加资源**\n\n添加CentOS 7 Nginx yum资源库,打开终端,使用以下命令(没有换行):\n\n```\nsudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n\n```\n\n**2.安装Nginx**\n\n在你的CentOS 7 服务器中使用yum命令从Nginx源服务器中获取来安装Nginx：\n>*这里有一个需要注意的地方，尽量不要用网上的下载源码包然后再传到服务器上的方式进行安装，因为nginx已经不算是简单的Linux了，做了很多扩展，这个时候如果你用源码包安装会出现各种各样的问题，尽量用已经封装好的rpm\\yum进行安装*\n```\nsudo yum install -y nginx\n```\nNginx将完成安装在你的CentOS 7 服务器中。\n\n**3.启动Nginx**\n\n刚安装的Nginx不会自行启动。运行Nginx:\n```\nsudo systemctl start nginx.service\n```\n如果一切进展顺利的话，现在你可以通过你的域名或IP来访问你的Web页面来预览一下Nginx的默认页面\n\n>当然，这里一般很可能会无法访问的。\n\n我们先不急于解决我们的问题，先看看nginx的基本配置：\n\n\nNginx配置信息\n```\n网站文件存放默认目录\n\n/usr/share/nginx/html\n网站默认站点配置\n\n/etc/nginx/conf.d/default.conf\n自定义Nginx站点配置文件存放目录,自己在这里也可以定义别的名字的.conf，这个的作用以后再说。\n\n/etc/nginx/conf.d/\nNginx全局配置\n\n/etc/nginx/nginx.conf\n在这里你可以改变设置用户运行Nginx守护程序进程一样,和工作进程的数量得到了Nginx正在运行,等等。\n```\nLinux查看公网IP\n\n您可以运行以下命令来显示你的服务器的公共IP地址:(这个其实没用，不是公网IP)\n```\nip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\\/.*$//'\n```\n___\n好了，这个时候我们再来看看可能遇到的问题：无法在公网访问。\n\n这个时候首先看看配置文件default.conf对不对，一个正确的例子：\n(域名要先进行解析到响应的IP)\n```\nserver {\n    listen       80;\n    server_name  nginx.310058.cn;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/log/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    #location ~ \\.php$ {\n    #    root           html;\n    #    fastcgi_pass   127.0.0.1:9000;\n    #    fastcgi_index  index.php;\n    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n    #    include        fastcgi_params;\n    #}\n\n    # deny access to .htaccess files, if Apache's document root\n    # concurs with nginx's one\n    #\n    #location ~ /\\.ht {\n    #    deny  all;\n    #}\n}\n```\n\n确定文件没问题了，看看这个时候是不是开启了nginx进程：\n\n```\n ps -ef | grep nginx\n```\n\n应该会输出一个或者多个进程，如果没有的话就开启或者重启试试看。\n\n这个时候接下来再试试在服务器上：\n```\nping  115.29.102.81\ntelnet 115.29.102.81 80\nwget nginx.310058.cn\n```\n如果有的命令没有就直接yum安装下:\n```\nyum -y install telnet\n```\n如果都可以的话，之后在本机尝试以上三行。如果没有命令也要安装下：\n```\nbrew install wget\n```\n\n发现很可能本机telnet不通，而服务器telnet通。\n这个时候就是**防火墙**的问题。\n\n####centos7.2防火墙\n\n由于centos 7版本以后默认使用firewalld后，网上关于iptables的设置方法已经不管用了，所以根本就别想用配置iptables做啥，根本没用。\n\n查看下防火墙状态：\n```\n[root@iZ28dcsp7egZ conf.d]# systemctl status firewalld  \n● firewalld.service - firewalld - dynamic firewall daemon\n   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)\n   Active: active (running) since Wed 2016-08-03 12:06:44 CST; 2h 49min ago\n Main PID: 424 (firewalld)\n   CGroup: /system.slice/firewalld.service\n           └─424 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid\n\nAug 03 12:06:41 iZ28dcsp7egZ systemd[1]: Starting firewalld - dynamic firewall daemon...\nAug 03 12:06:44 iZ28dcsp7egZ systemd[1]: Started firewalld - dynamic firewall daemon.\n```\n\n增加80端口的权限：\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent  \n```\n \n 别忘了更新防火墙的配置：\n```\nfirewall-cmd --reload\n```\n这个时候再`restart  nginx.service` 一下就会发现应该好了。\n\n\nnginx 停止：\n\n```\nservice nginx restart\n也可以重启nginx\n\nkill -QUIT 进程号  \n#从容停止\n\nkill -TERM 进程号\n#或者\nkill -INT 进程号\n#快速停止\n\np-kill -9 nginx\n强制停止\n\nnginx -t \n#验证配置文件 前提是进入相应的配置的目录（自己实际测试的时候发现没有进入相应的配置目录也是可以的）\n\nnginx -s reload\n#重启\n\nkill -HUP 进程号\n#重启的另外一种方式\n```\n\n官方文档地址：\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#sec-Introduction_to_firewalld\n\n附1:一个简单的负载均衡的实现:\nweight默认是1，自己也可以更改。\n```\nupstream mypro {\n\t\t\t\tip_hash;\n                server 111.13.100.92 weight=2;\n                server 183.232.41.1;\n                server 42.156.140.7;\n                }\n\n        server {\n                listen 8090;\n                location / {\n                proxy_pass http://mypro;\n                }\n        }\n\n```\n\n\n附2:防火墙基本学习：\n\n``` \n\n1、firewalld简介\nfirewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念\n \nfirewalld有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍\n \nfirewalld的字符界面管理工具是 firewall-cmd \n \nfirewalld默认配置文件有两个：/usr/lib/firewalld/ （系统配置，尽量不要修改）和 /etc/firewalld/ （用户配置地址）\n \nzone概念：\n硬件防火墙默认一般有三个区，firewalld引入这一概念系统默认存在以下区域（根据文档自己理解，如果有误请指正）：\ndrop：默认丢弃所有包\nblock：拒绝所有外部连接，允许内部发起的连接\npublic：指定外部连接可以进入\nexternal：这个不太明白，功能上和上面相同，允许指定的外部连接\ndmz：和硬件防火墙一样，受限制的公共连接可以进入\nwork：工作区，概念和workgoup一样，也是指定的外部连接允许\nhome：类似家庭组\ninternal：信任所有连接\n对防火墙不算太熟悉，还没想明白public、external、dmz、work、home从功能上都需要自定义允许连接，具体使用上的区别还需高人指点\n \n2、安装firewalld\nroot执行 # yum install firewalld firewall-config\n \n3、运行、停止、禁用firewalld\n启动：# systemctl start  firewalld\n查看状态：# systemctl status firewalld 或者 firewall-cmd --state\n停止：# systemctl disable firewalld\n禁用：# systemctl stop firewalld\n \n4、配置firewalld\n查看版本：$ firewall-cmd --version\n查看帮助：$ firewall-cmd --help\n查看设置：\n                显示状态：$ firewall-cmd --state\n                查看区域信息: $ firewall-cmd --get-active-zones\n                查看指定接口所属区域：$ firewall-cmd --get-zone-of-interface=eth0\n拒绝所有包：# firewall-cmd --panic-on\n取消拒绝状态：# firewall-cmd --panic-off\n查看是否拒绝：$ firewall-cmd --query-panic\n \n更新防火墙规则：# firewall-cmd --reload\n                            # firewall-cmd --complete-reload\n    两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务\n \n将接口添加到区域，默认接口都在public\n# firewall-cmd --zone=public --add-interface=eth0\n永久生效再加上 --permanent 然后reload防火墙\n \n设置默认接口区域\n# firewall-cmd --set-default-zone=public\n立即生效无需重启\n \n打开端口（貌似这个才最常用）\n查看所有打开的端口：\n# firewall-cmd --zone=dmz --list-ports\n加入一个端口到区域：\n# firewall-cmd --zone=dmz --add-port=8080/tcp\n若要永久生效方法同上\n \n打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档\n# firewall-cmd --zone=work --add-service=smtp\n \n移除服务\n# firewall-cmd --zone=work --remove-service=smtp\n \n还有端口转发功能、自定义复杂规则功能、lockdown，由于还没用到，以后再学习\n\n```\n","slug":"centOS7-2搭建nginx环境以及负载均衡","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"photos":[],"link":"","_id":"cjtyzds0u001ngxy0mqdj8idw","content":"<p> 之所以要整理出这篇文章，是因为1是搭建环境的过程中会遇到大大小小各种问题，2是网上目前也没有关于centos7.2搭建nginx环境的问题整理，因此在这里记录。</p>\n<p>前置工作就不赘述了，首先<code>ssh root@115.29.102.81</code> (换成你们自己的公网IP)登陆进入到自己的服务器命令行，之后开始基本的安装：</p>\n<p><strong>1.添加资源</strong></p>\n<p>添加CentOS 7 Nginx yum资源库,打开终端,使用以下命令(没有换行):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p><strong>2.安装Nginx</strong></p>\n<p>在你的CentOS 7 服务器中使用yum命令从Nginx源服务器中获取来安装Nginx：</p>\n<blockquote>\n<p><em>这里有一个需要注意的地方，尽量不要用网上的下载源码包然后再传到服务器上的方式进行安装，因为nginx已经不算是简单的Linux了，做了很多扩展，这个时候如果你用源码包安装会出现各种各样的问题，尽量用已经封装好的rpm\\yum进行安装</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y nginx</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Nginx将完成安装在你的CentOS 7 服务器中。</p>\n<p><strong>3.启动Nginx</strong></p>\n<p>刚安装的Nginx不会自行启动。运行Nginx:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx.service</span><br></pre></td></tr></table></figure></p>\n<p>如果一切进展顺利的话，现在你可以通过你的域名或IP来访问你的Web页面来预览一下Nginx的默认页面</p>\n<blockquote>\n<p>当然，这里一般很可能会无法访问的。</p>\n</blockquote>\n<p>我们先不急于解决我们的问题，先看看nginx的基本配置：</p>\n<p>Nginx配置信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网站文件存放默认目录</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/share/nginx/html</span><br><span class=\"line\">网站默认站点配置</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/conf.d/default.conf</span><br><span class=\"line\">自定义Nginx站点配置文件存放目录,自己在这里也可以定义别的名字的.conf，这个的作用以后再说。</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/conf.d/</span><br><span class=\"line\">Nginx全局配置</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/nginx.conf</span><br><span class=\"line\">在这里你可以改变设置用户运行Nginx守护程序进程一样,和工作进程的数量得到了Nginx正在运行,等等。</span><br></pre></td></tr></table></figure></p>\n<p>Linux查看公网IP</p>\n<p>您可以运行以下命令来显示你的服务器的公共IP地址:(这个其实没用，不是公网IP)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show eth0 | grep inet | awk &apos;&#123; print $2; &#125;&apos; | sed &apos;s/\\/.*$//&apos;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>好了，这个时候我们再来看看可能遇到的问题：无法在公网访问。</p>\n<p>这个时候首先看看配置文件default.conf对不对，一个正确的例子：<br>(域名要先进行解析到响应的IP)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  nginx.310058.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    root           html;</span><br><span class=\"line\">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    #    fastcgi_index  index.php;</span><br><span class=\"line\">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">    #    include        fastcgi_params;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">    # concurs with nginx&apos;s one</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ /\\.ht &#123;</span><br><span class=\"line\">    #    deny  all;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>确定文件没问题了，看看这个时候是不是开启了nginx进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n<p>应该会输出一个或者多个进程，如果没有的话就开启或者重启试试看。</p>\n<p>这个时候接下来再试试在服务器上：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping  115.29.102.81</span><br><span class=\"line\">telnet 115.29.102.81 80</span><br><span class=\"line\">wget nginx.310058.cn</span><br></pre></td></tr></table></figure></p>\n<p>如果有的命令没有就直接yum安装下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install telnet</span><br></pre></td></tr></table></figure></p>\n<p>如果都可以的话，之后在本机尝试以上三行。如果没有命令也要安装下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install wget</span><br></pre></td></tr></table></figure></p>\n<p>发现很可能本机telnet不通，而服务器telnet通。<br>这个时候就是<strong>防火墙</strong>的问题。</p>\n<p>####centos7.2防火墙</p>\n<p>由于centos 7版本以后默认使用firewalld后，网上关于iptables的设置方法已经不管用了，所以根本就别想用配置iptables做啥，根本没用。</p>\n<p>查看下防火墙状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ28dcsp7egZ conf.d]# systemctl status firewalld  </span><br><span class=\"line\">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2016-08-03 12:06:44 CST; 2h 49min ago</span><br><span class=\"line\"> Main PID: 424 (firewalld)</span><br><span class=\"line\">   CGroup: /system.slice/firewalld.service</span><br><span class=\"line\">           └─424 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class=\"line\"></span><br><span class=\"line\">Aug 03 12:06:41 iZ28dcsp7egZ systemd[1]: Starting firewalld - dynamic firewall daemon...</span><br><span class=\"line\">Aug 03 12:06:44 iZ28dcsp7egZ systemd[1]: Started firewalld - dynamic firewall daemon.</span><br></pre></td></tr></table></figure></p>\n<p>增加80端口的权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></p>\n<p> 别忘了更新防火墙的配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n<p>这个时候再<code>restart  nginx.service</code> 一下就会发现应该好了。</p>\n<p>nginx 停止：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br><span class=\"line\">也可以重启nginx</span><br><span class=\"line\"></span><br><span class=\"line\">kill -QUIT 进程号  </span><br><span class=\"line\">#从容停止</span><br><span class=\"line\"></span><br><span class=\"line\">kill -TERM 进程号</span><br><span class=\"line\">#或者</span><br><span class=\"line\">kill -INT 进程号</span><br><span class=\"line\">#快速停止</span><br><span class=\"line\"></span><br><span class=\"line\">p-kill -9 nginx</span><br><span class=\"line\">强制停止</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -t </span><br><span class=\"line\">#验证配置文件 前提是进入相应的配置的目录（自己实际测试的时候发现没有进入相应的配置目录也是可以的）</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\">#重启</span><br><span class=\"line\"></span><br><span class=\"line\">kill -HUP 进程号</span><br><span class=\"line\">#重启的另外一种方式</span><br></pre></td></tr></table></figure>\n<p>官方文档地址：<br><a href=\"https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#sec-Introduction_to_firewalld\" target=\"_blank\" rel=\"noopener\">https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#sec-Introduction_to_firewalld</a></p>\n<p>附1:一个简单的负载均衡的实现:<br>weight默认是1，自己也可以更改。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream mypro &#123;</span><br><span class=\"line\">\t\t\t\tip_hash;</span><br><span class=\"line\">                server 111.13.100.92 weight=2;</span><br><span class=\"line\">                server 183.232.41.1;</span><br><span class=\"line\">                server 42.156.140.7;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">                listen 8090;</span><br><span class=\"line\">                location / &#123;</span><br><span class=\"line\">                proxy_pass http://mypro;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>附2:防火墙基本学习：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1、firewalld简介</span><br><span class=\"line\">firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念</span><br><span class=\"line\"> </span><br><span class=\"line\">firewalld有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍</span><br><span class=\"line\"> </span><br><span class=\"line\">firewalld的字符界面管理工具是 firewall-cmd </span><br><span class=\"line\"> </span><br><span class=\"line\">firewalld默认配置文件有两个：/usr/lib/firewalld/ （系统配置，尽量不要修改）和 /etc/firewalld/ （用户配置地址）</span><br><span class=\"line\"> </span><br><span class=\"line\">zone概念：</span><br><span class=\"line\">硬件防火墙默认一般有三个区，firewalld引入这一概念系统默认存在以下区域（根据文档自己理解，如果有误请指正）：</span><br><span class=\"line\">drop：默认丢弃所有包</span><br><span class=\"line\">block：拒绝所有外部连接，允许内部发起的连接</span><br><span class=\"line\">public：指定外部连接可以进入</span><br><span class=\"line\">external：这个不太明白，功能上和上面相同，允许指定的外部连接</span><br><span class=\"line\">dmz：和硬件防火墙一样，受限制的公共连接可以进入</span><br><span class=\"line\">work：工作区，概念和workgoup一样，也是指定的外部连接允许</span><br><span class=\"line\">home：类似家庭组</span><br><span class=\"line\">internal：信任所有连接</span><br><span class=\"line\">对防火墙不算太熟悉，还没想明白public、external、dmz、work、home从功能上都需要自定义允许连接，具体使用上的区别还需高人指点</span><br><span class=\"line\"> </span><br><span class=\"line\">2、安装firewalld</span><br><span class=\"line\">root执行 # yum install firewalld firewall-config</span><br><span class=\"line\"> </span><br><span class=\"line\">3、运行、停止、禁用firewalld</span><br><span class=\"line\">启动：# systemctl start  firewalld</span><br><span class=\"line\">查看状态：# systemctl status firewalld 或者 firewall-cmd --state</span><br><span class=\"line\">停止：# systemctl disable firewalld</span><br><span class=\"line\">禁用：# systemctl stop firewalld</span><br><span class=\"line\"> </span><br><span class=\"line\">4、配置firewalld</span><br><span class=\"line\">查看版本：$ firewall-cmd --version</span><br><span class=\"line\">查看帮助：$ firewall-cmd --help</span><br><span class=\"line\">查看设置：</span><br><span class=\"line\">                显示状态：$ firewall-cmd --state</span><br><span class=\"line\">                查看区域信息: $ firewall-cmd --get-active-zones</span><br><span class=\"line\">                查看指定接口所属区域：$ firewall-cmd --get-zone-of-interface=eth0</span><br><span class=\"line\">拒绝所有包：# firewall-cmd --panic-on</span><br><span class=\"line\">取消拒绝状态：# firewall-cmd --panic-off</span><br><span class=\"line\">查看是否拒绝：$ firewall-cmd --query-panic</span><br><span class=\"line\"> </span><br><span class=\"line\">更新防火墙规则：# firewall-cmd --reload</span><br><span class=\"line\">                            # firewall-cmd --complete-reload</span><br><span class=\"line\">    两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务</span><br><span class=\"line\"> </span><br><span class=\"line\">将接口添加到区域，默认接口都在public</span><br><span class=\"line\"># firewall-cmd --zone=public --add-interface=eth0</span><br><span class=\"line\">永久生效再加上 --permanent 然后reload防火墙</span><br><span class=\"line\"> </span><br><span class=\"line\">设置默认接口区域</span><br><span class=\"line\"># firewall-cmd --set-default-zone=public</span><br><span class=\"line\">立即生效无需重启</span><br><span class=\"line\"> </span><br><span class=\"line\">打开端口（貌似这个才最常用）</span><br><span class=\"line\">查看所有打开的端口：</span><br><span class=\"line\"># firewall-cmd --zone=dmz --list-ports</span><br><span class=\"line\">加入一个端口到区域：</span><br><span class=\"line\"># firewall-cmd --zone=dmz --add-port=8080/tcp</span><br><span class=\"line\">若要永久生效方法同上</span><br><span class=\"line\"> </span><br><span class=\"line\">打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档</span><br><span class=\"line\"># firewall-cmd --zone=work --add-service=smtp</span><br><span class=\"line\"> </span><br><span class=\"line\">移除服务</span><br><span class=\"line\"># firewall-cmd --zone=work --remove-service=smtp</span><br><span class=\"line\"> </span><br><span class=\"line\">还有端口转发功能、自定义复杂规则功能、lockdown，由于还没用到，以后再学习</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p> 之所以要整理出这篇文章，是因为1是搭建环境的过程中会遇到大大小小各种问题，2是网上目前也没有关于centos7.2搭建nginx环境的问题整理，因此在这里记录。</p>\n<p>前置工作就不赘述了，首先<code>ssh root@115.29.102.81</code> (换成你们自己的公网IP)登陆进入到自己的服务器命令行，之后开始基本的安装：</p>\n<p><strong>1.添加资源</strong></p>\n<p>添加CentOS 7 Nginx yum资源库,打开终端,使用以下命令(没有换行):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p><strong>2.安装Nginx</strong></p>\n<p>在你的CentOS 7 服务器中使用yum命令从Nginx源服务器中获取来安装Nginx：</p>\n<blockquote>\n<p><em>这里有一个需要注意的地方，尽量不要用网上的下载源码包然后再传到服务器上的方式进行安装，因为nginx已经不算是简单的Linux了，做了很多扩展，这个时候如果你用源码包安装会出现各种各样的问题，尽量用已经封装好的rpm\\yum进行安装</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y nginx</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Nginx将完成安装在你的CentOS 7 服务器中。</p>\n<p><strong>3.启动Nginx</strong></p>\n<p>刚安装的Nginx不会自行启动。运行Nginx:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx.service</span><br></pre></td></tr></table></figure></p>\n<p>如果一切进展顺利的话，现在你可以通过你的域名或IP来访问你的Web页面来预览一下Nginx的默认页面</p>\n<blockquote>\n<p>当然，这里一般很可能会无法访问的。</p>\n</blockquote>\n<p>我们先不急于解决我们的问题，先看看nginx的基本配置：</p>\n<p>Nginx配置信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网站文件存放默认目录</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/share/nginx/html</span><br><span class=\"line\">网站默认站点配置</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/conf.d/default.conf</span><br><span class=\"line\">自定义Nginx站点配置文件存放目录,自己在这里也可以定义别的名字的.conf，这个的作用以后再说。</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/conf.d/</span><br><span class=\"line\">Nginx全局配置</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/nginx.conf</span><br><span class=\"line\">在这里你可以改变设置用户运行Nginx守护程序进程一样,和工作进程的数量得到了Nginx正在运行,等等。</span><br></pre></td></tr></table></figure></p>\n<p>Linux查看公网IP</p>\n<p>您可以运行以下命令来显示你的服务器的公共IP地址:(这个其实没用，不是公网IP)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show eth0 | grep inet | awk &apos;&#123; print $2; &#125;&apos; | sed &apos;s/\\/.*$//&apos;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>好了，这个时候我们再来看看可能遇到的问题：无法在公网访问。</p>\n<p>这个时候首先看看配置文件default.conf对不对，一个正确的例子：<br>(域名要先进行解析到响应的IP)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  nginx.310058.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    root           html;</span><br><span class=\"line\">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    #    fastcgi_index  index.php;</span><br><span class=\"line\">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">    #    include        fastcgi_params;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">    # concurs with nginx&apos;s one</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ /\\.ht &#123;</span><br><span class=\"line\">    #    deny  all;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>确定文件没问题了，看看这个时候是不是开启了nginx进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n<p>应该会输出一个或者多个进程，如果没有的话就开启或者重启试试看。</p>\n<p>这个时候接下来再试试在服务器上：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping  115.29.102.81</span><br><span class=\"line\">telnet 115.29.102.81 80</span><br><span class=\"line\">wget nginx.310058.cn</span><br></pre></td></tr></table></figure></p>\n<p>如果有的命令没有就直接yum安装下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install telnet</span><br></pre></td></tr></table></figure></p>\n<p>如果都可以的话，之后在本机尝试以上三行。如果没有命令也要安装下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install wget</span><br></pre></td></tr></table></figure></p>\n<p>发现很可能本机telnet不通，而服务器telnet通。<br>这个时候就是<strong>防火墙</strong>的问题。</p>\n<p>####centos7.2防火墙</p>\n<p>由于centos 7版本以后默认使用firewalld后，网上关于iptables的设置方法已经不管用了，所以根本就别想用配置iptables做啥，根本没用。</p>\n<p>查看下防火墙状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ28dcsp7egZ conf.d]# systemctl status firewalld  </span><br><span class=\"line\">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2016-08-03 12:06:44 CST; 2h 49min ago</span><br><span class=\"line\"> Main PID: 424 (firewalld)</span><br><span class=\"line\">   CGroup: /system.slice/firewalld.service</span><br><span class=\"line\">           └─424 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class=\"line\"></span><br><span class=\"line\">Aug 03 12:06:41 iZ28dcsp7egZ systemd[1]: Starting firewalld - dynamic firewall daemon...</span><br><span class=\"line\">Aug 03 12:06:44 iZ28dcsp7egZ systemd[1]: Started firewalld - dynamic firewall daemon.</span><br></pre></td></tr></table></figure></p>\n<p>增加80端口的权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></p>\n<p> 别忘了更新防火墙的配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n<p>这个时候再<code>restart  nginx.service</code> 一下就会发现应该好了。</p>\n<p>nginx 停止：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br><span class=\"line\">也可以重启nginx</span><br><span class=\"line\"></span><br><span class=\"line\">kill -QUIT 进程号  </span><br><span class=\"line\">#从容停止</span><br><span class=\"line\"></span><br><span class=\"line\">kill -TERM 进程号</span><br><span class=\"line\">#或者</span><br><span class=\"line\">kill -INT 进程号</span><br><span class=\"line\">#快速停止</span><br><span class=\"line\"></span><br><span class=\"line\">p-kill -9 nginx</span><br><span class=\"line\">强制停止</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -t </span><br><span class=\"line\">#验证配置文件 前提是进入相应的配置的目录（自己实际测试的时候发现没有进入相应的配置目录也是可以的）</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\">#重启</span><br><span class=\"line\"></span><br><span class=\"line\">kill -HUP 进程号</span><br><span class=\"line\">#重启的另外一种方式</span><br></pre></td></tr></table></figure>\n<p>官方文档地址：<br><a href=\"https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#sec-Introduction_to_firewalld\" target=\"_blank\" rel=\"noopener\">https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#sec-Introduction_to_firewalld</a></p>\n<p>附1:一个简单的负载均衡的实现:<br>weight默认是1，自己也可以更改。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream mypro &#123;</span><br><span class=\"line\">\t\t\t\tip_hash;</span><br><span class=\"line\">                server 111.13.100.92 weight=2;</span><br><span class=\"line\">                server 183.232.41.1;</span><br><span class=\"line\">                server 42.156.140.7;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">                listen 8090;</span><br><span class=\"line\">                location / &#123;</span><br><span class=\"line\">                proxy_pass http://mypro;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>附2:防火墙基本学习：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1、firewalld简介</span><br><span class=\"line\">firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念</span><br><span class=\"line\"> </span><br><span class=\"line\">firewalld有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍</span><br><span class=\"line\"> </span><br><span class=\"line\">firewalld的字符界面管理工具是 firewall-cmd </span><br><span class=\"line\"> </span><br><span class=\"line\">firewalld默认配置文件有两个：/usr/lib/firewalld/ （系统配置，尽量不要修改）和 /etc/firewalld/ （用户配置地址）</span><br><span class=\"line\"> </span><br><span class=\"line\">zone概念：</span><br><span class=\"line\">硬件防火墙默认一般有三个区，firewalld引入这一概念系统默认存在以下区域（根据文档自己理解，如果有误请指正）：</span><br><span class=\"line\">drop：默认丢弃所有包</span><br><span class=\"line\">block：拒绝所有外部连接，允许内部发起的连接</span><br><span class=\"line\">public：指定外部连接可以进入</span><br><span class=\"line\">external：这个不太明白，功能上和上面相同，允许指定的外部连接</span><br><span class=\"line\">dmz：和硬件防火墙一样，受限制的公共连接可以进入</span><br><span class=\"line\">work：工作区，概念和workgoup一样，也是指定的外部连接允许</span><br><span class=\"line\">home：类似家庭组</span><br><span class=\"line\">internal：信任所有连接</span><br><span class=\"line\">对防火墙不算太熟悉，还没想明白public、external、dmz、work、home从功能上都需要自定义允许连接，具体使用上的区别还需高人指点</span><br><span class=\"line\"> </span><br><span class=\"line\">2、安装firewalld</span><br><span class=\"line\">root执行 # yum install firewalld firewall-config</span><br><span class=\"line\"> </span><br><span class=\"line\">3、运行、停止、禁用firewalld</span><br><span class=\"line\">启动：# systemctl start  firewalld</span><br><span class=\"line\">查看状态：# systemctl status firewalld 或者 firewall-cmd --state</span><br><span class=\"line\">停止：# systemctl disable firewalld</span><br><span class=\"line\">禁用：# systemctl stop firewalld</span><br><span class=\"line\"> </span><br><span class=\"line\">4、配置firewalld</span><br><span class=\"line\">查看版本：$ firewall-cmd --version</span><br><span class=\"line\">查看帮助：$ firewall-cmd --help</span><br><span class=\"line\">查看设置：</span><br><span class=\"line\">                显示状态：$ firewall-cmd --state</span><br><span class=\"line\">                查看区域信息: $ firewall-cmd --get-active-zones</span><br><span class=\"line\">                查看指定接口所属区域：$ firewall-cmd --get-zone-of-interface=eth0</span><br><span class=\"line\">拒绝所有包：# firewall-cmd --panic-on</span><br><span class=\"line\">取消拒绝状态：# firewall-cmd --panic-off</span><br><span class=\"line\">查看是否拒绝：$ firewall-cmd --query-panic</span><br><span class=\"line\"> </span><br><span class=\"line\">更新防火墙规则：# firewall-cmd --reload</span><br><span class=\"line\">                            # firewall-cmd --complete-reload</span><br><span class=\"line\">    两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务</span><br><span class=\"line\"> </span><br><span class=\"line\">将接口添加到区域，默认接口都在public</span><br><span class=\"line\"># firewall-cmd --zone=public --add-interface=eth0</span><br><span class=\"line\">永久生效再加上 --permanent 然后reload防火墙</span><br><span class=\"line\"> </span><br><span class=\"line\">设置默认接口区域</span><br><span class=\"line\"># firewall-cmd --set-default-zone=public</span><br><span class=\"line\">立即生效无需重启</span><br><span class=\"line\"> </span><br><span class=\"line\">打开端口（貌似这个才最常用）</span><br><span class=\"line\">查看所有打开的端口：</span><br><span class=\"line\"># firewall-cmd --zone=dmz --list-ports</span><br><span class=\"line\">加入一个端口到区域：</span><br><span class=\"line\"># firewall-cmd --zone=dmz --add-port=8080/tcp</span><br><span class=\"line\">若要永久生效方法同上</span><br><span class=\"line\"> </span><br><span class=\"line\">打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档</span><br><span class=\"line\"># firewall-cmd --zone=work --add-service=smtp</span><br><span class=\"line\"> </span><br><span class=\"line\">移除服务</span><br><span class=\"line\"># firewall-cmd --zone=work --remove-service=smtp</span><br><span class=\"line\"> </span><br><span class=\"line\">还有端口转发功能、自定义复杂规则功能、lockdown，由于还没用到，以后再学习</span><br></pre></td></tr></table></figure>\n"},{"title":"Stochastic Differential Equation simulations and uniform peacock problem","date":"2018-09-27T08:15:38.000Z","_content":"\nIn this report we will discuss stochastic differential equations and simulations of their roots. After that, a special SDE equation will be introduced and simulated using both Euler and Milstein method.\n\nFind full report [here](/files/UROP.pdf).\n\n### 背景概述\n\n首先描述一下笔者遇到的问题，我们可以设定这样一个场景：现在有一个实时监控系统的开发需求，要求同时支持多个用户（这里我们为了简化，暂时不涉及登陆态，假定一个设备即为一个用户），对于不同的用户来讲，他们需要监控的一部分内容是完全相同的，比如设备的 CPU 信息、内存信息等，而另外一部分内容是部分用户重叠的，比如对某一区域的用户来说某些监控信息是相同的，而还有一些信息，则是用户之间完全不同的。\n\n对于每个用户来讲，当其进入页面之后即表明其开始监控，需要持续地进行数据更新，而当其退出界面或者手动点击停止监控，则停止监控。\n\n### 问题描述\n\n实际上，对于以上情况，我们很容易想到通过 WebSocket，对不同的用户进行隔离处理，当一个用户开始监控的时候，通过函数来逐个启动其所有的监控项目，当其停止监控的时候，取消相关监控，并且清除无关变量等。我们可以将所有内容写到 WebSocket 的连接回调中，由于作用域隔离，不同用户之间的监控（读操作）不会产生互相影响。\n\n这种方式可以说是最为快捷方便的方式了，并且几乎无需进行设计，但是这样有一个非常明显的效率问题：\n\n由于不同用户的部分监控项目是有重叠的，对于这些重叠的项目，我们如果对于每一个用户都单独监控，那么就会产生非常多的浪费，如果这些监控中还涉及到数据库交互或者较为复杂的计算，那么成倍之后的性能损失是非常难以承受的。\n\n所以，我们需要将不同用户重叠的那些监控项目，进行合并，合并成一个之后，如果有新的消息，我们就推到所有相关用户的回调函数中去处理。\n\n                    <!-- more -->\n\n也就是说，我们需要管理一个一对多的订阅发布模式。\n\n到这里，我们发现我们想要实现这样一个监控系统，并不是非常简单，主要有下列问题：\n\n* [1]对于可能有用户重叠的监控项目，我们需要抽离到用户作用域之外，并且通过统计计数等方式来\"记住\"当前所有的监控用户，当有新内容时推到各个用户的处理函数中，并且当最后一个用户取消监控的时候要及时清理相关对象。\n* [2]不同用户的重叠监控项目的监控方式也各不相同，有的是通过 `setInterval` 等方式的定时任务，有的是事件监听器等等。\n* [3]判断不同用户的项目是否重叠也有一定的争议，比如假设不同用户端监控的是同一个项目，调用的也是相同的函数，但是由于用户 ID 不同，这个时候我们如何判断是否算\"同一个监控\"？\n\n以上的这些问题，如果我们不借助现有的库和工具，自己顺着思路一点点去写，则很容易陷入修修补补的循环，无法专注监控本身，并且最后甚至在效率上适得其反。\n\n### 解决方案\n\n以下解决方案基于 Rx.js，需要对 [Observable](https://cn.rx.js.org/class/es6/Observable.js~Observable.html) 有一定了解。\n\n#### 多个用户的监控以及取消\n\n[Monitor-RX](https://github.com/aircloud/monitor-rx) 是对以上场景问题的一个解决方案封装，其利用了 Rx.js 对订阅发布的管理能力，可以让整个流程变的清晰。\n\n在 Rx.js 中，我们可以通过以下方式建立一个多播对象 `multicasted`：\n\n```\nvar source = Rx.from([1, 2, 3]);\nvar subject = new Rx.Subject();\nvar multicasted = source.pipe(multicast(subject)).refCount();\n// 其属于 monitor-rx 的实现细节，无需理解亦可使用 monitor-rx\n\nsubscription1 = refCounted.subscribe({\n    next: (v) => console.log('observerA: ' + JSON.stringify(v))\n});\n\nsetTimeout(() => {\n    subscription2 = refCounted.subscribe({\n        next: (v) => console.log('observerB: ' + JSON.stringify(v))\n    });\n}, 1200);\n\nsubscription1.unsubscribe();\nsetTimeout(() => {\n    subscription2.unsubscribe();\n    // 这里 refCounted 的 unsubscribe 相关清理逻辑会自动被调用\n}, 3200);\n```\n\n在这里采用多播，有如下几个好处：\n\n* 可以随时增加新的订阅者，并且新的订阅者只会收到其加入订阅之后的数据。\n* 可以随时对任意一个订阅者取消订阅。\n* 当所有订阅者取消订阅之后，Observable 会自动触发 Observable 函数，从而可以对其事件循环等进行清理。\n\n以上能力其实可以帮助我们解决上文提到的问题 [1]。\n\n#### 监控格式的统一\n\n实际上，在我们的监控系统中，从数据依赖的角度，我们的监控函数会有这样几类：\n\n* [a]纯粹的定时任务，无数据依赖，这方面比如当前内存快照数据等。\n* [b]带有记忆依赖的定时任务：定时任务依赖前一次的数据（甚至更多次），需要两次数据做差等，这方面的数据比如一段时间的消耗数据，cpu 使用率的计算。\n* [c]带有用户依赖的定时任务：依赖用户 id 等信息，不同用户无法共用。\n\n而从任务触发的角度，我们仍待可以对其分类：\n\n* [i]简单的 `setInterval` 定时任务。\n* [ii]基于事件机制的不定时任务。\n* [iii]基于其他触发机制的任务。\n\n实际上，我们如果采用 Rx.js 的模式进行编写，无需考虑任务的数据依赖和触发的方式，只需写成一个一个 Observable 实例即可。另外，对于比较简单的 [a]&[i] 或 [c]&[i]  类型，我们还可以通过 monitor-rx 提供的 `convertToRx` 或 `convertToSimpleRx` 转换成 Observable 实例生成函数，例如：\n\n```\nvar os = require('os');\nvar process = require('process');\nconst monitorRx = require('monitor-rx');\n\nfunction getMemoryInfo() {\n    return process.memoryUsage();\n}\n\nconst memory = monitorRx.Utils.convertToSimpleRx(getMemoryInfo)\n\n// 或者\n//const memory = monitorRx.Utils.convertToRx({\n//    getMemoryInfo\n//});\n\nmodule.exports = memory;\n```\n\nconvertToRx 相比于 convertToSimpleRx，可以支持函数配置注入（即下文中 opts 的 func 属性和 args 属性）,可以在具体生成 Observable 实例的时候具体指定使用哪些函数以及其参数。\n\n如果是比较复杂的 Observable 类型，那么我们就无法直接通过普通函数进行转化了，这个时候我们遵循 Observable 的标准返回 Observable 生成函数即可（不是直接返回 Observable 实例）\n\n这实际上也对问题 [2] 进行了解决。\n\n#### 监控唯一性：\n\n我们知道，如果两个用户都监控同一个信息，我们可以共用一个 Observable，这里的问题，就是如何定义两个用户的监控是\"相同\"的。\n\n这里我们采用一个可选项 opts 的概念，其一共有如下属性：\n\n```\n{\n    module: 'ModuleName',\n    func: ['FuncName'],\n    args: [['arg1','arg2']],\n    opts: {interval:1000},\n}\n```\n\nmodule 即用户是对哪一个模块进行监控（实际上是 Observable），func 和 args 则是监控过程中需要调用的函数，我们也可以通过 agrs 传入用户个人信息。于没有内部子函数调用的监控，二者为空即可，opts 是一些其他可选项，比如定义请求间隔等。\n\n之后，我们通过 `JSON.stringify(opts)` 来序列化这个可选项配置，如果两个用户序列化后的可选项配置相同，那么我们就认为这两个用户可以共用一个监控，即共用一个 Observable。\n\n### 更多内容\n\n实际上，借助 Monitor-RX，我们可以很方便的解决上述提出的问题，Monitor-RX 也在积极的更新中，大家可以在[这里](https://github.com/aircloud/monitor-rx)了解到更多的信息。\n","source":"_posts/Stochastic Differential Equation simulations and uniform peacock problem.md","raw":"---\ntitle: Stochastic Differential Equation simulations and uniform peacock problem\ndate: 2018-09-27 17:15:38\ntags:\n    - Math\n    - Stochastic Differential Equations\n    - python\ncategories:\n    - Research projects\n    - UROP\n---\n\nIn this report we will discuss stochastic differential equations and simulations of their roots. After that, a special SDE equation will be introduced and simulated using both Euler and Milstein method.\n\nFind full report [here](/files/UROP.pdf).\n\n### 背景概述\n\n首先描述一下笔者遇到的问题，我们可以设定这样一个场景：现在有一个实时监控系统的开发需求，要求同时支持多个用户（这里我们为了简化，暂时不涉及登陆态，假定一个设备即为一个用户），对于不同的用户来讲，他们需要监控的一部分内容是完全相同的，比如设备的 CPU 信息、内存信息等，而另外一部分内容是部分用户重叠的，比如对某一区域的用户来说某些监控信息是相同的，而还有一些信息，则是用户之间完全不同的。\n\n对于每个用户来讲，当其进入页面之后即表明其开始监控，需要持续地进行数据更新，而当其退出界面或者手动点击停止监控，则停止监控。\n\n### 问题描述\n\n实际上，对于以上情况，我们很容易想到通过 WebSocket，对不同的用户进行隔离处理，当一个用户开始监控的时候，通过函数来逐个启动其所有的监控项目，当其停止监控的时候，取消相关监控，并且清除无关变量等。我们可以将所有内容写到 WebSocket 的连接回调中，由于作用域隔离，不同用户之间的监控（读操作）不会产生互相影响。\n\n这种方式可以说是最为快捷方便的方式了，并且几乎无需进行设计，但是这样有一个非常明显的效率问题：\n\n由于不同用户的部分监控项目是有重叠的，对于这些重叠的项目，我们如果对于每一个用户都单独监控，那么就会产生非常多的浪费，如果这些监控中还涉及到数据库交互或者较为复杂的计算，那么成倍之后的性能损失是非常难以承受的。\n\n所以，我们需要将不同用户重叠的那些监控项目，进行合并，合并成一个之后，如果有新的消息，我们就推到所有相关用户的回调函数中去处理。\n\n                    <!-- more -->\n\n也就是说，我们需要管理一个一对多的订阅发布模式。\n\n到这里，我们发现我们想要实现这样一个监控系统，并不是非常简单，主要有下列问题：\n\n* [1]对于可能有用户重叠的监控项目，我们需要抽离到用户作用域之外，并且通过统计计数等方式来\"记住\"当前所有的监控用户，当有新内容时推到各个用户的处理函数中，并且当最后一个用户取消监控的时候要及时清理相关对象。\n* [2]不同用户的重叠监控项目的监控方式也各不相同，有的是通过 `setInterval` 等方式的定时任务，有的是事件监听器等等。\n* [3]判断不同用户的项目是否重叠也有一定的争议，比如假设不同用户端监控的是同一个项目，调用的也是相同的函数，但是由于用户 ID 不同，这个时候我们如何判断是否算\"同一个监控\"？\n\n以上的这些问题，如果我们不借助现有的库和工具，自己顺着思路一点点去写，则很容易陷入修修补补的循环，无法专注监控本身，并且最后甚至在效率上适得其反。\n\n### 解决方案\n\n以下解决方案基于 Rx.js，需要对 [Observable](https://cn.rx.js.org/class/es6/Observable.js~Observable.html) 有一定了解。\n\n#### 多个用户的监控以及取消\n\n[Monitor-RX](https://github.com/aircloud/monitor-rx) 是对以上场景问题的一个解决方案封装，其利用了 Rx.js 对订阅发布的管理能力，可以让整个流程变的清晰。\n\n在 Rx.js 中，我们可以通过以下方式建立一个多播对象 `multicasted`：\n\n```\nvar source = Rx.from([1, 2, 3]);\nvar subject = new Rx.Subject();\nvar multicasted = source.pipe(multicast(subject)).refCount();\n// 其属于 monitor-rx 的实现细节，无需理解亦可使用 monitor-rx\n\nsubscription1 = refCounted.subscribe({\n    next: (v) => console.log('observerA: ' + JSON.stringify(v))\n});\n\nsetTimeout(() => {\n    subscription2 = refCounted.subscribe({\n        next: (v) => console.log('observerB: ' + JSON.stringify(v))\n    });\n}, 1200);\n\nsubscription1.unsubscribe();\nsetTimeout(() => {\n    subscription2.unsubscribe();\n    // 这里 refCounted 的 unsubscribe 相关清理逻辑会自动被调用\n}, 3200);\n```\n\n在这里采用多播，有如下几个好处：\n\n* 可以随时增加新的订阅者，并且新的订阅者只会收到其加入订阅之后的数据。\n* 可以随时对任意一个订阅者取消订阅。\n* 当所有订阅者取消订阅之后，Observable 会自动触发 Observable 函数，从而可以对其事件循环等进行清理。\n\n以上能力其实可以帮助我们解决上文提到的问题 [1]。\n\n#### 监控格式的统一\n\n实际上，在我们的监控系统中，从数据依赖的角度，我们的监控函数会有这样几类：\n\n* [a]纯粹的定时任务，无数据依赖，这方面比如当前内存快照数据等。\n* [b]带有记忆依赖的定时任务：定时任务依赖前一次的数据（甚至更多次），需要两次数据做差等，这方面的数据比如一段时间的消耗数据，cpu 使用率的计算。\n* [c]带有用户依赖的定时任务：依赖用户 id 等信息，不同用户无法共用。\n\n而从任务触发的角度，我们仍待可以对其分类：\n\n* [i]简单的 `setInterval` 定时任务。\n* [ii]基于事件机制的不定时任务。\n* [iii]基于其他触发机制的任务。\n\n实际上，我们如果采用 Rx.js 的模式进行编写，无需考虑任务的数据依赖和触发的方式，只需写成一个一个 Observable 实例即可。另外，对于比较简单的 [a]&[i] 或 [c]&[i]  类型，我们还可以通过 monitor-rx 提供的 `convertToRx` 或 `convertToSimpleRx` 转换成 Observable 实例生成函数，例如：\n\n```\nvar os = require('os');\nvar process = require('process');\nconst monitorRx = require('monitor-rx');\n\nfunction getMemoryInfo() {\n    return process.memoryUsage();\n}\n\nconst memory = monitorRx.Utils.convertToSimpleRx(getMemoryInfo)\n\n// 或者\n//const memory = monitorRx.Utils.convertToRx({\n//    getMemoryInfo\n//});\n\nmodule.exports = memory;\n```\n\nconvertToRx 相比于 convertToSimpleRx，可以支持函数配置注入（即下文中 opts 的 func 属性和 args 属性）,可以在具体生成 Observable 实例的时候具体指定使用哪些函数以及其参数。\n\n如果是比较复杂的 Observable 类型，那么我们就无法直接通过普通函数进行转化了，这个时候我们遵循 Observable 的标准返回 Observable 生成函数即可（不是直接返回 Observable 实例）\n\n这实际上也对问题 [2] 进行了解决。\n\n#### 监控唯一性：\n\n我们知道，如果两个用户都监控同一个信息，我们可以共用一个 Observable，这里的问题，就是如何定义两个用户的监控是\"相同\"的。\n\n这里我们采用一个可选项 opts 的概念，其一共有如下属性：\n\n```\n{\n    module: 'ModuleName',\n    func: ['FuncName'],\n    args: [['arg1','arg2']],\n    opts: {interval:1000},\n}\n```\n\nmodule 即用户是对哪一个模块进行监控（实际上是 Observable），func 和 args 则是监控过程中需要调用的函数，我们也可以通过 agrs 传入用户个人信息。于没有内部子函数调用的监控，二者为空即可，opts 是一些其他可选项，比如定义请求间隔等。\n\n之后，我们通过 `JSON.stringify(opts)` 来序列化这个可选项配置，如果两个用户序列化后的可选项配置相同，那么我们就认为这两个用户可以共用一个监控，即共用一个 Observable。\n\n### 更多内容\n\n实际上，借助 Monitor-RX，我们可以很方便的解决上述提出的问题，Monitor-RX 也在积极的更新中，大家可以在[这里](https://github.com/aircloud/monitor-rx)了解到更多的信息。\n","slug":"Stochastic Differential Equation simulations and uniform peacock problem","published":1,"updated":"2019-01-20T07:01:32.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds0w001pgxy06fifebq8","content":"<p>In this report we will discuss stochastic differential equations and simulations of their roots. After that, a special SDE equation will be introduced and simulated using both Euler and Milstein method.</p>\n<p>Find full report <a href=\"/files/UROP.pdf\">here</a>.</p>\n<h3 id=\"背景概述\"><a href=\"#背景概述\" class=\"headerlink\" title=\"背景概述\"></a>背景概述</h3><p>首先描述一下笔者遇到的问题，我们可以设定这样一个场景：现在有一个实时监控系统的开发需求，要求同时支持多个用户（这里我们为了简化，暂时不涉及登陆态，假定一个设备即为一个用户），对于不同的用户来讲，他们需要监控的一部分内容是完全相同的，比如设备的 CPU 信息、内存信息等，而另外一部分内容是部分用户重叠的，比如对某一区域的用户来说某些监控信息是相同的，而还有一些信息，则是用户之间完全不同的。</p>\n<p>对于每个用户来讲，当其进入页面之后即表明其开始监控，需要持续地进行数据更新，而当其退出界面或者手动点击停止监控，则停止监控。</p>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>实际上，对于以上情况，我们很容易想到通过 WebSocket，对不同的用户进行隔离处理，当一个用户开始监控的时候，通过函数来逐个启动其所有的监控项目，当其停止监控的时候，取消相关监控，并且清除无关变量等。我们可以将所有内容写到 WebSocket 的连接回调中，由于作用域隔离，不同用户之间的监控（读操作）不会产生互相影响。</p>\n<p>这种方式可以说是最为快捷方便的方式了，并且几乎无需进行设计，但是这样有一个非常明显的效率问题：</p>\n<p>由于不同用户的部分监控项目是有重叠的，对于这些重叠的项目，我们如果对于每一个用户都单独监控，那么就会产生非常多的浪费，如果这些监控中还涉及到数据库交互或者较为复杂的计算，那么成倍之后的性能损失是非常难以承受的。</p>\n<p>所以，我们需要将不同用户重叠的那些监控项目，进行合并，合并成一个之后，如果有新的消息，我们就推到所有相关用户的回调函数中去处理。</p>\n<pre><code>&lt;!-- more --&gt;\n</code></pre><p>也就是说，我们需要管理一个一对多的订阅发布模式。</p>\n<p>到这里，我们发现我们想要实现这样一个监控系统，并不是非常简单，主要有下列问题：</p>\n<ul>\n<li>[1]对于可能有用户重叠的监控项目，我们需要抽离到用户作用域之外，并且通过统计计数等方式来”记住”当前所有的监控用户，当有新内容时推到各个用户的处理函数中，并且当最后一个用户取消监控的时候要及时清理相关对象。</li>\n<li>[2]不同用户的重叠监控项目的监控方式也各不相同，有的是通过 <code>setInterval</code> 等方式的定时任务，有的是事件监听器等等。</li>\n<li>[3]判断不同用户的项目是否重叠也有一定的争议，比如假设不同用户端监控的是同一个项目，调用的也是相同的函数，但是由于用户 ID 不同，这个时候我们如何判断是否算”同一个监控”？</li>\n</ul>\n<p>以上的这些问题，如果我们不借助现有的库和工具，自己顺着思路一点点去写，则很容易陷入修修补补的循环，无法专注监控本身，并且最后甚至在效率上适得其反。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>以下解决方案基于 Rx.js，需要对 <a href=\"https://cn.rx.js.org/class/es6/Observable.js~Observable.html\" target=\"_blank\" rel=\"noopener\">Observable</a> 有一定了解。</p>\n<h4 id=\"多个用户的监控以及取消\"><a href=\"#多个用户的监控以及取消\" class=\"headerlink\" title=\"多个用户的监控以及取消\"></a>多个用户的监控以及取消</h4><p><a href=\"https://github.com/aircloud/monitor-rx\" target=\"_blank\" rel=\"noopener\">Monitor-RX</a> 是对以上场景问题的一个解决方案封装，其利用了 Rx.js 对订阅发布的管理能力，可以让整个流程变的清晰。</p>\n<p>在 Rx.js 中，我们可以通过以下方式建立一个多播对象 <code>multicasted</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var source = Rx.from([1, 2, 3]);</span><br><span class=\"line\">var subject = new Rx.Subject();</span><br><span class=\"line\">var multicasted = source.pipe(multicast(subject)).refCount();</span><br><span class=\"line\">// 其属于 monitor-rx 的实现细节，无需理解亦可使用 monitor-rx</span><br><span class=\"line\"></span><br><span class=\"line\">subscription1 = refCounted.subscribe(&#123;</span><br><span class=\"line\">    next: (v) =&gt; console.log(&apos;observerA: &apos; + JSON.stringify(v))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    subscription2 = refCounted.subscribe(&#123;</span><br><span class=\"line\">        next: (v) =&gt; console.log(&apos;observerB: &apos; + JSON.stringify(v))</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, 1200);</span><br><span class=\"line\"></span><br><span class=\"line\">subscription1.unsubscribe();</span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    subscription2.unsubscribe();</span><br><span class=\"line\">    // 这里 refCounted 的 unsubscribe 相关清理逻辑会自动被调用</span><br><span class=\"line\">&#125;, 3200);</span><br></pre></td></tr></table></figure>\n<p>在这里采用多播，有如下几个好处：</p>\n<ul>\n<li>可以随时增加新的订阅者，并且新的订阅者只会收到其加入订阅之后的数据。</li>\n<li>可以随时对任意一个订阅者取消订阅。</li>\n<li>当所有订阅者取消订阅之后，Observable 会自动触发 Observable 函数，从而可以对其事件循环等进行清理。</li>\n</ul>\n<p>以上能力其实可以帮助我们解决上文提到的问题 [1]。</p>\n<h4 id=\"监控格式的统一\"><a href=\"#监控格式的统一\" class=\"headerlink\" title=\"监控格式的统一\"></a>监控格式的统一</h4><p>实际上，在我们的监控系统中，从数据依赖的角度，我们的监控函数会有这样几类：</p>\n<ul>\n<li>[a]纯粹的定时任务，无数据依赖，这方面比如当前内存快照数据等。</li>\n<li>[b]带有记忆依赖的定时任务：定时任务依赖前一次的数据（甚至更多次），需要两次数据做差等，这方面的数据比如一段时间的消耗数据，cpu 使用率的计算。</li>\n<li>[c]带有用户依赖的定时任务：依赖用户 id 等信息，不同用户无法共用。</li>\n</ul>\n<p>而从任务触发的角度，我们仍待可以对其分类：</p>\n<ul>\n<li>[i]简单的 <code>setInterval</code> 定时任务。</li>\n<li>[ii]基于事件机制的不定时任务。</li>\n<li>[iii]基于其他触发机制的任务。</li>\n</ul>\n<p>实际上，我们如果采用 Rx.js 的模式进行编写，无需考虑任务的数据依赖和触发的方式，只需写成一个一个 Observable 实例即可。另外，对于比较简单的 [a]&amp;[i] 或 [c]&amp;[i]  类型，我们还可以通过 monitor-rx 提供的 <code>convertToRx</code> 或 <code>convertToSimpleRx</code> 转换成 Observable 实例生成函数，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var os = require(&apos;os&apos;);</span><br><span class=\"line\">var process = require(&apos;process&apos;);</span><br><span class=\"line\">const monitorRx = require(&apos;monitor-rx&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">function getMemoryInfo() &#123;</span><br><span class=\"line\">    return process.memoryUsage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const memory = monitorRx.Utils.convertToSimpleRx(getMemoryInfo)</span><br><span class=\"line\"></span><br><span class=\"line\">// 或者</span><br><span class=\"line\">//const memory = monitorRx.Utils.convertToRx(&#123;</span><br><span class=\"line\">//    getMemoryInfo</span><br><span class=\"line\">//&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = memory;</span><br></pre></td></tr></table></figure>\n<p>convertToRx 相比于 convertToSimpleRx，可以支持函数配置注入（即下文中 opts 的 func 属性和 args 属性）,可以在具体生成 Observable 实例的时候具体指定使用哪些函数以及其参数。</p>\n<p>如果是比较复杂的 Observable 类型，那么我们就无法直接通过普通函数进行转化了，这个时候我们遵循 Observable 的标准返回 Observable 生成函数即可（不是直接返回 Observable 实例）</p>\n<p>这实际上也对问题 [2] 进行了解决。</p>\n<h4 id=\"监控唯一性：\"><a href=\"#监控唯一性：\" class=\"headerlink\" title=\"监控唯一性：\"></a>监控唯一性：</h4><p>我们知道，如果两个用户都监控同一个信息，我们可以共用一个 Observable，这里的问题，就是如何定义两个用户的监控是”相同”的。</p>\n<p>这里我们采用一个可选项 opts 的概念，其一共有如下属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    module: &apos;ModuleName&apos;,</span><br><span class=\"line\">    func: [&apos;FuncName&apos;],</span><br><span class=\"line\">    args: [[&apos;arg1&apos;,&apos;arg2&apos;]],</span><br><span class=\"line\">    opts: &#123;interval:1000&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>module 即用户是对哪一个模块进行监控（实际上是 Observable），func 和 args 则是监控过程中需要调用的函数，我们也可以通过 agrs 传入用户个人信息。于没有内部子函数调用的监控，二者为空即可，opts 是一些其他可选项，比如定义请求间隔等。</p>\n<p>之后，我们通过 <code>JSON.stringify(opts)</code> 来序列化这个可选项配置，如果两个用户序列化后的可选项配置相同，那么我们就认为这两个用户可以共用一个监控，即共用一个 Observable。</p>\n<h3 id=\"更多内容\"><a href=\"#更多内容\" class=\"headerlink\" title=\"更多内容\"></a>更多内容</h3><p>实际上，借助 Monitor-RX，我们可以很方便的解决上述提出的问题，Monitor-RX 也在积极的更新中，大家可以在<a href=\"https://github.com/aircloud/monitor-rx\" target=\"_blank\" rel=\"noopener\">这里</a>了解到更多的信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In this report we will discuss stochastic differential equations and simulations of their roots. After that, a special SDE equation will be introduced and simulated using both Euler and Milstein method.</p>\n<p>Find full report <a href=\"/files/UROP.pdf\">here</a>.</p>\n<h3 id=\"背景概述\"><a href=\"#背景概述\" class=\"headerlink\" title=\"背景概述\"></a>背景概述</h3><p>首先描述一下笔者遇到的问题，我们可以设定这样一个场景：现在有一个实时监控系统的开发需求，要求同时支持多个用户（这里我们为了简化，暂时不涉及登陆态，假定一个设备即为一个用户），对于不同的用户来讲，他们需要监控的一部分内容是完全相同的，比如设备的 CPU 信息、内存信息等，而另外一部分内容是部分用户重叠的，比如对某一区域的用户来说某些监控信息是相同的，而还有一些信息，则是用户之间完全不同的。</p>\n<p>对于每个用户来讲，当其进入页面之后即表明其开始监控，需要持续地进行数据更新，而当其退出界面或者手动点击停止监控，则停止监控。</p>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>实际上，对于以上情况，我们很容易想到通过 WebSocket，对不同的用户进行隔离处理，当一个用户开始监控的时候，通过函数来逐个启动其所有的监控项目，当其停止监控的时候，取消相关监控，并且清除无关变量等。我们可以将所有内容写到 WebSocket 的连接回调中，由于作用域隔离，不同用户之间的监控（读操作）不会产生互相影响。</p>\n<p>这种方式可以说是最为快捷方便的方式了，并且几乎无需进行设计，但是这样有一个非常明显的效率问题：</p>\n<p>由于不同用户的部分监控项目是有重叠的，对于这些重叠的项目，我们如果对于每一个用户都单独监控，那么就会产生非常多的浪费，如果这些监控中还涉及到数据库交互或者较为复杂的计算，那么成倍之后的性能损失是非常难以承受的。</p>\n<p>所以，我们需要将不同用户重叠的那些监控项目，进行合并，合并成一个之后，如果有新的消息，我们就推到所有相关用户的回调函数中去处理。</p>\n<pre><code>&lt;!-- more --&gt;\n</code></pre><p>也就是说，我们需要管理一个一对多的订阅发布模式。</p>\n<p>到这里，我们发现我们想要实现这样一个监控系统，并不是非常简单，主要有下列问题：</p>\n<ul>\n<li>[1]对于可能有用户重叠的监控项目，我们需要抽离到用户作用域之外，并且通过统计计数等方式来”记住”当前所有的监控用户，当有新内容时推到各个用户的处理函数中，并且当最后一个用户取消监控的时候要及时清理相关对象。</li>\n<li>[2]不同用户的重叠监控项目的监控方式也各不相同，有的是通过 <code>setInterval</code> 等方式的定时任务，有的是事件监听器等等。</li>\n<li>[3]判断不同用户的项目是否重叠也有一定的争议，比如假设不同用户端监控的是同一个项目，调用的也是相同的函数，但是由于用户 ID 不同，这个时候我们如何判断是否算”同一个监控”？</li>\n</ul>\n<p>以上的这些问题，如果我们不借助现有的库和工具，自己顺着思路一点点去写，则很容易陷入修修补补的循环，无法专注监控本身，并且最后甚至在效率上适得其反。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>以下解决方案基于 Rx.js，需要对 <a href=\"https://cn.rx.js.org/class/es6/Observable.js~Observable.html\" target=\"_blank\" rel=\"noopener\">Observable</a> 有一定了解。</p>\n<h4 id=\"多个用户的监控以及取消\"><a href=\"#多个用户的监控以及取消\" class=\"headerlink\" title=\"多个用户的监控以及取消\"></a>多个用户的监控以及取消</h4><p><a href=\"https://github.com/aircloud/monitor-rx\" target=\"_blank\" rel=\"noopener\">Monitor-RX</a> 是对以上场景问题的一个解决方案封装，其利用了 Rx.js 对订阅发布的管理能力，可以让整个流程变的清晰。</p>\n<p>在 Rx.js 中，我们可以通过以下方式建立一个多播对象 <code>multicasted</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var source = Rx.from([1, 2, 3]);</span><br><span class=\"line\">var subject = new Rx.Subject();</span><br><span class=\"line\">var multicasted = source.pipe(multicast(subject)).refCount();</span><br><span class=\"line\">// 其属于 monitor-rx 的实现细节，无需理解亦可使用 monitor-rx</span><br><span class=\"line\"></span><br><span class=\"line\">subscription1 = refCounted.subscribe(&#123;</span><br><span class=\"line\">    next: (v) =&gt; console.log(&apos;observerA: &apos; + JSON.stringify(v))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    subscription2 = refCounted.subscribe(&#123;</span><br><span class=\"line\">        next: (v) =&gt; console.log(&apos;observerB: &apos; + JSON.stringify(v))</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, 1200);</span><br><span class=\"line\"></span><br><span class=\"line\">subscription1.unsubscribe();</span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    subscription2.unsubscribe();</span><br><span class=\"line\">    // 这里 refCounted 的 unsubscribe 相关清理逻辑会自动被调用</span><br><span class=\"line\">&#125;, 3200);</span><br></pre></td></tr></table></figure>\n<p>在这里采用多播，有如下几个好处：</p>\n<ul>\n<li>可以随时增加新的订阅者，并且新的订阅者只会收到其加入订阅之后的数据。</li>\n<li>可以随时对任意一个订阅者取消订阅。</li>\n<li>当所有订阅者取消订阅之后，Observable 会自动触发 Observable 函数，从而可以对其事件循环等进行清理。</li>\n</ul>\n<p>以上能力其实可以帮助我们解决上文提到的问题 [1]。</p>\n<h4 id=\"监控格式的统一\"><a href=\"#监控格式的统一\" class=\"headerlink\" title=\"监控格式的统一\"></a>监控格式的统一</h4><p>实际上，在我们的监控系统中，从数据依赖的角度，我们的监控函数会有这样几类：</p>\n<ul>\n<li>[a]纯粹的定时任务，无数据依赖，这方面比如当前内存快照数据等。</li>\n<li>[b]带有记忆依赖的定时任务：定时任务依赖前一次的数据（甚至更多次），需要两次数据做差等，这方面的数据比如一段时间的消耗数据，cpu 使用率的计算。</li>\n<li>[c]带有用户依赖的定时任务：依赖用户 id 等信息，不同用户无法共用。</li>\n</ul>\n<p>而从任务触发的角度，我们仍待可以对其分类：</p>\n<ul>\n<li>[i]简单的 <code>setInterval</code> 定时任务。</li>\n<li>[ii]基于事件机制的不定时任务。</li>\n<li>[iii]基于其他触发机制的任务。</li>\n</ul>\n<p>实际上，我们如果采用 Rx.js 的模式进行编写，无需考虑任务的数据依赖和触发的方式，只需写成一个一个 Observable 实例即可。另外，对于比较简单的 [a]&amp;[i] 或 [c]&amp;[i]  类型，我们还可以通过 monitor-rx 提供的 <code>convertToRx</code> 或 <code>convertToSimpleRx</code> 转换成 Observable 实例生成函数，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var os = require(&apos;os&apos;);</span><br><span class=\"line\">var process = require(&apos;process&apos;);</span><br><span class=\"line\">const monitorRx = require(&apos;monitor-rx&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">function getMemoryInfo() &#123;</span><br><span class=\"line\">    return process.memoryUsage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const memory = monitorRx.Utils.convertToSimpleRx(getMemoryInfo)</span><br><span class=\"line\"></span><br><span class=\"line\">// 或者</span><br><span class=\"line\">//const memory = monitorRx.Utils.convertToRx(&#123;</span><br><span class=\"line\">//    getMemoryInfo</span><br><span class=\"line\">//&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = memory;</span><br></pre></td></tr></table></figure>\n<p>convertToRx 相比于 convertToSimpleRx，可以支持函数配置注入（即下文中 opts 的 func 属性和 args 属性）,可以在具体生成 Observable 实例的时候具体指定使用哪些函数以及其参数。</p>\n<p>如果是比较复杂的 Observable 类型，那么我们就无法直接通过普通函数进行转化了，这个时候我们遵循 Observable 的标准返回 Observable 生成函数即可（不是直接返回 Observable 实例）</p>\n<p>这实际上也对问题 [2] 进行了解决。</p>\n<h4 id=\"监控唯一性：\"><a href=\"#监控唯一性：\" class=\"headerlink\" title=\"监控唯一性：\"></a>监控唯一性：</h4><p>我们知道，如果两个用户都监控同一个信息，我们可以共用一个 Observable，这里的问题，就是如何定义两个用户的监控是”相同”的。</p>\n<p>这里我们采用一个可选项 opts 的概念，其一共有如下属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    module: &apos;ModuleName&apos;,</span><br><span class=\"line\">    func: [&apos;FuncName&apos;],</span><br><span class=\"line\">    args: [[&apos;arg1&apos;,&apos;arg2&apos;]],</span><br><span class=\"line\">    opts: &#123;interval:1000&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>module 即用户是对哪一个模块进行监控（实际上是 Observable），func 和 args 则是监控过程中需要调用的函数，我们也可以通过 agrs 传入用户个人信息。于没有内部子函数调用的监控，二者为空即可，opts 是一些其他可选项，比如定义请求间隔等。</p>\n<p>之后，我们通过 <code>JSON.stringify(opts)</code> 来序列化这个可选项配置，如果两个用户序列化后的可选项配置相同，那么我们就认为这两个用户可以共用一个监控，即共用一个 Observable。</p>\n<h3 id=\"更多内容\"><a href=\"#更多内容\" class=\"headerlink\" title=\"更多内容\"></a>更多内容</h3><p>实际上，借助 Monitor-RX，我们可以很方便的解决上述提出的问题，Monitor-RX 也在积极的更新中，大家可以在<a href=\"https://github.com/aircloud/monitor-rx\" target=\"_blank\" rel=\"noopener\">这里</a>了解到更多的信息。</p>\n"},{"title":"一篇关于react历史的流水账","date":"2018-06-10T06:54:14.000Z","_content":"\nreact 目前已经更新到 V16.3，其一路走来，日臻完善，笔者接触 react 两年有余，在这里做一个阶段性的整理，也对 react 的发展和我对 react 的学习做一个整体记录。\n\n笔者是在 16 年初开始关注 react，而实际上那个时候 react 已经发布快三年了， 16 年初的我写页面还是主要使用 backbone.js、Jquery，并且认为，相比于纯粹使用 Jquery 的“刀耕火种”的时代，使用 backbone.js 已经足够方便并且不需要替代品了。\n\n这篇文章会从 react 开源之初进行讲起，直到 2018 年六月。\n\n### 为什么是 react\n\n我们知道，react 并不是一个 MVC 框架，也并没有使用传统的前端模版，而是采用了纯 JS 编写（实际上用到了 JSX ），使用了虚拟 DOM，使用 diff 来保证 DOM 的更新效率，并且可以结合 facebook 的 Flux 架构，解决传统 MVC 模式的一些痛点。\n\n在 react 开源之初，相关生态体系并不完善，甚至官方还在用`Backbone.Router`加 react 来开发单页面应用。\n\n但是那个时候的 react，和现在的 react，解决的核心问题都没有变化，那就是**复杂的UI渲染问题（ complex UI rendering ）**，所有的它的组件化，虚拟 DOM 和 diff 算法，甚至目前提出的 Fiber、async rendering等等，都是围绕这个中心。\n\n### FLUX\n\n在 2014 年五月左右，也就是距离 react 开源接近一年时间，react 公开了 FLUX 架构。当然，我们现在在学习的过程中，甚至都很难听到 FLUX 这个词汇了，更多的则是 redux 甚至 dva 等更上层的框架，但是目前绝大多数 react 相关的数据管理框架都受到了 FLUX 很大启发。\n\nFLUX 和双向数据绑定的关系，我认为这里有必要援引当初官方写的一点解释（更详细的一些信息，可以看[这篇文章](https://www.10000h.top/react_flux.pdf)）：\n\n```\nTo summarize, Flux works well for us because the single directional data flow makes it easy to understand and modify an application as it becomes more complicated. We found that two-way data bindings lead to cascading updates, where changing one data model led to another data model updating, making it very difficult to predict what would change as the result of a single user interaction.\n\n总而言之，Flux对我们来说效果很好，因为单向数据流可以让应用程序变得更加复杂，从而轻松理解和修改应用程序。我们发现双向数据绑定导致级联更新，其中更改一个数据模型导致另一个数据模型更新，使得很难预测单个用户交互的结果会发生什么变化。\n```\n\n从此之后，下面这张图便多次出现在官方博客和各个网站中，相信我们也肯定见过下图：\n\n![](https://www.10000h.top/images/flux.png)\n\n### react-router\n\n2014年8月，react-router 的雏形发布，在其发布之前，不少示例应用还在使用 backbone\n.js 的 router，而 react-router 的发布，标志着 react 生态的进一步成熟。\n\n### react ES6 Class\n\n实际上，在 2015.01.27 之前，我们都是在使用 `React.createClass`来书写组件。\n\n而在 2015.01.27 这一天，也就是第一届 `reactjs conf` 的前一天，react 官方发布了 React V0.13.0 beta 版本。这一个版本的最大更新就是支持 ES6 的 Class 写法来书写组件，同时也公布了比如 propTypes 类型检查、defaultProps、AutoBind、ref 等一系列相关工作在 ES6 Class 模式下的写法。\n\n这次发布是 react 开源至此最为重大的一次更新，也因此直接将 react 的写法进行了革新，在我看来，这标志着 react 从刀耕火种的原始时代进入了石器时代。\n\n*实际上，直到一个半月后的 03.10 ，V0.13 的正式版本才发布。*\n\n而在之后的 V15.5 版本（2017年4月发布），react 才将`React.createClass`的使用设置为 Deprecation，并且宣布会在将来移除该 API，与此同时，react 团队仍然提供了一个单独的库`create-react-class` 来支持原来的 `React.createClass` 功能。\n\n### Relay & GraphQL\n\n在 2015 年的 2月，Facebook 公布了 GraphQL，GraphQL 是一种新的数据查询解决方案，事实证明，它是非常优秀的一个解决方案，到现在已经基本在行业内人尽皆知。\n\n而 Relay 则是链接 react 和 GraphQL 的一个解决方案，有点类似 redux（但是 stat 数只有 redux 的四分之一左右），但是对 GraphQL 更为友好，并且在缓存机制的设计（按照 Graph 来 cache）、声明式的数据获取等方面，有一些自己的独到之处。\n\n当然，我们使用 redux 配合相关插件，也可以不使用 Relay。\n\n\n### React Native\n\n在第一届 React.js Conf 中，react 团队首次公开了 React Native，并且在3月份真正开源了 React Native（实际上这个时候安卓版本还并不可用），之后在2015年上半年，相关团队陆陆续续披露了关于 React Native 发展情况的更多信息。\n\n并且也是在这个时候（2015年3月），react 团队开始使用 **learn once, write anywhere** 这个如今我们耳熟能详的口号。\n\n### react & react-dom & babel\n\n在2015年七月，官方发布了React v0.14 Beta 1，这也是一个变动比较大的版本，在这个版本中，主要有如下比较大的变化:\n\n* 官方宣布废弃 react-tools 和 JSTransform，这是和 JSX 解析相关的库，而从此 react 开始使用 babel，我认为这对 react 以及其使用者来说无疑是一个利好。\n* 分离 react 和 react-dom，由于 React Native 已经迭代了一段时间，这个分离同时也意味着 react 之后的发展方向，react 本身将会关注抽象层和组件本身，而 react-dom 可以将其在浏览器中落地，React Native 可以将其在客户端中落地，之后也许还会有 react-xxx ...\n\n将 react 和 react-dom 分离之后，react 团队又对 react-dom 在 dom 方面做了较为大量的更新。\n\n### Discontinuing IE 8 Support\n\n在 react V15 的版本中，放弃了对 IE 8 的支持。\n\n\n### Fiber\n\nreact 团队使用 Fiber 架构完成了 react V16 的开发，得益于 Fiber 架构，react 的性能又得到了显著提升（尤其是在某些要求交互连续的场景下），并且包大小缩小了 32%。\n\n到目前来说，关于 Fiber 架构的中英文资料都已经相当丰富，笔者在这里就不进行过多的赘述了。\n\n### 接下来的展望\n\nreact 团队目前的主要工作集中在 async rendering 方面，这方面的改进可以极大提升用户交互体验（特别是在弱网络环境下），会在 2018 年发布。\n\n如果你对这方面的内容很感兴趣，不妨看看 react 之前的[演讲视频](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)\n\n### 附录1 一些你可能不知道的变化\n\n* react并非直接将 JSX 渲染成 DOM，而是对某些事件和属性做了封装（优化）。 react 对表单类型的 DOM 进行了优化，比如封装了较为通用的 onChange 回调函数，这其中需要处理不少问题，react 在 V0.4 即拥有了这一特性，可以参考[这里](https://reactjs.org/blog/2013/07/23/community-roundup-5.html#cross-browser-onchange)\n* 事实上，react 在V0.8之前，一直在以“react-tools”这个名字发布，而 npm 上面叫做 react 的实际上是另外一个包，而到 V0.8 的时候，react 团队和原来的 “react” 包开发者协商，之后 react 便接管了原来的这个包，也因此，react并没有 V0.6 和 V0.7，而是从 V0.5 直接到了 V0.8\n* react 从 V0.14 之后，就直接跳跃到了 V15，官方团队给出的理由是，react 很早就已经足够稳定并且可以使用在生产版本中，更改版本的表达方式更有助于表示 react 项目本身的稳定性。\n\n### 附录2 一些比较优秀的博客\n\n* 关于React Components, Elements, 和 Instances，如果你还有一些疑问，可以看一看React官方团队的文章：[React Components, Elements, and Instances](https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html)\n* 如果你倾向于使用 mixins，不妨看看 react 关于取消 mixin的说法：[Mixins Considered Harmful](https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html)\n* react props 相关的开发模式的建议，我认为目前在使用 react 的程序员都应该了解一下[You Probably Don't Need Derived State](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html)","source":"_posts/一篇关于react历史的流水账.md","raw":"---\ntitle: 一篇关于react历史的流水账\ndate: 2018-06-10 15:54:14\ntags:\n\t- react\n---\n\nreact 目前已经更新到 V16.3，其一路走来，日臻完善，笔者接触 react 两年有余，在这里做一个阶段性的整理，也对 react 的发展和我对 react 的学习做一个整体记录。\n\n笔者是在 16 年初开始关注 react，而实际上那个时候 react 已经发布快三年了， 16 年初的我写页面还是主要使用 backbone.js、Jquery，并且认为，相比于纯粹使用 Jquery 的“刀耕火种”的时代，使用 backbone.js 已经足够方便并且不需要替代品了。\n\n这篇文章会从 react 开源之初进行讲起，直到 2018 年六月。\n\n### 为什么是 react\n\n我们知道，react 并不是一个 MVC 框架，也并没有使用传统的前端模版，而是采用了纯 JS 编写（实际上用到了 JSX ），使用了虚拟 DOM，使用 diff 来保证 DOM 的更新效率，并且可以结合 facebook 的 Flux 架构，解决传统 MVC 模式的一些痛点。\n\n在 react 开源之初，相关生态体系并不完善，甚至官方还在用`Backbone.Router`加 react 来开发单页面应用。\n\n但是那个时候的 react，和现在的 react，解决的核心问题都没有变化，那就是**复杂的UI渲染问题（ complex UI rendering ）**，所有的它的组件化，虚拟 DOM 和 diff 算法，甚至目前提出的 Fiber、async rendering等等，都是围绕这个中心。\n\n### FLUX\n\n在 2014 年五月左右，也就是距离 react 开源接近一年时间，react 公开了 FLUX 架构。当然，我们现在在学习的过程中，甚至都很难听到 FLUX 这个词汇了，更多的则是 redux 甚至 dva 等更上层的框架，但是目前绝大多数 react 相关的数据管理框架都受到了 FLUX 很大启发。\n\nFLUX 和双向数据绑定的关系，我认为这里有必要援引当初官方写的一点解释（更详细的一些信息，可以看[这篇文章](https://www.10000h.top/react_flux.pdf)）：\n\n```\nTo summarize, Flux works well for us because the single directional data flow makes it easy to understand and modify an application as it becomes more complicated. We found that two-way data bindings lead to cascading updates, where changing one data model led to another data model updating, making it very difficult to predict what would change as the result of a single user interaction.\n\n总而言之，Flux对我们来说效果很好，因为单向数据流可以让应用程序变得更加复杂，从而轻松理解和修改应用程序。我们发现双向数据绑定导致级联更新，其中更改一个数据模型导致另一个数据模型更新，使得很难预测单个用户交互的结果会发生什么变化。\n```\n\n从此之后，下面这张图便多次出现在官方博客和各个网站中，相信我们也肯定见过下图：\n\n![](https://www.10000h.top/images/flux.png)\n\n### react-router\n\n2014年8月，react-router 的雏形发布，在其发布之前，不少示例应用还在使用 backbone\n.js 的 router，而 react-router 的发布，标志着 react 生态的进一步成熟。\n\n### react ES6 Class\n\n实际上，在 2015.01.27 之前，我们都是在使用 `React.createClass`来书写组件。\n\n而在 2015.01.27 这一天，也就是第一届 `reactjs conf` 的前一天，react 官方发布了 React V0.13.0 beta 版本。这一个版本的最大更新就是支持 ES6 的 Class 写法来书写组件，同时也公布了比如 propTypes 类型检查、defaultProps、AutoBind、ref 等一系列相关工作在 ES6 Class 模式下的写法。\n\n这次发布是 react 开源至此最为重大的一次更新，也因此直接将 react 的写法进行了革新，在我看来，这标志着 react 从刀耕火种的原始时代进入了石器时代。\n\n*实际上，直到一个半月后的 03.10 ，V0.13 的正式版本才发布。*\n\n而在之后的 V15.5 版本（2017年4月发布），react 才将`React.createClass`的使用设置为 Deprecation，并且宣布会在将来移除该 API，与此同时，react 团队仍然提供了一个单独的库`create-react-class` 来支持原来的 `React.createClass` 功能。\n\n### Relay & GraphQL\n\n在 2015 年的 2月，Facebook 公布了 GraphQL，GraphQL 是一种新的数据查询解决方案，事实证明，它是非常优秀的一个解决方案，到现在已经基本在行业内人尽皆知。\n\n而 Relay 则是链接 react 和 GraphQL 的一个解决方案，有点类似 redux（但是 stat 数只有 redux 的四分之一左右），但是对 GraphQL 更为友好，并且在缓存机制的设计（按照 Graph 来 cache）、声明式的数据获取等方面，有一些自己的独到之处。\n\n当然，我们使用 redux 配合相关插件，也可以不使用 Relay。\n\n\n### React Native\n\n在第一届 React.js Conf 中，react 团队首次公开了 React Native，并且在3月份真正开源了 React Native（实际上这个时候安卓版本还并不可用），之后在2015年上半年，相关团队陆陆续续披露了关于 React Native 发展情况的更多信息。\n\n并且也是在这个时候（2015年3月），react 团队开始使用 **learn once, write anywhere** 这个如今我们耳熟能详的口号。\n\n### react & react-dom & babel\n\n在2015年七月，官方发布了React v0.14 Beta 1，这也是一个变动比较大的版本，在这个版本中，主要有如下比较大的变化:\n\n* 官方宣布废弃 react-tools 和 JSTransform，这是和 JSX 解析相关的库，而从此 react 开始使用 babel，我认为这对 react 以及其使用者来说无疑是一个利好。\n* 分离 react 和 react-dom，由于 React Native 已经迭代了一段时间，这个分离同时也意味着 react 之后的发展方向，react 本身将会关注抽象层和组件本身，而 react-dom 可以将其在浏览器中落地，React Native 可以将其在客户端中落地，之后也许还会有 react-xxx ...\n\n将 react 和 react-dom 分离之后，react 团队又对 react-dom 在 dom 方面做了较为大量的更新。\n\n### Discontinuing IE 8 Support\n\n在 react V15 的版本中，放弃了对 IE 8 的支持。\n\n\n### Fiber\n\nreact 团队使用 Fiber 架构完成了 react V16 的开发，得益于 Fiber 架构，react 的性能又得到了显著提升（尤其是在某些要求交互连续的场景下），并且包大小缩小了 32%。\n\n到目前来说，关于 Fiber 架构的中英文资料都已经相当丰富，笔者在这里就不进行过多的赘述了。\n\n### 接下来的展望\n\nreact 团队目前的主要工作集中在 async rendering 方面，这方面的改进可以极大提升用户交互体验（特别是在弱网络环境下），会在 2018 年发布。\n\n如果你对这方面的内容很感兴趣，不妨看看 react 之前的[演讲视频](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)\n\n### 附录1 一些你可能不知道的变化\n\n* react并非直接将 JSX 渲染成 DOM，而是对某些事件和属性做了封装（优化）。 react 对表单类型的 DOM 进行了优化，比如封装了较为通用的 onChange 回调函数，这其中需要处理不少问题，react 在 V0.4 即拥有了这一特性，可以参考[这里](https://reactjs.org/blog/2013/07/23/community-roundup-5.html#cross-browser-onchange)\n* 事实上，react 在V0.8之前，一直在以“react-tools”这个名字发布，而 npm 上面叫做 react 的实际上是另外一个包，而到 V0.8 的时候，react 团队和原来的 “react” 包开发者协商，之后 react 便接管了原来的这个包，也因此，react并没有 V0.6 和 V0.7，而是从 V0.5 直接到了 V0.8\n* react 从 V0.14 之后，就直接跳跃到了 V15，官方团队给出的理由是，react 很早就已经足够稳定并且可以使用在生产版本中，更改版本的表达方式更有助于表示 react 项目本身的稳定性。\n\n### 附录2 一些比较优秀的博客\n\n* 关于React Components, Elements, 和 Instances，如果你还有一些疑问，可以看一看React官方团队的文章：[React Components, Elements, and Instances](https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html)\n* 如果你倾向于使用 mixins，不妨看看 react 关于取消 mixin的说法：[Mixins Considered Harmful](https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html)\n* react props 相关的开发模式的建议，我认为目前在使用 react 的程序员都应该了解一下[You Probably Don't Need Derived State](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html)","slug":"一篇关于react历史的流水账","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds0y001qgxy0ne2mns3l","content":"<p>react 目前已经更新到 V16.3，其一路走来，日臻完善，笔者接触 react 两年有余，在这里做一个阶段性的整理，也对 react 的发展和我对 react 的学习做一个整体记录。</p>\n<p>笔者是在 16 年初开始关注 react，而实际上那个时候 react 已经发布快三年了， 16 年初的我写页面还是主要使用 backbone.js、Jquery，并且认为，相比于纯粹使用 Jquery 的“刀耕火种”的时代，使用 backbone.js 已经足够方便并且不需要替代品了。</p>\n<p>这篇文章会从 react 开源之初进行讲起，直到 2018 年六月。</p>\n<h3 id=\"为什么是-react\"><a href=\"#为什么是-react\" class=\"headerlink\" title=\"为什么是 react\"></a>为什么是 react</h3><p>我们知道，react 并不是一个 MVC 框架，也并没有使用传统的前端模版，而是采用了纯 JS 编写（实际上用到了 JSX ），使用了虚拟 DOM，使用 diff 来保证 DOM 的更新效率，并且可以结合 facebook 的 Flux 架构，解决传统 MVC 模式的一些痛点。</p>\n<p>在 react 开源之初，相关生态体系并不完善，甚至官方还在用<code>Backbone.Router</code>加 react 来开发单页面应用。</p>\n<p>但是那个时候的 react，和现在的 react，解决的核心问题都没有变化，那就是<strong>复杂的UI渲染问题（ complex UI rendering ）</strong>，所有的它的组件化，虚拟 DOM 和 diff 算法，甚至目前提出的 Fiber、async rendering等等，都是围绕这个中心。</p>\n<h3 id=\"FLUX\"><a href=\"#FLUX\" class=\"headerlink\" title=\"FLUX\"></a>FLUX</h3><p>在 2014 年五月左右，也就是距离 react 开源接近一年时间，react 公开了 FLUX 架构。当然，我们现在在学习的过程中，甚至都很难听到 FLUX 这个词汇了，更多的则是 redux 甚至 dva 等更上层的框架，但是目前绝大多数 react 相关的数据管理框架都受到了 FLUX 很大启发。</p>\n<p>FLUX 和双向数据绑定的关系，我认为这里有必要援引当初官方写的一点解释（更详细的一些信息，可以看<a href=\"https://www.10000h.top/react_flux.pdf\" target=\"_blank\" rel=\"noopener\">这篇文章</a>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To summarize, Flux works well for us because the single directional data flow makes it easy to understand and modify an application as it becomes more complicated. We found that two-way data bindings lead to cascading updates, where changing one data model led to another data model updating, making it very difficult to predict what would change as the result of a single user interaction.</span><br><span class=\"line\"></span><br><span class=\"line\">总而言之，Flux对我们来说效果很好，因为单向数据流可以让应用程序变得更加复杂，从而轻松理解和修改应用程序。我们发现双向数据绑定导致级联更新，其中更改一个数据模型导致另一个数据模型更新，使得很难预测单个用户交互的结果会发生什么变化。</span><br></pre></td></tr></table></figure>\n<p>从此之后，下面这张图便多次出现在官方博客和各个网站中，相信我们也肯定见过下图：</p>\n<p><img src=\"https://www.10000h.top/images/flux.png\" alt=\"\"></p>\n<h3 id=\"react-router\"><a href=\"#react-router\" class=\"headerlink\" title=\"react-router\"></a>react-router</h3><p>2014年8月，react-router 的雏形发布，在其发布之前，不少示例应用还在使用 backbone<br>.js 的 router，而 react-router 的发布，标志着 react 生态的进一步成熟。</p>\n<h3 id=\"react-ES6-Class\"><a href=\"#react-ES6-Class\" class=\"headerlink\" title=\"react ES6 Class\"></a>react ES6 Class</h3><p>实际上，在 2015.01.27 之前，我们都是在使用 <code>React.createClass</code>来书写组件。</p>\n<p>而在 2015.01.27 这一天，也就是第一届 <code>reactjs conf</code> 的前一天，react 官方发布了 React V0.13.0 beta 版本。这一个版本的最大更新就是支持 ES6 的 Class 写法来书写组件，同时也公布了比如 propTypes 类型检查、defaultProps、AutoBind、ref 等一系列相关工作在 ES6 Class 模式下的写法。</p>\n<p>这次发布是 react 开源至此最为重大的一次更新，也因此直接将 react 的写法进行了革新，在我看来，这标志着 react 从刀耕火种的原始时代进入了石器时代。</p>\n<p><em>实际上，直到一个半月后的 03.10 ，V0.13 的正式版本才发布。</em></p>\n<p>而在之后的 V15.5 版本（2017年4月发布），react 才将<code>React.createClass</code>的使用设置为 Deprecation，并且宣布会在将来移除该 API，与此同时，react 团队仍然提供了一个单独的库<code>create-react-class</code> 来支持原来的 <code>React.createClass</code> 功能。</p>\n<h3 id=\"Relay-amp-GraphQL\"><a href=\"#Relay-amp-GraphQL\" class=\"headerlink\" title=\"Relay &amp; GraphQL\"></a>Relay &amp; GraphQL</h3><p>在 2015 年的 2月，Facebook 公布了 GraphQL，GraphQL 是一种新的数据查询解决方案，事实证明，它是非常优秀的一个解决方案，到现在已经基本在行业内人尽皆知。</p>\n<p>而 Relay 则是链接 react 和 GraphQL 的一个解决方案，有点类似 redux（但是 stat 数只有 redux 的四分之一左右），但是对 GraphQL 更为友好，并且在缓存机制的设计（按照 Graph 来 cache）、声明式的数据获取等方面，有一些自己的独到之处。</p>\n<p>当然，我们使用 redux 配合相关插件，也可以不使用 Relay。</p>\n<h3 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React Native\"></a>React Native</h3><p>在第一届 React.js Conf 中，react 团队首次公开了 React Native，并且在3月份真正开源了 React Native（实际上这个时候安卓版本还并不可用），之后在2015年上半年，相关团队陆陆续续披露了关于 React Native 发展情况的更多信息。</p>\n<p>并且也是在这个时候（2015年3月），react 团队开始使用 <strong>learn once, write anywhere</strong> 这个如今我们耳熟能详的口号。</p>\n<h3 id=\"react-amp-react-dom-amp-babel\"><a href=\"#react-amp-react-dom-amp-babel\" class=\"headerlink\" title=\"react &amp; react-dom &amp; babel\"></a>react &amp; react-dom &amp; babel</h3><p>在2015年七月，官方发布了React v0.14 Beta 1，这也是一个变动比较大的版本，在这个版本中，主要有如下比较大的变化:</p>\n<ul>\n<li>官方宣布废弃 react-tools 和 JSTransform，这是和 JSX 解析相关的库，而从此 react 开始使用 babel，我认为这对 react 以及其使用者来说无疑是一个利好。</li>\n<li>分离 react 和 react-dom，由于 React Native 已经迭代了一段时间，这个分离同时也意味着 react 之后的发展方向，react 本身将会关注抽象层和组件本身，而 react-dom 可以将其在浏览器中落地，React Native 可以将其在客户端中落地，之后也许还会有 react-xxx …</li>\n</ul>\n<p>将 react 和 react-dom 分离之后，react 团队又对 react-dom 在 dom 方面做了较为大量的更新。</p>\n<h3 id=\"Discontinuing-IE-8-Support\"><a href=\"#Discontinuing-IE-8-Support\" class=\"headerlink\" title=\"Discontinuing IE 8 Support\"></a>Discontinuing IE 8 Support</h3><p>在 react V15 的版本中，放弃了对 IE 8 的支持。</p>\n<h3 id=\"Fiber\"><a href=\"#Fiber\" class=\"headerlink\" title=\"Fiber\"></a>Fiber</h3><p>react 团队使用 Fiber 架构完成了 react V16 的开发，得益于 Fiber 架构，react 的性能又得到了显著提升（尤其是在某些要求交互连续的场景下），并且包大小缩小了 32%。</p>\n<p>到目前来说，关于 Fiber 架构的中英文资料都已经相当丰富，笔者在这里就不进行过多的赘述了。</p>\n<h3 id=\"接下来的展望\"><a href=\"#接下来的展望\" class=\"headerlink\" title=\"接下来的展望\"></a>接下来的展望</h3><p>react 团队目前的主要工作集中在 async rendering 方面，这方面的改进可以极大提升用户交互体验（特别是在弱网络环境下），会在 2018 年发布。</p>\n<p>如果你对这方面的内容很感兴趣，不妨看看 react 之前的<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" target=\"_blank\" rel=\"noopener\">演讲视频</a></p>\n<h3 id=\"附录1-一些你可能不知道的变化\"><a href=\"#附录1-一些你可能不知道的变化\" class=\"headerlink\" title=\"附录1 一些你可能不知道的变化\"></a>附录1 一些你可能不知道的变化</h3><ul>\n<li>react并非直接将 JSX 渲染成 DOM，而是对某些事件和属性做了封装（优化）。 react 对表单类型的 DOM 进行了优化，比如封装了较为通用的 onChange 回调函数，这其中需要处理不少问题，react 在 V0.4 即拥有了这一特性，可以参考<a href=\"https://reactjs.org/blog/2013/07/23/community-roundup-5.html#cross-browser-onchange\" target=\"_blank\" rel=\"noopener\">这里</a></li>\n<li>事实上，react 在V0.8之前，一直在以“react-tools”这个名字发布，而 npm 上面叫做 react 的实际上是另外一个包，而到 V0.8 的时候，react 团队和原来的 “react” 包开发者协商，之后 react 便接管了原来的这个包，也因此，react并没有 V0.6 和 V0.7，而是从 V0.5 直接到了 V0.8</li>\n<li>react 从 V0.14 之后，就直接跳跃到了 V15，官方团队给出的理由是，react 很早就已经足够稳定并且可以使用在生产版本中，更改版本的表达方式更有助于表示 react 项目本身的稳定性。</li>\n</ul>\n<h3 id=\"附录2-一些比较优秀的博客\"><a href=\"#附录2-一些比较优秀的博客\" class=\"headerlink\" title=\"附录2 一些比较优秀的博客\"></a>附录2 一些比较优秀的博客</h3><ul>\n<li>关于React Components, Elements, 和 Instances，如果你还有一些疑问，可以看一看React官方团队的文章：<a href=\"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html\" target=\"_blank\" rel=\"noopener\">React Components, Elements, and Instances</a></li>\n<li>如果你倾向于使用 mixins，不妨看看 react 关于取消 mixin的说法：<a href=\"https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html\" target=\"_blank\" rel=\"noopener\">Mixins Considered Harmful</a></li>\n<li>react props 相关的开发模式的建议，我认为目前在使用 react 的程序员都应该了解一下<a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\" target=\"_blank\" rel=\"noopener\">You Probably Don’t Need Derived State</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>react 目前已经更新到 V16.3，其一路走来，日臻完善，笔者接触 react 两年有余，在这里做一个阶段性的整理，也对 react 的发展和我对 react 的学习做一个整体记录。</p>\n<p>笔者是在 16 年初开始关注 react，而实际上那个时候 react 已经发布快三年了， 16 年初的我写页面还是主要使用 backbone.js、Jquery，并且认为，相比于纯粹使用 Jquery 的“刀耕火种”的时代，使用 backbone.js 已经足够方便并且不需要替代品了。</p>\n<p>这篇文章会从 react 开源之初进行讲起，直到 2018 年六月。</p>\n<h3 id=\"为什么是-react\"><a href=\"#为什么是-react\" class=\"headerlink\" title=\"为什么是 react\"></a>为什么是 react</h3><p>我们知道，react 并不是一个 MVC 框架，也并没有使用传统的前端模版，而是采用了纯 JS 编写（实际上用到了 JSX ），使用了虚拟 DOM，使用 diff 来保证 DOM 的更新效率，并且可以结合 facebook 的 Flux 架构，解决传统 MVC 模式的一些痛点。</p>\n<p>在 react 开源之初，相关生态体系并不完善，甚至官方还在用<code>Backbone.Router</code>加 react 来开发单页面应用。</p>\n<p>但是那个时候的 react，和现在的 react，解决的核心问题都没有变化，那就是<strong>复杂的UI渲染问题（ complex UI rendering ）</strong>，所有的它的组件化，虚拟 DOM 和 diff 算法，甚至目前提出的 Fiber、async rendering等等，都是围绕这个中心。</p>\n<h3 id=\"FLUX\"><a href=\"#FLUX\" class=\"headerlink\" title=\"FLUX\"></a>FLUX</h3><p>在 2014 年五月左右，也就是距离 react 开源接近一年时间，react 公开了 FLUX 架构。当然，我们现在在学习的过程中，甚至都很难听到 FLUX 这个词汇了，更多的则是 redux 甚至 dva 等更上层的框架，但是目前绝大多数 react 相关的数据管理框架都受到了 FLUX 很大启发。</p>\n<p>FLUX 和双向数据绑定的关系，我认为这里有必要援引当初官方写的一点解释（更详细的一些信息，可以看<a href=\"https://www.10000h.top/react_flux.pdf\" target=\"_blank\" rel=\"noopener\">这篇文章</a>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To summarize, Flux works well for us because the single directional data flow makes it easy to understand and modify an application as it becomes more complicated. We found that two-way data bindings lead to cascading updates, where changing one data model led to another data model updating, making it very difficult to predict what would change as the result of a single user interaction.</span><br><span class=\"line\"></span><br><span class=\"line\">总而言之，Flux对我们来说效果很好，因为单向数据流可以让应用程序变得更加复杂，从而轻松理解和修改应用程序。我们发现双向数据绑定导致级联更新，其中更改一个数据模型导致另一个数据模型更新，使得很难预测单个用户交互的结果会发生什么变化。</span><br></pre></td></tr></table></figure>\n<p>从此之后，下面这张图便多次出现在官方博客和各个网站中，相信我们也肯定见过下图：</p>\n<p><img src=\"https://www.10000h.top/images/flux.png\" alt=\"\"></p>\n<h3 id=\"react-router\"><a href=\"#react-router\" class=\"headerlink\" title=\"react-router\"></a>react-router</h3><p>2014年8月，react-router 的雏形发布，在其发布之前，不少示例应用还在使用 backbone<br>.js 的 router，而 react-router 的发布，标志着 react 生态的进一步成熟。</p>\n<h3 id=\"react-ES6-Class\"><a href=\"#react-ES6-Class\" class=\"headerlink\" title=\"react ES6 Class\"></a>react ES6 Class</h3><p>实际上，在 2015.01.27 之前，我们都是在使用 <code>React.createClass</code>来书写组件。</p>\n<p>而在 2015.01.27 这一天，也就是第一届 <code>reactjs conf</code> 的前一天，react 官方发布了 React V0.13.0 beta 版本。这一个版本的最大更新就是支持 ES6 的 Class 写法来书写组件，同时也公布了比如 propTypes 类型检查、defaultProps、AutoBind、ref 等一系列相关工作在 ES6 Class 模式下的写法。</p>\n<p>这次发布是 react 开源至此最为重大的一次更新，也因此直接将 react 的写法进行了革新，在我看来，这标志着 react 从刀耕火种的原始时代进入了石器时代。</p>\n<p><em>实际上，直到一个半月后的 03.10 ，V0.13 的正式版本才发布。</em></p>\n<p>而在之后的 V15.5 版本（2017年4月发布），react 才将<code>React.createClass</code>的使用设置为 Deprecation，并且宣布会在将来移除该 API，与此同时，react 团队仍然提供了一个单独的库<code>create-react-class</code> 来支持原来的 <code>React.createClass</code> 功能。</p>\n<h3 id=\"Relay-amp-GraphQL\"><a href=\"#Relay-amp-GraphQL\" class=\"headerlink\" title=\"Relay &amp; GraphQL\"></a>Relay &amp; GraphQL</h3><p>在 2015 年的 2月，Facebook 公布了 GraphQL，GraphQL 是一种新的数据查询解决方案，事实证明，它是非常优秀的一个解决方案，到现在已经基本在行业内人尽皆知。</p>\n<p>而 Relay 则是链接 react 和 GraphQL 的一个解决方案，有点类似 redux（但是 stat 数只有 redux 的四分之一左右），但是对 GraphQL 更为友好，并且在缓存机制的设计（按照 Graph 来 cache）、声明式的数据获取等方面，有一些自己的独到之处。</p>\n<p>当然，我们使用 redux 配合相关插件，也可以不使用 Relay。</p>\n<h3 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React Native\"></a>React Native</h3><p>在第一届 React.js Conf 中，react 团队首次公开了 React Native，并且在3月份真正开源了 React Native（实际上这个时候安卓版本还并不可用），之后在2015年上半年，相关团队陆陆续续披露了关于 React Native 发展情况的更多信息。</p>\n<p>并且也是在这个时候（2015年3月），react 团队开始使用 <strong>learn once, write anywhere</strong> 这个如今我们耳熟能详的口号。</p>\n<h3 id=\"react-amp-react-dom-amp-babel\"><a href=\"#react-amp-react-dom-amp-babel\" class=\"headerlink\" title=\"react &amp; react-dom &amp; babel\"></a>react &amp; react-dom &amp; babel</h3><p>在2015年七月，官方发布了React v0.14 Beta 1，这也是一个变动比较大的版本，在这个版本中，主要有如下比较大的变化:</p>\n<ul>\n<li>官方宣布废弃 react-tools 和 JSTransform，这是和 JSX 解析相关的库，而从此 react 开始使用 babel，我认为这对 react 以及其使用者来说无疑是一个利好。</li>\n<li>分离 react 和 react-dom，由于 React Native 已经迭代了一段时间，这个分离同时也意味着 react 之后的发展方向，react 本身将会关注抽象层和组件本身，而 react-dom 可以将其在浏览器中落地，React Native 可以将其在客户端中落地，之后也许还会有 react-xxx …</li>\n</ul>\n<p>将 react 和 react-dom 分离之后，react 团队又对 react-dom 在 dom 方面做了较为大量的更新。</p>\n<h3 id=\"Discontinuing-IE-8-Support\"><a href=\"#Discontinuing-IE-8-Support\" class=\"headerlink\" title=\"Discontinuing IE 8 Support\"></a>Discontinuing IE 8 Support</h3><p>在 react V15 的版本中，放弃了对 IE 8 的支持。</p>\n<h3 id=\"Fiber\"><a href=\"#Fiber\" class=\"headerlink\" title=\"Fiber\"></a>Fiber</h3><p>react 团队使用 Fiber 架构完成了 react V16 的开发，得益于 Fiber 架构，react 的性能又得到了显著提升（尤其是在某些要求交互连续的场景下），并且包大小缩小了 32%。</p>\n<p>到目前来说，关于 Fiber 架构的中英文资料都已经相当丰富，笔者在这里就不进行过多的赘述了。</p>\n<h3 id=\"接下来的展望\"><a href=\"#接下来的展望\" class=\"headerlink\" title=\"接下来的展望\"></a>接下来的展望</h3><p>react 团队目前的主要工作集中在 async rendering 方面，这方面的改进可以极大提升用户交互体验（特别是在弱网络环境下），会在 2018 年发布。</p>\n<p>如果你对这方面的内容很感兴趣，不妨看看 react 之前的<a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\" target=\"_blank\" rel=\"noopener\">演讲视频</a></p>\n<h3 id=\"附录1-一些你可能不知道的变化\"><a href=\"#附录1-一些你可能不知道的变化\" class=\"headerlink\" title=\"附录1 一些你可能不知道的变化\"></a>附录1 一些你可能不知道的变化</h3><ul>\n<li>react并非直接将 JSX 渲染成 DOM，而是对某些事件和属性做了封装（优化）。 react 对表单类型的 DOM 进行了优化，比如封装了较为通用的 onChange 回调函数，这其中需要处理不少问题，react 在 V0.4 即拥有了这一特性，可以参考<a href=\"https://reactjs.org/blog/2013/07/23/community-roundup-5.html#cross-browser-onchange\" target=\"_blank\" rel=\"noopener\">这里</a></li>\n<li>事实上，react 在V0.8之前，一直在以“react-tools”这个名字发布，而 npm 上面叫做 react 的实际上是另外一个包，而到 V0.8 的时候，react 团队和原来的 “react” 包开发者协商，之后 react 便接管了原来的这个包，也因此，react并没有 V0.6 和 V0.7，而是从 V0.5 直接到了 V0.8</li>\n<li>react 从 V0.14 之后，就直接跳跃到了 V15，官方团队给出的理由是，react 很早就已经足够稳定并且可以使用在生产版本中，更改版本的表达方式更有助于表示 react 项目本身的稳定性。</li>\n</ul>\n<h3 id=\"附录2-一些比较优秀的博客\"><a href=\"#附录2-一些比较优秀的博客\" class=\"headerlink\" title=\"附录2 一些比较优秀的博客\"></a>附录2 一些比较优秀的博客</h3><ul>\n<li>关于React Components, Elements, 和 Instances，如果你还有一些疑问，可以看一看React官方团队的文章：<a href=\"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html\" target=\"_blank\" rel=\"noopener\">React Components, Elements, and Instances</a></li>\n<li>如果你倾向于使用 mixins，不妨看看 react 关于取消 mixin的说法：<a href=\"https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html\" target=\"_blank\" rel=\"noopener\">Mixins Considered Harmful</a></li>\n<li>react props 相关的开发模式的建议，我认为目前在使用 react 的程序员都应该了解一下<a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\" target=\"_blank\" rel=\"noopener\">You Probably Don’t Need Derived State</a></li>\n</ul>\n"},{"title":"构建利用Proxy和Reflect实现双向数据绑定的微框架","date":"2018-04-09T05:40:44.000Z","_content":">写在前面：这篇文章讲述了如何利用Proxy和Reflect实现双向数据绑定，个人系Vue早期玩家，写这个小框架的时候也没有参考Vue等源代码，之前了解过其他实现，但没有直接参考其他代码，如有雷同，纯属巧合。\n\n代码下载地址：[这里下载](https://github.com/aircloud/Polar.js)\n\n### 综述\n\n*关于Proxy和Reflect的资料推荐阮老师的教程:http://es6.ruanyifeng.com/ 这里不做过多介绍。*\n\n实现双向数据绑定的方法有很多，也可以参考本专栏之前的其他实现，我之所以选择用Proxy和Reflect，一方面是因为可以大量节约代码，并且简化逻辑，可以让我把更多的经历放在其他内容的构建上面，另外一方面本项目直接基于ES6，用这些内容也符合面向未来的JS编程规范，第三点最后说。\n\n由于这个小框架是自己在PolarBear这个咖啡馆在一个安静的午后开始写成，暂且起名Polar，日后希望我能继续完善这个小框架，给添加上更多有趣的功能。\n\n首先我们可以看整体功能演示：  \n[一个gif动图，如果不能看，请点击[这里的链接](https://www.10000h.top/images/data_img/gif1.gif)]\n\n![](https://www.10000h.top/images/data_img/gif1.gif)\n\n### 代码分析\n\n我们要做这样一个小框架，核心是要监听数据的改变，并且在数据的改变的时候进行一些操作，从而维持数据的一致。\n\n我的思路是这样的：\n\n* 将所有的数据信息放在一个属性对象中(this._data),之后给这个属性对象用Proxy包装set,在代理函数中我们更新属性对象的具体内容，同时通知所有监听者，之后返回新的代理对象(this.data)，我们之后操作的都是新的代理对象。\n* 对于input等表单，我们需要监听input事件，在回调函数中直接设置我们代理好的数据对象，从而触发我们的代理函数。\n* 我们同时也应该支持事件机制，这里我们以最常用的click方法作为例子实现。\n\n下面开始第一部分，我们希望我们之后使用这个库的时候可以这样调用:\n\n```\n<div id=\"app\">\n    <form>\n        <label>name:</label>\n        <input p-model = \"name\" />\n    </form>\n    <div>name:{{name}} age:{{age}}</div>\n    <i>note:{{note}}</i><br/>\n    <button p-click=\"test(2)\">button1</button>\n</div>\n<script>\n var myPolar = new Polar({\n        el:\"#app\",\n        data: {\n            name: \"niexiaotao\",\n            age:16,\n            note:\"Student of Zhejiang University\"\n        },\n        methods:{\n            test:function(e,addNumber){\n                console.log(\"e:\",e);\n                this.data.age+=Number(addNumber);\n            }\n        }\n});\n</script>\n```\n\n没错，和Vue神似吧，所以这种调用方式应当为我们所熟悉。\n\n我们需要建立一个Polar类，这个类的构造函数应该进行一些初始化操作:\n\n```\n constructor(configs){\n        this.root = this.el = document.querySelector(configs.el);\n        this._data = configs.data;\n        this._data.__bindings = {};\n        //创建代理对象\n        this.data = new Proxy(this._data, {set});\n        this.methods = configs.methods;\n\n        this._compile(this.root);\n}\n```\n\n这里面的一部份内容是直接将我们传入的configs按照属性分别赋值，另外就是我们创建代理对象的过程，最后的`_compile`方法可以理解为一个私有的初始化方法。\n\n实际上我把剩下的内容几乎都放在`_compile`方法里面了，这样理解起来方便，但是之后可能要改动。\n\n我们还是先不能看我们代理的set该怎么写，因为这个时候我们还要先继续梳理思路：\n\n假设我们这样`<div>name:{{name}}</div>`将数据绑定到dom节点，这个时候我们需要做什么呢，或者说，我们通过什么方式让dom节点和数据对应起来，随着数据改变而改变。\n\n看上文的`__bindings`。这个对象用来存储所有绑定的dom节点信息，`__bindings`本身是一个对象，每一个有对应dom节点绑定的数据名称都是它的属性，对应一个数组，数组中的每一个内容都是一个绑定信息，这样，我们在自己写的set代理函数中，我们一个个调用过去，就可以更新内容了：\n\n```\ndataSet.__bindings[key].forEach(function(item){\n       //do something to update...\n});\n```\n\n我这里创建了一个用于构造调用的函数，这个函数用于创建存储绑定信息的对象：\n\n```\nfunction Directive(el,polar,attr,elementValue){\n    this.el=el;//元素本身dom节点\n    this.polar = polar;//对应的polar实例\n    this.attr = attr;//元素的被绑定的属性值，比如如果是文本节点就可以是nodeValue\n    this.el[this.attr] = this.elementValue = elementValue;//初始化\n}\n```\n\n这样，我们的set可以这样写:\n\n```\nfunction set(target, key, value, receiver) {\n    const result = Reflect.set(target, key, value, receiver);\n    var dataSet = receiver || target;\n    dataSet.__bindings[key].forEach(function(item){\n        item.el[item.attr] = item.elementValue = value;\n    });\n    return result;\n}\n```\n\n接下来可能还有一个问题：我们的`{{name}}`实际上只是节点的一部分，这并不是节点啊，另外我们是不是还可以这么写：`<div>name:{{name}} age:{{age}}</div>`？\n\n关于这两个问题，前者的答案是我们将`{{name}}`替换成一个文本节点，而为了应对后者的情况，我们需要将两个被绑定数据中间和前后的内容，都变成新的文本节点，然后这些文本节点组成文本节点串。(这里多说一句，html5的normalize方法可以将多个文本节点合并成一个，如果不小心调用了它，那我们的程序就要GG了)\n\n所以我们在`_compile`函数首先：\n\n```\nvar _this = this;\n\n        var nodes = root.children;\n\n        var bindDataTester = new RegExp(\"{{(.*?)}}\",\"ig\");\n\n        for(let i=0;i<nodes.length;i++){\n            var node=nodes[i];\n\n            //如果还有html字节点，则递归\n            if(node.children.length){\n                this._compile(node);\n            }\n\n            var matches = node.innerHTML.match(bindDataTester);\n            if(matches){\n                var newMatches = matches.map(function (item) {\n                    return  item.replace(/{{(.*?)}}/,\"$1\")\n                });\n                var splitTextNodes  = node.innerHTML.split(/{{.*?}}/);\n                node.innerHTML=null;\n                //更新DOM，处理同一个textnode里面多次绑定情况\n                if(splitTextNodes[0]){\n                    node.append(document.createTextNode(splitTextNodes[0]));\n                }\n                for(let ii=0;ii<newMatches.length;ii++){\n                    var el = document.createTextNode('');\n                    node.appendChild(el);\n                    if(splitTextNodes[ii+1]){\n                        node.append(document.createTextNode(splitTextNodes[ii+1]));\n                    }\n                //对数据和dom进行绑定\n                let returnCode = !this._data.__bindings[newMatches[ii]]?\n                    this._data.__bindings[newMatches[ii]] = [new Directive(el,this,\"nodeValue\",this.data[newMatches[ii]])]\n                    :this._data.__bindings[newMatches[ii]].push(new Directive(el,this,\"nodeValue\",this.data[newMatches[ii]]))\n                }\n            }\n\n```\n\n这样，我们的数据绑定阶段就写好了，接下来，我们处理`<input p-model = \"name\" />`这样的情况。\n\n这实际上是一个指令，我们只需要当识别到这一个指令的时候，做一些处理，即可：\n\n```\nif(node.hasAttribute((\"p-model\"))\n                && node.tagName.toLocaleUpperCase()==\"INPUT\" || node.tagName.toLocaleUpperCase()==\"TEXTAREA\"){\n                node.addEventListener(\"input\", (function () {\n\n                    var attributeValue = node.getAttribute(\"p-model\");\n\n                    if(_this._data.__bindings[attributeValue]) _this._data.__bindings[attributeValue].push(new Directive(node,_this,\"value\",_this.data[attributeValue])) ;\n                    else _this._data.__bindings[attributeValue] = [new Directive(node,_this,\"value\",_this.data[attributeValue])];\n\n                    return function (event) {\n                        _this.data[attributeValue]=event.target.value\n                    }\n                })());\n}\n```\n\n请注意，上面调用了一个`IIFE`，实际绑定的函数只有返回的函数那一小部分。\n\n最后我们处理事件的情况：`<button p-click=\"test(2)\">button1</button>`\n\n实际上这比处理`p-model`还简单，但是我们为了支持函数参数的情况，处理了一下传入参数，另外我实际上将`event`始终作为一个参数传递，这也许并不是好的实践，因为使用的时候还要多注意。\n\n```\nif(node.hasAttribute(\"p-click\")) {\n                node.addEventListener(\"click\",function(){\n                    var attributeValue=node.getAttribute(\"p-click\");\n                    var args=/\\(.*\\)/.exec(attributeValue);\n                    //允许参数\n                    if(args) {\n                        args=args[0];\n                        attributeValue=attributeValue.replace(args,\"\");\n                        args=args.replace(/[\\(\\)\\'\\\"]/g,'').split(\",\");\n                    }\n                    else args=[];\n                    return function (event) {\n                        _this.methods[attributeValue].apply(_this,[event,...args]);\n                    }\n                }());\n}\n```\n\n现在我们已经将所有的代码分析完了，是不是很清爽？代码除去注释约100行，所有源代码可以在[这里下载](https://github.com/aircloud/Polar.js)。这当然不能算作一个框架了，不过可以学习学习，这学期有时间的话，还要继续完善，也欢迎大家一起探讨。\n\n一起学习，一起提高，做技术应当是直接的，有问题欢迎指出～\n\n---\n\n\n最后说的第三点：是自己还是一个学生，做这些内容也仅仅是出于兴趣，因为找暑期实习比较艰难，在等待鹅厂面试间隙写的这个程序，压压惊(然而并没有消息)。","source":"_posts/构建利用Proxy和Reflect实现双向数据绑定的微框架.md","raw":"---\ntitle: 构建利用Proxy和Reflect实现双向数据绑定的微框架\ndate: 2018-04-09 14:40:44\ntags:\n    - MVVM\n---\n>写在前面：这篇文章讲述了如何利用Proxy和Reflect实现双向数据绑定，个人系Vue早期玩家，写这个小框架的时候也没有参考Vue等源代码，之前了解过其他实现，但没有直接参考其他代码，如有雷同，纯属巧合。\n\n代码下载地址：[这里下载](https://github.com/aircloud/Polar.js)\n\n### 综述\n\n*关于Proxy和Reflect的资料推荐阮老师的教程:http://es6.ruanyifeng.com/ 这里不做过多介绍。*\n\n实现双向数据绑定的方法有很多，也可以参考本专栏之前的其他实现，我之所以选择用Proxy和Reflect，一方面是因为可以大量节约代码，并且简化逻辑，可以让我把更多的经历放在其他内容的构建上面，另外一方面本项目直接基于ES6，用这些内容也符合面向未来的JS编程规范，第三点最后说。\n\n由于这个小框架是自己在PolarBear这个咖啡馆在一个安静的午后开始写成，暂且起名Polar，日后希望我能继续完善这个小框架，给添加上更多有趣的功能。\n\n首先我们可以看整体功能演示：  \n[一个gif动图，如果不能看，请点击[这里的链接](https://www.10000h.top/images/data_img/gif1.gif)]\n\n![](https://www.10000h.top/images/data_img/gif1.gif)\n\n### 代码分析\n\n我们要做这样一个小框架，核心是要监听数据的改变，并且在数据的改变的时候进行一些操作，从而维持数据的一致。\n\n我的思路是这样的：\n\n* 将所有的数据信息放在一个属性对象中(this._data),之后给这个属性对象用Proxy包装set,在代理函数中我们更新属性对象的具体内容，同时通知所有监听者，之后返回新的代理对象(this.data)，我们之后操作的都是新的代理对象。\n* 对于input等表单，我们需要监听input事件，在回调函数中直接设置我们代理好的数据对象，从而触发我们的代理函数。\n* 我们同时也应该支持事件机制，这里我们以最常用的click方法作为例子实现。\n\n下面开始第一部分，我们希望我们之后使用这个库的时候可以这样调用:\n\n```\n<div id=\"app\">\n    <form>\n        <label>name:</label>\n        <input p-model = \"name\" />\n    </form>\n    <div>name:{{name}} age:{{age}}</div>\n    <i>note:{{note}}</i><br/>\n    <button p-click=\"test(2)\">button1</button>\n</div>\n<script>\n var myPolar = new Polar({\n        el:\"#app\",\n        data: {\n            name: \"niexiaotao\",\n            age:16,\n            note:\"Student of Zhejiang University\"\n        },\n        methods:{\n            test:function(e,addNumber){\n                console.log(\"e:\",e);\n                this.data.age+=Number(addNumber);\n            }\n        }\n});\n</script>\n```\n\n没错，和Vue神似吧，所以这种调用方式应当为我们所熟悉。\n\n我们需要建立一个Polar类，这个类的构造函数应该进行一些初始化操作:\n\n```\n constructor(configs){\n        this.root = this.el = document.querySelector(configs.el);\n        this._data = configs.data;\n        this._data.__bindings = {};\n        //创建代理对象\n        this.data = new Proxy(this._data, {set});\n        this.methods = configs.methods;\n\n        this._compile(this.root);\n}\n```\n\n这里面的一部份内容是直接将我们传入的configs按照属性分别赋值，另外就是我们创建代理对象的过程，最后的`_compile`方法可以理解为一个私有的初始化方法。\n\n实际上我把剩下的内容几乎都放在`_compile`方法里面了，这样理解起来方便，但是之后可能要改动。\n\n我们还是先不能看我们代理的set该怎么写，因为这个时候我们还要先继续梳理思路：\n\n假设我们这样`<div>name:{{name}}</div>`将数据绑定到dom节点，这个时候我们需要做什么呢，或者说，我们通过什么方式让dom节点和数据对应起来，随着数据改变而改变。\n\n看上文的`__bindings`。这个对象用来存储所有绑定的dom节点信息，`__bindings`本身是一个对象，每一个有对应dom节点绑定的数据名称都是它的属性，对应一个数组，数组中的每一个内容都是一个绑定信息，这样，我们在自己写的set代理函数中，我们一个个调用过去，就可以更新内容了：\n\n```\ndataSet.__bindings[key].forEach(function(item){\n       //do something to update...\n});\n```\n\n我这里创建了一个用于构造调用的函数，这个函数用于创建存储绑定信息的对象：\n\n```\nfunction Directive(el,polar,attr,elementValue){\n    this.el=el;//元素本身dom节点\n    this.polar = polar;//对应的polar实例\n    this.attr = attr;//元素的被绑定的属性值，比如如果是文本节点就可以是nodeValue\n    this.el[this.attr] = this.elementValue = elementValue;//初始化\n}\n```\n\n这样，我们的set可以这样写:\n\n```\nfunction set(target, key, value, receiver) {\n    const result = Reflect.set(target, key, value, receiver);\n    var dataSet = receiver || target;\n    dataSet.__bindings[key].forEach(function(item){\n        item.el[item.attr] = item.elementValue = value;\n    });\n    return result;\n}\n```\n\n接下来可能还有一个问题：我们的`{{name}}`实际上只是节点的一部分，这并不是节点啊，另外我们是不是还可以这么写：`<div>name:{{name}} age:{{age}}</div>`？\n\n关于这两个问题，前者的答案是我们将`{{name}}`替换成一个文本节点，而为了应对后者的情况，我们需要将两个被绑定数据中间和前后的内容，都变成新的文本节点，然后这些文本节点组成文本节点串。(这里多说一句，html5的normalize方法可以将多个文本节点合并成一个，如果不小心调用了它，那我们的程序就要GG了)\n\n所以我们在`_compile`函数首先：\n\n```\nvar _this = this;\n\n        var nodes = root.children;\n\n        var bindDataTester = new RegExp(\"{{(.*?)}}\",\"ig\");\n\n        for(let i=0;i<nodes.length;i++){\n            var node=nodes[i];\n\n            //如果还有html字节点，则递归\n            if(node.children.length){\n                this._compile(node);\n            }\n\n            var matches = node.innerHTML.match(bindDataTester);\n            if(matches){\n                var newMatches = matches.map(function (item) {\n                    return  item.replace(/{{(.*?)}}/,\"$1\")\n                });\n                var splitTextNodes  = node.innerHTML.split(/{{.*?}}/);\n                node.innerHTML=null;\n                //更新DOM，处理同一个textnode里面多次绑定情况\n                if(splitTextNodes[0]){\n                    node.append(document.createTextNode(splitTextNodes[0]));\n                }\n                for(let ii=0;ii<newMatches.length;ii++){\n                    var el = document.createTextNode('');\n                    node.appendChild(el);\n                    if(splitTextNodes[ii+1]){\n                        node.append(document.createTextNode(splitTextNodes[ii+1]));\n                    }\n                //对数据和dom进行绑定\n                let returnCode = !this._data.__bindings[newMatches[ii]]?\n                    this._data.__bindings[newMatches[ii]] = [new Directive(el,this,\"nodeValue\",this.data[newMatches[ii]])]\n                    :this._data.__bindings[newMatches[ii]].push(new Directive(el,this,\"nodeValue\",this.data[newMatches[ii]]))\n                }\n            }\n\n```\n\n这样，我们的数据绑定阶段就写好了，接下来，我们处理`<input p-model = \"name\" />`这样的情况。\n\n这实际上是一个指令，我们只需要当识别到这一个指令的时候，做一些处理，即可：\n\n```\nif(node.hasAttribute((\"p-model\"))\n                && node.tagName.toLocaleUpperCase()==\"INPUT\" || node.tagName.toLocaleUpperCase()==\"TEXTAREA\"){\n                node.addEventListener(\"input\", (function () {\n\n                    var attributeValue = node.getAttribute(\"p-model\");\n\n                    if(_this._data.__bindings[attributeValue]) _this._data.__bindings[attributeValue].push(new Directive(node,_this,\"value\",_this.data[attributeValue])) ;\n                    else _this._data.__bindings[attributeValue] = [new Directive(node,_this,\"value\",_this.data[attributeValue])];\n\n                    return function (event) {\n                        _this.data[attributeValue]=event.target.value\n                    }\n                })());\n}\n```\n\n请注意，上面调用了一个`IIFE`，实际绑定的函数只有返回的函数那一小部分。\n\n最后我们处理事件的情况：`<button p-click=\"test(2)\">button1</button>`\n\n实际上这比处理`p-model`还简单，但是我们为了支持函数参数的情况，处理了一下传入参数，另外我实际上将`event`始终作为一个参数传递，这也许并不是好的实践，因为使用的时候还要多注意。\n\n```\nif(node.hasAttribute(\"p-click\")) {\n                node.addEventListener(\"click\",function(){\n                    var attributeValue=node.getAttribute(\"p-click\");\n                    var args=/\\(.*\\)/.exec(attributeValue);\n                    //允许参数\n                    if(args) {\n                        args=args[0];\n                        attributeValue=attributeValue.replace(args,\"\");\n                        args=args.replace(/[\\(\\)\\'\\\"]/g,'').split(\",\");\n                    }\n                    else args=[];\n                    return function (event) {\n                        _this.methods[attributeValue].apply(_this,[event,...args]);\n                    }\n                }());\n}\n```\n\n现在我们已经将所有的代码分析完了，是不是很清爽？代码除去注释约100行，所有源代码可以在[这里下载](https://github.com/aircloud/Polar.js)。这当然不能算作一个框架了，不过可以学习学习，这学期有时间的话，还要继续完善，也欢迎大家一起探讨。\n\n一起学习，一起提高，做技术应当是直接的，有问题欢迎指出～\n\n---\n\n\n最后说的第三点：是自己还是一个学生，做这些内容也仅仅是出于兴趣，因为找暑期实习比较艰难，在等待鹅厂面试间隙写的这个程序，压压惊(然而并没有消息)。","slug":"构建利用Proxy和Reflect实现双向数据绑定的微框架","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds0z001rgxy00fo0s45g","content":"<blockquote>\n<p>写在前面：这篇文章讲述了如何利用Proxy和Reflect实现双向数据绑定，个人系Vue早期玩家，写这个小框架的时候也没有参考Vue等源代码，之前了解过其他实现，但没有直接参考其他代码，如有雷同，纯属巧合。</p>\n</blockquote>\n<p>代码下载地址：<a href=\"https://github.com/aircloud/Polar.js\" target=\"_blank\" rel=\"noopener\">这里下载</a></p>\n<h3 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h3><p><em>关于Proxy和Reflect的资料推荐阮老师的教程:<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a> 这里不做过多介绍。</em></p>\n<p>实现双向数据绑定的方法有很多，也可以参考本专栏之前的其他实现，我之所以选择用Proxy和Reflect，一方面是因为可以大量节约代码，并且简化逻辑，可以让我把更多的经历放在其他内容的构建上面，另外一方面本项目直接基于ES6，用这些内容也符合面向未来的JS编程规范，第三点最后说。</p>\n<p>由于这个小框架是自己在PolarBear这个咖啡馆在一个安静的午后开始写成，暂且起名Polar，日后希望我能继续完善这个小框架，给添加上更多有趣的功能。</p>\n<p>首先我们可以看整体功能演示：<br>[一个gif动图，如果不能看，请点击<a href=\"https://www.10000h.top/images/data_img/gif1.gif\" target=\"_blank\" rel=\"noopener\">这里的链接</a>]</p>\n<p><img src=\"https://www.10000h.top/images/data_img/gif1.gif\" alt=\"\"></p>\n<h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><p>我们要做这样一个小框架，核心是要监听数据的改变，并且在数据的改变的时候进行一些操作，从而维持数据的一致。</p>\n<p>我的思路是这样的：</p>\n<ul>\n<li>将所有的数据信息放在一个属性对象中(this._data),之后给这个属性对象用Proxy包装set,在代理函数中我们更新属性对象的具体内容，同时通知所有监听者，之后返回新的代理对象(this.data)，我们之后操作的都是新的代理对象。</li>\n<li>对于input等表单，我们需要监听input事件，在回调函数中直接设置我们代理好的数据对象，从而触发我们的代理函数。</li>\n<li>我们同时也应该支持事件机制，这里我们以最常用的click方法作为例子实现。</li>\n</ul>\n<p>下面开始第一部分，我们希望我们之后使用这个库的时候可以这样调用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;form&gt;</span><br><span class=\"line\">        &lt;label&gt;name:&lt;/label&gt;</span><br><span class=\"line\">        &lt;input p-model = &quot;name&quot; /&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">    &lt;div&gt;name:&#123;&#123;name&#125;&#125; age:&#123;&#123;age&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;i&gt;note:&#123;&#123;note&#125;&#125;&lt;/i&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;button p-click=&quot;test(2)&quot;&gt;button1&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> var myPolar = new Polar(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            name: &quot;niexiaotao&quot;,</span><br><span class=\"line\">            age:16,</span><br><span class=\"line\">            note:&quot;Student of Zhejiang University&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            test:function(e,addNumber)&#123;</span><br><span class=\"line\">                console.log(&quot;e:&quot;,e);</span><br><span class=\"line\">                this.data.age+=Number(addNumber);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>没错，和Vue神似吧，所以这种调用方式应当为我们所熟悉。</p>\n<p>我们需要建立一个Polar类，这个类的构造函数应该进行一些初始化操作:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> constructor(configs)&#123;</span><br><span class=\"line\">        this.root = this.el = document.querySelector(configs.el);</span><br><span class=\"line\">        this._data = configs.data;</span><br><span class=\"line\">        this._data.__bindings = &#123;&#125;;</span><br><span class=\"line\">        //创建代理对象</span><br><span class=\"line\">        this.data = new Proxy(this._data, &#123;set&#125;);</span><br><span class=\"line\">        this.methods = configs.methods;</span><br><span class=\"line\"></span><br><span class=\"line\">        this._compile(this.root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面的一部份内容是直接将我们传入的configs按照属性分别赋值，另外就是我们创建代理对象的过程，最后的<code>_compile</code>方法可以理解为一个私有的初始化方法。</p>\n<p>实际上我把剩下的内容几乎都放在<code>_compile</code>方法里面了，这样理解起来方便，但是之后可能要改动。</p>\n<p>我们还是先不能看我们代理的set该怎么写，因为这个时候我们还要先继续梳理思路：</p>\n<p>假设我们这样<code>&lt;div&gt;name:&lt;/div&gt;</code>将数据绑定到dom节点，这个时候我们需要做什么呢，或者说，我们通过什么方式让dom节点和数据对应起来，随着数据改变而改变。</p>\n<p>看上文的<code>__bindings</code>。这个对象用来存储所有绑定的dom节点信息，<code>__bindings</code>本身是一个对象，每一个有对应dom节点绑定的数据名称都是它的属性，对应一个数组，数组中的每一个内容都是一个绑定信息，这样，我们在自己写的set代理函数中，我们一个个调用过去，就可以更新内容了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet.__bindings[key].forEach(function(item)&#123;</span><br><span class=\"line\">       //do something to update...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我这里创建了一个用于构造调用的函数，这个函数用于创建存储绑定信息的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Directive(el,polar,attr,elementValue)&#123;</span><br><span class=\"line\">    this.el=el;//元素本身dom节点</span><br><span class=\"line\">    this.polar = polar;//对应的polar实例</span><br><span class=\"line\">    this.attr = attr;//元素的被绑定的属性值，比如如果是文本节点就可以是nodeValue</span><br><span class=\"line\">    this.el[this.attr] = this.elementValue = elementValue;//初始化</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们的set可以这样写:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function set(target, key, value, receiver) &#123;</span><br><span class=\"line\">    const result = Reflect.set(target, key, value, receiver);</span><br><span class=\"line\">    var dataSet = receiver || target;</span><br><span class=\"line\">    dataSet.__bindings[key].forEach(function(item)&#123;</span><br><span class=\"line\">        item.el[item.attr] = item.elementValue = value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来可能还有一个问题：我们的<code></code>实际上只是节点的一部分，这并不是节点啊，另外我们是不是还可以这么写：<code>&lt;div&gt;name: age:&lt;/div&gt;</code>？</p>\n<p>关于这两个问题，前者的答案是我们将<code></code>替换成一个文本节点，而为了应对后者的情况，我们需要将两个被绑定数据中间和前后的内容，都变成新的文本节点，然后这些文本节点组成文本节点串。(这里多说一句，html5的normalize方法可以将多个文本节点合并成一个，如果不小心调用了它，那我们的程序就要GG了)</p>\n<p>所以我们在<code>_compile</code>函数首先：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _this = this;</span><br><span class=\"line\"></span><br><span class=\"line\">        var nodes = root.children;</span><br><span class=\"line\"></span><br><span class=\"line\">        var bindDataTester = new RegExp(&quot;&#123;&#123;(.*?)&#125;&#125;&quot;,&quot;ig&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        for(let i=0;i&lt;nodes.length;i++)&#123;</span><br><span class=\"line\">            var node=nodes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            //如果还有html字节点，则递归</span><br><span class=\"line\">            if(node.children.length)&#123;</span><br><span class=\"line\">                this._compile(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            var matches = node.innerHTML.match(bindDataTester);</span><br><span class=\"line\">            if(matches)&#123;</span><br><span class=\"line\">                var newMatches = matches.map(function (item) &#123;</span><br><span class=\"line\">                    return  item.replace(/&#123;&#123;(.*?)&#125;&#125;/,&quot;$1&quot;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                var splitTextNodes  = node.innerHTML.split(/&#123;&#123;.*?&#125;&#125;/);</span><br><span class=\"line\">                node.innerHTML=null;</span><br><span class=\"line\">                //更新DOM，处理同一个textnode里面多次绑定情况</span><br><span class=\"line\">                if(splitTextNodes[0])&#123;</span><br><span class=\"line\">                    node.append(document.createTextNode(splitTextNodes[0]));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                for(let ii=0;ii&lt;newMatches.length;ii++)&#123;</span><br><span class=\"line\">                    var el = document.createTextNode(&apos;&apos;);</span><br><span class=\"line\">                    node.appendChild(el);</span><br><span class=\"line\">                    if(splitTextNodes[ii+1])&#123;</span><br><span class=\"line\">                        node.append(document.createTextNode(splitTextNodes[ii+1]));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                //对数据和dom进行绑定</span><br><span class=\"line\">                let returnCode = !this._data.__bindings[newMatches[ii]]?</span><br><span class=\"line\">                    this._data.__bindings[newMatches[ii]] = [new Directive(el,this,&quot;nodeValue&quot;,this.data[newMatches[ii]])]</span><br><span class=\"line\">                    :this._data.__bindings[newMatches[ii]].push(new Directive(el,this,&quot;nodeValue&quot;,this.data[newMatches[ii]]))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们的数据绑定阶段就写好了，接下来，我们处理<code>&lt;input p-model = &quot;name&quot; /&gt;</code>这样的情况。</p>\n<p>这实际上是一个指令，我们只需要当识别到这一个指令的时候，做一些处理，即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(node.hasAttribute((&quot;p-model&quot;))</span><br><span class=\"line\">                &amp;&amp; node.tagName.toLocaleUpperCase()==&quot;INPUT&quot; || node.tagName.toLocaleUpperCase()==&quot;TEXTAREA&quot;)&#123;</span><br><span class=\"line\">                node.addEventListener(&quot;input&quot;, (function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    var attributeValue = node.getAttribute(&quot;p-model&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(_this._data.__bindings[attributeValue]) _this._data.__bindings[attributeValue].push(new Directive(node,_this,&quot;value&quot;,_this.data[attributeValue])) ;</span><br><span class=\"line\">                    else _this._data.__bindings[attributeValue] = [new Directive(node,_this,&quot;value&quot;,_this.data[attributeValue])];</span><br><span class=\"line\"></span><br><span class=\"line\">                    return function (event) &#123;</span><br><span class=\"line\">                        _this.data[attributeValue]=event.target.value</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意，上面调用了一个<code>IIFE</code>，实际绑定的函数只有返回的函数那一小部分。</p>\n<p>最后我们处理事件的情况：<code>&lt;button p-click=&quot;test(2)&quot;&gt;button1&lt;/button&gt;</code></p>\n<p>实际上这比处理<code>p-model</code>还简单，但是我们为了支持函数参数的情况，处理了一下传入参数，另外我实际上将<code>event</code>始终作为一个参数传递，这也许并不是好的实践，因为使用的时候还要多注意。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(node.hasAttribute(&quot;p-click&quot;)) &#123;</span><br><span class=\"line\">                node.addEventListener(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    var attributeValue=node.getAttribute(&quot;p-click&quot;);</span><br><span class=\"line\">                    var args=/\\(.*\\)/.exec(attributeValue);</span><br><span class=\"line\">                    //允许参数</span><br><span class=\"line\">                    if(args) &#123;</span><br><span class=\"line\">                        args=args[0];</span><br><span class=\"line\">                        attributeValue=attributeValue.replace(args,&quot;&quot;);</span><br><span class=\"line\">                        args=args.replace(/[\\(\\)\\&apos;\\&quot;]/g,&apos;&apos;).split(&quot;,&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else args=[];</span><br><span class=\"line\">                    return function (event) &#123;</span><br><span class=\"line\">                        _this.methods[attributeValue].apply(_this,[event,...args]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们已经将所有的代码分析完了，是不是很清爽？代码除去注释约100行，所有源代码可以在<a href=\"https://github.com/aircloud/Polar.js\" target=\"_blank\" rel=\"noopener\">这里下载</a>。这当然不能算作一个框架了，不过可以学习学习，这学期有时间的话，还要继续完善，也欢迎大家一起探讨。</p>\n<p>一起学习，一起提高，做技术应当是直接的，有问题欢迎指出～</p>\n<hr>\n<p>最后说的第三点：是自己还是一个学生，做这些内容也仅仅是出于兴趣，因为找暑期实习比较艰难，在等待鹅厂面试间隙写的这个程序，压压惊(然而并没有消息)。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>写在前面：这篇文章讲述了如何利用Proxy和Reflect实现双向数据绑定，个人系Vue早期玩家，写这个小框架的时候也没有参考Vue等源代码，之前了解过其他实现，但没有直接参考其他代码，如有雷同，纯属巧合。</p>\n</blockquote>\n<p>代码下载地址：<a href=\"https://github.com/aircloud/Polar.js\" target=\"_blank\" rel=\"noopener\">这里下载</a></p>\n<h3 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h3><p><em>关于Proxy和Reflect的资料推荐阮老师的教程:<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/</a> 这里不做过多介绍。</em></p>\n<p>实现双向数据绑定的方法有很多，也可以参考本专栏之前的其他实现，我之所以选择用Proxy和Reflect，一方面是因为可以大量节约代码，并且简化逻辑，可以让我把更多的经历放在其他内容的构建上面，另外一方面本项目直接基于ES6，用这些内容也符合面向未来的JS编程规范，第三点最后说。</p>\n<p>由于这个小框架是自己在PolarBear这个咖啡馆在一个安静的午后开始写成，暂且起名Polar，日后希望我能继续完善这个小框架，给添加上更多有趣的功能。</p>\n<p>首先我们可以看整体功能演示：<br>[一个gif动图，如果不能看，请点击<a href=\"https://www.10000h.top/images/data_img/gif1.gif\" target=\"_blank\" rel=\"noopener\">这里的链接</a>]</p>\n<p><img src=\"https://www.10000h.top/images/data_img/gif1.gif\" alt=\"\"></p>\n<h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><p>我们要做这样一个小框架，核心是要监听数据的改变，并且在数据的改变的时候进行一些操作，从而维持数据的一致。</p>\n<p>我的思路是这样的：</p>\n<ul>\n<li>将所有的数据信息放在一个属性对象中(this._data),之后给这个属性对象用Proxy包装set,在代理函数中我们更新属性对象的具体内容，同时通知所有监听者，之后返回新的代理对象(this.data)，我们之后操作的都是新的代理对象。</li>\n<li>对于input等表单，我们需要监听input事件，在回调函数中直接设置我们代理好的数据对象，从而触发我们的代理函数。</li>\n<li>我们同时也应该支持事件机制，这里我们以最常用的click方法作为例子实现。</li>\n</ul>\n<p>下面开始第一部分，我们希望我们之后使用这个库的时候可以这样调用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;form&gt;</span><br><span class=\"line\">        &lt;label&gt;name:&lt;/label&gt;</span><br><span class=\"line\">        &lt;input p-model = &quot;name&quot; /&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">    &lt;div&gt;name:&#123;&#123;name&#125;&#125; age:&#123;&#123;age&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;i&gt;note:&#123;&#123;note&#125;&#125;&lt;/i&gt;&lt;br/&gt;</span><br><span class=\"line\">    &lt;button p-click=&quot;test(2)&quot;&gt;button1&lt;/button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> var myPolar = new Polar(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            name: &quot;niexiaotao&quot;,</span><br><span class=\"line\">            age:16,</span><br><span class=\"line\">            note:&quot;Student of Zhejiang University&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            test:function(e,addNumber)&#123;</span><br><span class=\"line\">                console.log(&quot;e:&quot;,e);</span><br><span class=\"line\">                this.data.age+=Number(addNumber);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>没错，和Vue神似吧，所以这种调用方式应当为我们所熟悉。</p>\n<p>我们需要建立一个Polar类，这个类的构造函数应该进行一些初始化操作:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> constructor(configs)&#123;</span><br><span class=\"line\">        this.root = this.el = document.querySelector(configs.el);</span><br><span class=\"line\">        this._data = configs.data;</span><br><span class=\"line\">        this._data.__bindings = &#123;&#125;;</span><br><span class=\"line\">        //创建代理对象</span><br><span class=\"line\">        this.data = new Proxy(this._data, &#123;set&#125;);</span><br><span class=\"line\">        this.methods = configs.methods;</span><br><span class=\"line\"></span><br><span class=\"line\">        this._compile(this.root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面的一部份内容是直接将我们传入的configs按照属性分别赋值，另外就是我们创建代理对象的过程，最后的<code>_compile</code>方法可以理解为一个私有的初始化方法。</p>\n<p>实际上我把剩下的内容几乎都放在<code>_compile</code>方法里面了，这样理解起来方便，但是之后可能要改动。</p>\n<p>我们还是先不能看我们代理的set该怎么写，因为这个时候我们还要先继续梳理思路：</p>\n<p>假设我们这样<code>&lt;div&gt;name:&lt;/div&gt;</code>将数据绑定到dom节点，这个时候我们需要做什么呢，或者说，我们通过什么方式让dom节点和数据对应起来，随着数据改变而改变。</p>\n<p>看上文的<code>__bindings</code>。这个对象用来存储所有绑定的dom节点信息，<code>__bindings</code>本身是一个对象，每一个有对应dom节点绑定的数据名称都是它的属性，对应一个数组，数组中的每一个内容都是一个绑定信息，这样，我们在自己写的set代理函数中，我们一个个调用过去，就可以更新内容了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet.__bindings[key].forEach(function(item)&#123;</span><br><span class=\"line\">       //do something to update...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我这里创建了一个用于构造调用的函数，这个函数用于创建存储绑定信息的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Directive(el,polar,attr,elementValue)&#123;</span><br><span class=\"line\">    this.el=el;//元素本身dom节点</span><br><span class=\"line\">    this.polar = polar;//对应的polar实例</span><br><span class=\"line\">    this.attr = attr;//元素的被绑定的属性值，比如如果是文本节点就可以是nodeValue</span><br><span class=\"line\">    this.el[this.attr] = this.elementValue = elementValue;//初始化</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们的set可以这样写:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function set(target, key, value, receiver) &#123;</span><br><span class=\"line\">    const result = Reflect.set(target, key, value, receiver);</span><br><span class=\"line\">    var dataSet = receiver || target;</span><br><span class=\"line\">    dataSet.__bindings[key].forEach(function(item)&#123;</span><br><span class=\"line\">        item.el[item.attr] = item.elementValue = value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来可能还有一个问题：我们的<code></code>实际上只是节点的一部分，这并不是节点啊，另外我们是不是还可以这么写：<code>&lt;div&gt;name: age:&lt;/div&gt;</code>？</p>\n<p>关于这两个问题，前者的答案是我们将<code></code>替换成一个文本节点，而为了应对后者的情况，我们需要将两个被绑定数据中间和前后的内容，都变成新的文本节点，然后这些文本节点组成文本节点串。(这里多说一句，html5的normalize方法可以将多个文本节点合并成一个，如果不小心调用了它，那我们的程序就要GG了)</p>\n<p>所以我们在<code>_compile</code>函数首先：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _this = this;</span><br><span class=\"line\"></span><br><span class=\"line\">        var nodes = root.children;</span><br><span class=\"line\"></span><br><span class=\"line\">        var bindDataTester = new RegExp(&quot;&#123;&#123;(.*?)&#125;&#125;&quot;,&quot;ig&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        for(let i=0;i&lt;nodes.length;i++)&#123;</span><br><span class=\"line\">            var node=nodes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            //如果还有html字节点，则递归</span><br><span class=\"line\">            if(node.children.length)&#123;</span><br><span class=\"line\">                this._compile(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            var matches = node.innerHTML.match(bindDataTester);</span><br><span class=\"line\">            if(matches)&#123;</span><br><span class=\"line\">                var newMatches = matches.map(function (item) &#123;</span><br><span class=\"line\">                    return  item.replace(/&#123;&#123;(.*?)&#125;&#125;/,&quot;$1&quot;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                var splitTextNodes  = node.innerHTML.split(/&#123;&#123;.*?&#125;&#125;/);</span><br><span class=\"line\">                node.innerHTML=null;</span><br><span class=\"line\">                //更新DOM，处理同一个textnode里面多次绑定情况</span><br><span class=\"line\">                if(splitTextNodes[0])&#123;</span><br><span class=\"line\">                    node.append(document.createTextNode(splitTextNodes[0]));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                for(let ii=0;ii&lt;newMatches.length;ii++)&#123;</span><br><span class=\"line\">                    var el = document.createTextNode(&apos;&apos;);</span><br><span class=\"line\">                    node.appendChild(el);</span><br><span class=\"line\">                    if(splitTextNodes[ii+1])&#123;</span><br><span class=\"line\">                        node.append(document.createTextNode(splitTextNodes[ii+1]));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                //对数据和dom进行绑定</span><br><span class=\"line\">                let returnCode = !this._data.__bindings[newMatches[ii]]?</span><br><span class=\"line\">                    this._data.__bindings[newMatches[ii]] = [new Directive(el,this,&quot;nodeValue&quot;,this.data[newMatches[ii]])]</span><br><span class=\"line\">                    :this._data.__bindings[newMatches[ii]].push(new Directive(el,this,&quot;nodeValue&quot;,this.data[newMatches[ii]]))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们的数据绑定阶段就写好了，接下来，我们处理<code>&lt;input p-model = &quot;name&quot; /&gt;</code>这样的情况。</p>\n<p>这实际上是一个指令，我们只需要当识别到这一个指令的时候，做一些处理，即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(node.hasAttribute((&quot;p-model&quot;))</span><br><span class=\"line\">                &amp;&amp; node.tagName.toLocaleUpperCase()==&quot;INPUT&quot; || node.tagName.toLocaleUpperCase()==&quot;TEXTAREA&quot;)&#123;</span><br><span class=\"line\">                node.addEventListener(&quot;input&quot;, (function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    var attributeValue = node.getAttribute(&quot;p-model&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(_this._data.__bindings[attributeValue]) _this._data.__bindings[attributeValue].push(new Directive(node,_this,&quot;value&quot;,_this.data[attributeValue])) ;</span><br><span class=\"line\">                    else _this._data.__bindings[attributeValue] = [new Directive(node,_this,&quot;value&quot;,_this.data[attributeValue])];</span><br><span class=\"line\"></span><br><span class=\"line\">                    return function (event) &#123;</span><br><span class=\"line\">                        _this.data[attributeValue]=event.target.value</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意，上面调用了一个<code>IIFE</code>，实际绑定的函数只有返回的函数那一小部分。</p>\n<p>最后我们处理事件的情况：<code>&lt;button p-click=&quot;test(2)&quot;&gt;button1&lt;/button&gt;</code></p>\n<p>实际上这比处理<code>p-model</code>还简单，但是我们为了支持函数参数的情况，处理了一下传入参数，另外我实际上将<code>event</code>始终作为一个参数传递，这也许并不是好的实践，因为使用的时候还要多注意。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(node.hasAttribute(&quot;p-click&quot;)) &#123;</span><br><span class=\"line\">                node.addEventListener(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    var attributeValue=node.getAttribute(&quot;p-click&quot;);</span><br><span class=\"line\">                    var args=/\\(.*\\)/.exec(attributeValue);</span><br><span class=\"line\">                    //允许参数</span><br><span class=\"line\">                    if(args) &#123;</span><br><span class=\"line\">                        args=args[0];</span><br><span class=\"line\">                        attributeValue=attributeValue.replace(args,&quot;&quot;);</span><br><span class=\"line\">                        args=args.replace(/[\\(\\)\\&apos;\\&quot;]/g,&apos;&apos;).split(&quot;,&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else args=[];</span><br><span class=\"line\">                    return function (event) &#123;</span><br><span class=\"line\">                        _this.methods[attributeValue].apply(_this,[event,...args]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们已经将所有的代码分析完了，是不是很清爽？代码除去注释约100行，所有源代码可以在<a href=\"https://github.com/aircloud/Polar.js\" target=\"_blank\" rel=\"noopener\">这里下载</a>。这当然不能算作一个框架了，不过可以学习学习，这学期有时间的话，还要继续完善，也欢迎大家一起探讨。</p>\n<p>一起学习，一起提高，做技术应当是直接的，有问题欢迎指出～</p>\n<hr>\n<p>最后说的第三点：是自己还是一个学生，做这些内容也仅仅是出于兴趣，因为找暑期实习比较艰难，在等待鹅厂面试间隙写的这个程序，压压惊(然而并没有消息)。</p>\n"},{"title":"深入浏览器web渲染与优化","date":"2017-08-27T08:37:22.000Z","_content":">本文主要分析和总结web内核渲染的相关内容，以及在这方面前端可以做的性能优化工作。\n\n文章主要分为以下几个部分：\n\n* blink内核的渲染机制\n* chrome内核架构变迁\n* 分层渲染\n* 动画 & canvas & WebGl\n\n*这里的前两部分可能会有些枯燥，如果是前端工程师并且想立即获得实际项目的建议的，可以直接阅读第三部分和第四部分*\n\n### blink内核的渲染机制\n\nblink内核是Google基于Webkit内核开发的新的分支，而实际上，目前Chrome已经采用了blink内核，所以，我们接下来的有关分析大多基于blink内核的浏览器(Chrome)，就不再详细指明，当然，部分内容也会涉及到腾讯研发的X5内核(X5内核基于安卓的WebView，目前已经在手机QQ等产品中使用，基于X5内核的项目累计有数亿UV，上百亿PV)。\n\n一个页面的显示，实际上主要经历了下面的四个流程：\n\n加载 => 解析 => 排版 => 渲染\n\n实际上，这里的渲染主要是指排版之后到最后的上屏绘制(这个时候内容已经排版好了)，一部分前端工程师通常会把一部分的排版工作理解到“渲染”的流程中(也就是下图中全部工作)，实际上这个理解是不准确的。\n\n![](https://www.10000h.top/images/data_img/webRender/P6.PNG)\n\n目前，浏览器的渲染采用的是分块渲染的机制，所谓的分块渲染的机制，其实应该这么理解：\n\n* 浏览器首先把整个网页分成一些低分辨率的块，再把网页分成高分辨率的块，然后给这些块排列优先级。\n* 处在可视区域内的低分辨率块的优先级会比较高，会被较先绘制。\n* 之后浏览器会把高分辨率的块进行绘制，同样也是先绘制处于可视区域内的，再绘制可视区域外的(由近到远)。\n\n以上讲的这些策略可以使可以使得浏览器优先展示可视区域内的内容，并且先展示大致内容，再展示高精度内容(当然，由于这个过程比较快，实际上我们大多时候是感受不到的)。\n\n另外这里值得提醒的一点是，分块的优先级是会根据到可视区域的距离来决定的，所以有些横着的内容(比如banner的滚动实现，通常会设置横向超出屏幕来表示隐藏)，也是会按照到可视区域的距离来决定优先级的。\n\n绘制的过程，可以被硬件加速，这里硬件加速的主要手段主要是指：\n\n* 硬件加速合成上屏\n* 2D Canvas、Video的硬件加速\n* GPU光栅化\n\t* GPU光栅化速度更快，内存和CPU的消耗更少\n\t* 目前还没有办法对包含复杂矢量绘制的页面进行GPU光栅化\n\t* GPU光栅化是未来趋势\n\n\n### chrome内核架构变迁\n\n在渲染架构上，chrome也是经历了诸多变迁，早期的Chrome是这样的：\n\n![](https://www.10000h.top/images/data_img/webRender/P1.PNG)\n\n早期的chrome的架构实际上有以下缺点：\n\n* Renderer线程任务繁重\n* 无法实时响应缩放滑动操作\n* 脏区域与滑动重绘区域有冲突\n\t* 这里举个场景，假设一个gif，这个时候如果用户滑动，滑动新的需要绘制的内容和gif下一帧内容就会产生绘制冲突\n\n当然，经过一系列的发展，Chrome现在是这样的：\n\n![](https://www.10000h.top/images/data_img/webRender/P2.PNG)\n\n在安卓上，Android 4.4的 Blink内核架构如下(4.4之前并不支持OpenGL)\n\n![](https://www.10000h.top/images/data_img/webRender/P3.PNG)\n\n当然，这种架构也有如下缺点：\n\n* UI线程过于繁忙\n* 无法支持Canvas的硬件加速以及WebGL\n\n所以，后期发展成了这样：\n\n![](https://www.10000h.top/images/data_img/webRender/P4.PNG)\n\n总结看来，内核发展的趋势是：\n\n* 多线程化(可以充分利用多核心CPU)\n* 硬件加速(可以利用GPU)\n\n### 分层渲染\n\n在阅读这一章之前，我建议读者先去亲自体验一下所谓的“分层渲染”：\n\n>打开Chrome浏览器，打开控制台，找到\"Layers\"，如果没有，那么在控制台右上角更多的图标->More tools 找到\"Layers\"，然后随便找个网页打开即可\n\n网页的分层渲染流程主要是下面这样的：\n\n![](https://www.10000h.top/images/data_img/webRender/P7.PNG)\n\n(*注意：多个RenderObject可能又会对应一个或多个RenderLayer*)\n\n既然才用了分层渲染，那么肯定可以来分层处理，分层渲染有如下优点：\n\n* 减少不必要的重新绘制\n* 可以实现较为复杂的动画\n* 能够方便实现复杂的CSS样式\n\n当然，分层渲染是会很影响渲染效率的，可以有好的影响，使用不当也会有差的影响，我们需要合理的控制和使用分层：\n\n* 如果小豆腐块分层较多，页面整体的分层数量较大，会导致每帧渲染时遍历分层和计算分层位置耗时较长啊(比较典型的是腾讯网移动端首页)。\n* 如果可视区域内分层太多且需要绘制的面积太大，渲染性能非常差，甚至无法达到正常显示的地步(比如有一些全屏H5)。\n* 如果页面几乎没有分层，页面变化时候需要重绘的区域较多。元素内容无变化只有位置发生变化的时候，可以利用分层来避免重绘。\n\n那么，是什么原因可以导致分层呢？目前每一个浏览器或者不同版本的浏览器分层策略都是有些不同的(虽然总体差不太多)，但最常见的几个分层原因是：transform、Z-index；还有可以使用硬件加速的video、canvas；fixed元素；混合插件(flash等)。关于其他更具体的内容，可以见下文。\n\n```\n//注:Chrome中符合创建新层的情况：\nLayer has 3D or perspective transform CSS properties(有3D元素的属性)\nLayer is used by <video> element using accelerated video decoding(video标签并使用加速视频解码)\nLayer is used by a <canvas> element with a 3D context or accelerated 2D context(canvas元素并启用3D)\nLayer is used for a composited plugin(插件，比如flash)\nLayer uses a CSS animation for its opacity or uses an animated webkit transform(CSS动画)\nLayer uses accelerated CSS filters(CSS滤镜)\nLayer with a composited descendant has information that needs to be in the composited layer tree, such as a clip or reflection(有一个后代元素是独立的layer)\nLayer has a sibling with a lower z-index which has a compositing layer (in other words the layer is rendered on top of a composited layer)(元素的相邻元素是独立layer)\n```\n\n最后，我们总结一下如何合理的设计分层：分层总的原则是，减少渲染重绘面积与减少分层个数和分层总面积：\n\n* 相对位置会发生变化的元素需要分层(比如banner图、滚动条)\n* 元素内容更新比较频繁的需要分层(比如页面中夹杂的倒计时等)\n* 较长较大的页面注意总的分层个数\n* 避免某一块区域分层过多，面积过大\n\n(*如果你给一个元素添加上了-webkit-transform: translateZ(0);或者 -webkit-transform: translate3d(0,0,0);属性，那么你就等于告诉了浏览器用GPU来渲染该层，与一般的CPU渲染相比，提升了速度和性能。(我很确定这么做会在Chrome中启用了硬件加速，但在其他平台不做保证。就我得到的资料而言，在大多数浏览器比如Firefox、Safari也是适用的)*)\n\n另外值得一提的是，X5对分层方面做了一定的优化工作，当其检测到分层过多可能会出现显示问题的时候会进行层合并，牺牲显示性能换取显示正确性。\n\n最后再提出一个小问题：\n\n以下哪种渲染方式是最优的呢？\n\n![](https://www.10000h.top/images/data_img/webRender/P8.PNG)\n\n这里实际上后者虽然在分层上满足总体原则，但是之前讲到浏览器的分块渲染机制，是按照到可视区域的距离排序的，考虑到这个因素，实际上后者这种方式可能会对分块渲染造成一定的困扰，并且也不是最优的。\n\n### 动画 & canvas & WebGl\n\n讲最后一部分开始，首先抛出一个问题：CSS动画 or JS动画?\n\n对内核来说，实际上就是Renderer线程动画还是Compositor线程动画，二者实际上过程如下：\n\n![](https://www.10000h.top/images/data_img/webRender/P9.PNG)\n\n所以我们可以看出，Renderer线程是比Compositor线程动画性能差的(在中低端尤其明显)\n\n另外，无论是JS动画还是CSS动画，动画过程中的重绘以及样式变化都会拖慢动画执行以及引起卡顿\n以下是一些不会触发重绘或者排版的CSS动画属性：\n\n* cursor\n* font-variant\n* opacity\n* orphans\n* perspective\n* perspecti-origin\n* pointer-events\n* transform\n* transform-style\n* widows\n\n想要了解更多内容，可以参考[这里](https://csstriggers.com/)\n\n这方面最终的建议参考如下：\n\n* 尽量使用不会引起重绘的CSS属性动画，例如transform、opacity等\n* 动画一定要避免触发大量元素重新排版或者大面积重绘\n* 在有动画执行时，避免其他动画不相关因素引起排版和重绘\n\n\n#### requestAnimationFrame\n\n另外当我们在使用动画的时候，为了避免出现掉帧的情况，最好采用requestAnimationFrame这个API，这个API迎合浏览器的流程，并且能够保证在下一帧绘制的时候上一帧一定出现了：\n\n![](https://www.10000h.top/images/data_img/webRender/P11.PNG)\n\n### 3D canvas\n\n还有值得注意的是，有的时候我们需要涉及大量元素的动画(比如雪花飘落、多个不规则图形变化等)，这个时候如果用CSS动画，Animation动画的元素很多。，导致分层个数非常多，浏览器每帧都需要遍历计算所有分层，导致比较耗时、\n\n这个时候该怎么办呢？\n\n2D canvas上场。 \n\n和CSS动画相比，2D canvas的优点是这样的：\n\n* 硬件加速渲染\n* 渲染流程更优\n\n其渲染流程如下：\n\n![](https://www.10000h.top/images/data_img/webRender/P10.PNG)\n\n实际上以上流程比较耗时的是JS Call这一部分，执行opengl的这一部分还是挺快的。\n\nHTML 2D canvas 主要绘制如下三种元素：\n\n* 图片\n* 文字\n* 矢量\n\n这个过程可以采用硬件加速，硬件加速图片绘制的主要流程：\n\n![](https://www.10000h.top/images/data_img/webRender/P12.PNG)\n\n硬件加速文字绘制的主要流程：\n\n![](https://www.10000h.top/images/data_img/webRender/P13.PNG)\n\n但对于矢量绘制而言，简单的图形，比如点、直线等可以直接使用OpenGL渲染，复杂的图形，如曲线等，无法采用OpenGL绘制。\n\n对于绘制效率来说，2D Canvas对绘制图片效率较高，绘制文字和矢量效率较低(**所以建议是，我们如果能使用贴图就尽量使用贴图了**)\n\n还有，有的时候我们需要先绘制到离屏canvas上面，然后再上屏，这个可以充分利用缓存。\n\n### 3D canvas(WebGL)\n\n目前，3D canvas(WebGL)的应用也越来越多，对于这类应用，现在已经有了不少已经成型的庫:\n\n\n* 通用引擎：threeJS、Pixi\n* VR视频的专业引擎：krpano、UtoVR\n* H5游戏引擎：Egret、Layabox、Cocos\n\nWebGL虽然包含Web，但本身对前端的要求最低，但是对OpenGL、数学相关的知识要求较高，所以如果前端工程师没有一定的基础，还是采用现在的流行庫。\n\nX5内核对于WebGl进行了性能上和耗电上的优化，并且也对兼容性错误上报和修复做了一定的工作。\n\n___\n\n本文参考腾讯内部讲座资料整理而成，并融入一部分笔者的补充，谢绝任何形式的转载。\n\n其他优质好文：\n\n[Javascript高性能动画与页面渲染](http://qingbob.com/javascript-high-performance-animation-and-page-rendering/)\n\n\n","source":"_posts/深入浏览器web渲染与优化.md","raw":"---\ntitle: 深入浏览器web渲染与优化\ndate: 2017-08-27 17:37:22\ntags:\n    - 性能优化\n---\n>本文主要分析和总结web内核渲染的相关内容，以及在这方面前端可以做的性能优化工作。\n\n文章主要分为以下几个部分：\n\n* blink内核的渲染机制\n* chrome内核架构变迁\n* 分层渲染\n* 动画 & canvas & WebGl\n\n*这里的前两部分可能会有些枯燥，如果是前端工程师并且想立即获得实际项目的建议的，可以直接阅读第三部分和第四部分*\n\n### blink内核的渲染机制\n\nblink内核是Google基于Webkit内核开发的新的分支，而实际上，目前Chrome已经采用了blink内核，所以，我们接下来的有关分析大多基于blink内核的浏览器(Chrome)，就不再详细指明，当然，部分内容也会涉及到腾讯研发的X5内核(X5内核基于安卓的WebView，目前已经在手机QQ等产品中使用，基于X5内核的项目累计有数亿UV，上百亿PV)。\n\n一个页面的显示，实际上主要经历了下面的四个流程：\n\n加载 => 解析 => 排版 => 渲染\n\n实际上，这里的渲染主要是指排版之后到最后的上屏绘制(这个时候内容已经排版好了)，一部分前端工程师通常会把一部分的排版工作理解到“渲染”的流程中(也就是下图中全部工作)，实际上这个理解是不准确的。\n\n![](https://www.10000h.top/images/data_img/webRender/P6.PNG)\n\n目前，浏览器的渲染采用的是分块渲染的机制，所谓的分块渲染的机制，其实应该这么理解：\n\n* 浏览器首先把整个网页分成一些低分辨率的块，再把网页分成高分辨率的块，然后给这些块排列优先级。\n* 处在可视区域内的低分辨率块的优先级会比较高，会被较先绘制。\n* 之后浏览器会把高分辨率的块进行绘制，同样也是先绘制处于可视区域内的，再绘制可视区域外的(由近到远)。\n\n以上讲的这些策略可以使可以使得浏览器优先展示可视区域内的内容，并且先展示大致内容，再展示高精度内容(当然，由于这个过程比较快，实际上我们大多时候是感受不到的)。\n\n另外这里值得提醒的一点是，分块的优先级是会根据到可视区域的距离来决定的，所以有些横着的内容(比如banner的滚动实现，通常会设置横向超出屏幕来表示隐藏)，也是会按照到可视区域的距离来决定优先级的。\n\n绘制的过程，可以被硬件加速，这里硬件加速的主要手段主要是指：\n\n* 硬件加速合成上屏\n* 2D Canvas、Video的硬件加速\n* GPU光栅化\n\t* GPU光栅化速度更快，内存和CPU的消耗更少\n\t* 目前还没有办法对包含复杂矢量绘制的页面进行GPU光栅化\n\t* GPU光栅化是未来趋势\n\n\n### chrome内核架构变迁\n\n在渲染架构上，chrome也是经历了诸多变迁，早期的Chrome是这样的：\n\n![](https://www.10000h.top/images/data_img/webRender/P1.PNG)\n\n早期的chrome的架构实际上有以下缺点：\n\n* Renderer线程任务繁重\n* 无法实时响应缩放滑动操作\n* 脏区域与滑动重绘区域有冲突\n\t* 这里举个场景，假设一个gif，这个时候如果用户滑动，滑动新的需要绘制的内容和gif下一帧内容就会产生绘制冲突\n\n当然，经过一系列的发展，Chrome现在是这样的：\n\n![](https://www.10000h.top/images/data_img/webRender/P2.PNG)\n\n在安卓上，Android 4.4的 Blink内核架构如下(4.4之前并不支持OpenGL)\n\n![](https://www.10000h.top/images/data_img/webRender/P3.PNG)\n\n当然，这种架构也有如下缺点：\n\n* UI线程过于繁忙\n* 无法支持Canvas的硬件加速以及WebGL\n\n所以，后期发展成了这样：\n\n![](https://www.10000h.top/images/data_img/webRender/P4.PNG)\n\n总结看来，内核发展的趋势是：\n\n* 多线程化(可以充分利用多核心CPU)\n* 硬件加速(可以利用GPU)\n\n### 分层渲染\n\n在阅读这一章之前，我建议读者先去亲自体验一下所谓的“分层渲染”：\n\n>打开Chrome浏览器，打开控制台，找到\"Layers\"，如果没有，那么在控制台右上角更多的图标->More tools 找到\"Layers\"，然后随便找个网页打开即可\n\n网页的分层渲染流程主要是下面这样的：\n\n![](https://www.10000h.top/images/data_img/webRender/P7.PNG)\n\n(*注意：多个RenderObject可能又会对应一个或多个RenderLayer*)\n\n既然才用了分层渲染，那么肯定可以来分层处理，分层渲染有如下优点：\n\n* 减少不必要的重新绘制\n* 可以实现较为复杂的动画\n* 能够方便实现复杂的CSS样式\n\n当然，分层渲染是会很影响渲染效率的，可以有好的影响，使用不当也会有差的影响，我们需要合理的控制和使用分层：\n\n* 如果小豆腐块分层较多，页面整体的分层数量较大，会导致每帧渲染时遍历分层和计算分层位置耗时较长啊(比较典型的是腾讯网移动端首页)。\n* 如果可视区域内分层太多且需要绘制的面积太大，渲染性能非常差，甚至无法达到正常显示的地步(比如有一些全屏H5)。\n* 如果页面几乎没有分层，页面变化时候需要重绘的区域较多。元素内容无变化只有位置发生变化的时候，可以利用分层来避免重绘。\n\n那么，是什么原因可以导致分层呢？目前每一个浏览器或者不同版本的浏览器分层策略都是有些不同的(虽然总体差不太多)，但最常见的几个分层原因是：transform、Z-index；还有可以使用硬件加速的video、canvas；fixed元素；混合插件(flash等)。关于其他更具体的内容，可以见下文。\n\n```\n//注:Chrome中符合创建新层的情况：\nLayer has 3D or perspective transform CSS properties(有3D元素的属性)\nLayer is used by <video> element using accelerated video decoding(video标签并使用加速视频解码)\nLayer is used by a <canvas> element with a 3D context or accelerated 2D context(canvas元素并启用3D)\nLayer is used for a composited plugin(插件，比如flash)\nLayer uses a CSS animation for its opacity or uses an animated webkit transform(CSS动画)\nLayer uses accelerated CSS filters(CSS滤镜)\nLayer with a composited descendant has information that needs to be in the composited layer tree, such as a clip or reflection(有一个后代元素是独立的layer)\nLayer has a sibling with a lower z-index which has a compositing layer (in other words the layer is rendered on top of a composited layer)(元素的相邻元素是独立layer)\n```\n\n最后，我们总结一下如何合理的设计分层：分层总的原则是，减少渲染重绘面积与减少分层个数和分层总面积：\n\n* 相对位置会发生变化的元素需要分层(比如banner图、滚动条)\n* 元素内容更新比较频繁的需要分层(比如页面中夹杂的倒计时等)\n* 较长较大的页面注意总的分层个数\n* 避免某一块区域分层过多，面积过大\n\n(*如果你给一个元素添加上了-webkit-transform: translateZ(0);或者 -webkit-transform: translate3d(0,0,0);属性，那么你就等于告诉了浏览器用GPU来渲染该层，与一般的CPU渲染相比，提升了速度和性能。(我很确定这么做会在Chrome中启用了硬件加速，但在其他平台不做保证。就我得到的资料而言，在大多数浏览器比如Firefox、Safari也是适用的)*)\n\n另外值得一提的是，X5对分层方面做了一定的优化工作，当其检测到分层过多可能会出现显示问题的时候会进行层合并，牺牲显示性能换取显示正确性。\n\n最后再提出一个小问题：\n\n以下哪种渲染方式是最优的呢？\n\n![](https://www.10000h.top/images/data_img/webRender/P8.PNG)\n\n这里实际上后者虽然在分层上满足总体原则，但是之前讲到浏览器的分块渲染机制，是按照到可视区域的距离排序的，考虑到这个因素，实际上后者这种方式可能会对分块渲染造成一定的困扰，并且也不是最优的。\n\n### 动画 & canvas & WebGl\n\n讲最后一部分开始，首先抛出一个问题：CSS动画 or JS动画?\n\n对内核来说，实际上就是Renderer线程动画还是Compositor线程动画，二者实际上过程如下：\n\n![](https://www.10000h.top/images/data_img/webRender/P9.PNG)\n\n所以我们可以看出，Renderer线程是比Compositor线程动画性能差的(在中低端尤其明显)\n\n另外，无论是JS动画还是CSS动画，动画过程中的重绘以及样式变化都会拖慢动画执行以及引起卡顿\n以下是一些不会触发重绘或者排版的CSS动画属性：\n\n* cursor\n* font-variant\n* opacity\n* orphans\n* perspective\n* perspecti-origin\n* pointer-events\n* transform\n* transform-style\n* widows\n\n想要了解更多内容，可以参考[这里](https://csstriggers.com/)\n\n这方面最终的建议参考如下：\n\n* 尽量使用不会引起重绘的CSS属性动画，例如transform、opacity等\n* 动画一定要避免触发大量元素重新排版或者大面积重绘\n* 在有动画执行时，避免其他动画不相关因素引起排版和重绘\n\n\n#### requestAnimationFrame\n\n另外当我们在使用动画的时候，为了避免出现掉帧的情况，最好采用requestAnimationFrame这个API，这个API迎合浏览器的流程，并且能够保证在下一帧绘制的时候上一帧一定出现了：\n\n![](https://www.10000h.top/images/data_img/webRender/P11.PNG)\n\n### 3D canvas\n\n还有值得注意的是，有的时候我们需要涉及大量元素的动画(比如雪花飘落、多个不规则图形变化等)，这个时候如果用CSS动画，Animation动画的元素很多。，导致分层个数非常多，浏览器每帧都需要遍历计算所有分层，导致比较耗时、\n\n这个时候该怎么办呢？\n\n2D canvas上场。 \n\n和CSS动画相比，2D canvas的优点是这样的：\n\n* 硬件加速渲染\n* 渲染流程更优\n\n其渲染流程如下：\n\n![](https://www.10000h.top/images/data_img/webRender/P10.PNG)\n\n实际上以上流程比较耗时的是JS Call这一部分，执行opengl的这一部分还是挺快的。\n\nHTML 2D canvas 主要绘制如下三种元素：\n\n* 图片\n* 文字\n* 矢量\n\n这个过程可以采用硬件加速，硬件加速图片绘制的主要流程：\n\n![](https://www.10000h.top/images/data_img/webRender/P12.PNG)\n\n硬件加速文字绘制的主要流程：\n\n![](https://www.10000h.top/images/data_img/webRender/P13.PNG)\n\n但对于矢量绘制而言，简单的图形，比如点、直线等可以直接使用OpenGL渲染，复杂的图形，如曲线等，无法采用OpenGL绘制。\n\n对于绘制效率来说，2D Canvas对绘制图片效率较高，绘制文字和矢量效率较低(**所以建议是，我们如果能使用贴图就尽量使用贴图了**)\n\n还有，有的时候我们需要先绘制到离屏canvas上面，然后再上屏，这个可以充分利用缓存。\n\n### 3D canvas(WebGL)\n\n目前，3D canvas(WebGL)的应用也越来越多，对于这类应用，现在已经有了不少已经成型的庫:\n\n\n* 通用引擎：threeJS、Pixi\n* VR视频的专业引擎：krpano、UtoVR\n* H5游戏引擎：Egret、Layabox、Cocos\n\nWebGL虽然包含Web，但本身对前端的要求最低，但是对OpenGL、数学相关的知识要求较高，所以如果前端工程师没有一定的基础，还是采用现在的流行庫。\n\nX5内核对于WebGl进行了性能上和耗电上的优化，并且也对兼容性错误上报和修复做了一定的工作。\n\n___\n\n本文参考腾讯内部讲座资料整理而成，并融入一部分笔者的补充，谢绝任何形式的转载。\n\n其他优质好文：\n\n[Javascript高性能动画与页面渲染](http://qingbob.com/javascript-high-performance-animation-and-page-rendering/)\n\n\n","slug":"深入浏览器web渲染与优化","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds10001vgxy0gfd49k9w","content":"<blockquote>\n<p>本文主要分析和总结web内核渲染的相关内容，以及在这方面前端可以做的性能优化工作。</p>\n</blockquote>\n<p>文章主要分为以下几个部分：</p>\n<ul>\n<li>blink内核的渲染机制</li>\n<li>chrome内核架构变迁</li>\n<li>分层渲染</li>\n<li>动画 &amp; canvas &amp; WebGl</li>\n</ul>\n<p><em>这里的前两部分可能会有些枯燥，如果是前端工程师并且想立即获得实际项目的建议的，可以直接阅读第三部分和第四部分</em></p>\n<h3 id=\"blink内核的渲染机制\"><a href=\"#blink内核的渲染机制\" class=\"headerlink\" title=\"blink内核的渲染机制\"></a>blink内核的渲染机制</h3><p>blink内核是Google基于Webkit内核开发的新的分支，而实际上，目前Chrome已经采用了blink内核，所以，我们接下来的有关分析大多基于blink内核的浏览器(Chrome)，就不再详细指明，当然，部分内容也会涉及到腾讯研发的X5内核(X5内核基于安卓的WebView，目前已经在手机QQ等产品中使用，基于X5内核的项目累计有数亿UV，上百亿PV)。</p>\n<p>一个页面的显示，实际上主要经历了下面的四个流程：</p>\n<p>加载 =&gt; 解析 =&gt; 排版 =&gt; 渲染</p>\n<p>实际上，这里的渲染主要是指排版之后到最后的上屏绘制(这个时候内容已经排版好了)，一部分前端工程师通常会把一部分的排版工作理解到“渲染”的流程中(也就是下图中全部工作)，实际上这个理解是不准确的。</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P6.PNG\" alt=\"\"></p>\n<p>目前，浏览器的渲染采用的是分块渲染的机制，所谓的分块渲染的机制，其实应该这么理解：</p>\n<ul>\n<li>浏览器首先把整个网页分成一些低分辨率的块，再把网页分成高分辨率的块，然后给这些块排列优先级。</li>\n<li>处在可视区域内的低分辨率块的优先级会比较高，会被较先绘制。</li>\n<li>之后浏览器会把高分辨率的块进行绘制，同样也是先绘制处于可视区域内的，再绘制可视区域外的(由近到远)。</li>\n</ul>\n<p>以上讲的这些策略可以使可以使得浏览器优先展示可视区域内的内容，并且先展示大致内容，再展示高精度内容(当然，由于这个过程比较快，实际上我们大多时候是感受不到的)。</p>\n<p>另外这里值得提醒的一点是，分块的优先级是会根据到可视区域的距离来决定的，所以有些横着的内容(比如banner的滚动实现，通常会设置横向超出屏幕来表示隐藏)，也是会按照到可视区域的距离来决定优先级的。</p>\n<p>绘制的过程，可以被硬件加速，这里硬件加速的主要手段主要是指：</p>\n<ul>\n<li>硬件加速合成上屏</li>\n<li>2D Canvas、Video的硬件加速</li>\n<li>GPU光栅化<ul>\n<li>GPU光栅化速度更快，内存和CPU的消耗更少</li>\n<li>目前还没有办法对包含复杂矢量绘制的页面进行GPU光栅化</li>\n<li>GPU光栅化是未来趋势</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"chrome内核架构变迁\"><a href=\"#chrome内核架构变迁\" class=\"headerlink\" title=\"chrome内核架构变迁\"></a>chrome内核架构变迁</h3><p>在渲染架构上，chrome也是经历了诸多变迁，早期的Chrome是这样的：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P1.PNG\" alt=\"\"></p>\n<p>早期的chrome的架构实际上有以下缺点：</p>\n<ul>\n<li>Renderer线程任务繁重</li>\n<li>无法实时响应缩放滑动操作</li>\n<li>脏区域与滑动重绘区域有冲突<ul>\n<li>这里举个场景，假设一个gif，这个时候如果用户滑动，滑动新的需要绘制的内容和gif下一帧内容就会产生绘制冲突</li>\n</ul>\n</li>\n</ul>\n<p>当然，经过一系列的发展，Chrome现在是这样的：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P2.PNG\" alt=\"\"></p>\n<p>在安卓上，Android 4.4的 Blink内核架构如下(4.4之前并不支持OpenGL)</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P3.PNG\" alt=\"\"></p>\n<p>当然，这种架构也有如下缺点：</p>\n<ul>\n<li>UI线程过于繁忙</li>\n<li>无法支持Canvas的硬件加速以及WebGL</li>\n</ul>\n<p>所以，后期发展成了这样：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P4.PNG\" alt=\"\"></p>\n<p>总结看来，内核发展的趋势是：</p>\n<ul>\n<li>多线程化(可以充分利用多核心CPU)</li>\n<li>硬件加速(可以利用GPU)</li>\n</ul>\n<h3 id=\"分层渲染\"><a href=\"#分层渲染\" class=\"headerlink\" title=\"分层渲染\"></a>分层渲染</h3><p>在阅读这一章之前，我建议读者先去亲自体验一下所谓的“分层渲染”：</p>\n<blockquote>\n<p>打开Chrome浏览器，打开控制台，找到”Layers”，如果没有，那么在控制台右上角更多的图标-&gt;More tools 找到”Layers”，然后随便找个网页打开即可</p>\n</blockquote>\n<p>网页的分层渲染流程主要是下面这样的：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P7.PNG\" alt=\"\"></p>\n<p>(<em>注意：多个RenderObject可能又会对应一个或多个RenderLayer</em>)</p>\n<p>既然才用了分层渲染，那么肯定可以来分层处理，分层渲染有如下优点：</p>\n<ul>\n<li>减少不必要的重新绘制</li>\n<li>可以实现较为复杂的动画</li>\n<li>能够方便实现复杂的CSS样式</li>\n</ul>\n<p>当然，分层渲染是会很影响渲染效率的，可以有好的影响，使用不当也会有差的影响，我们需要合理的控制和使用分层：</p>\n<ul>\n<li>如果小豆腐块分层较多，页面整体的分层数量较大，会导致每帧渲染时遍历分层和计算分层位置耗时较长啊(比较典型的是腾讯网移动端首页)。</li>\n<li>如果可视区域内分层太多且需要绘制的面积太大，渲染性能非常差，甚至无法达到正常显示的地步(比如有一些全屏H5)。</li>\n<li>如果页面几乎没有分层，页面变化时候需要重绘的区域较多。元素内容无变化只有位置发生变化的时候，可以利用分层来避免重绘。</li>\n</ul>\n<p>那么，是什么原因可以导致分层呢？目前每一个浏览器或者不同版本的浏览器分层策略都是有些不同的(虽然总体差不太多)，但最常见的几个分层原因是：transform、Z-index；还有可以使用硬件加速的video、canvas；fixed元素；混合插件(flash等)。关于其他更具体的内容，可以见下文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注:Chrome中符合创建新层的情况：</span><br><span class=\"line\">Layer has 3D or perspective transform CSS properties(有3D元素的属性)</span><br><span class=\"line\">Layer is used by &lt;video&gt; element using accelerated video decoding(video标签并使用加速视频解码)</span><br><span class=\"line\">Layer is used by a &lt;canvas&gt; element with a 3D context or accelerated 2D context(canvas元素并启用3D)</span><br><span class=\"line\">Layer is used for a composited plugin(插件，比如flash)</span><br><span class=\"line\">Layer uses a CSS animation for its opacity or uses an animated webkit transform(CSS动画)</span><br><span class=\"line\">Layer uses accelerated CSS filters(CSS滤镜)</span><br><span class=\"line\">Layer with a composited descendant has information that needs to be in the composited layer tree, such as a clip or reflection(有一个后代元素是独立的layer)</span><br><span class=\"line\">Layer has a sibling with a lower z-index which has a compositing layer (in other words the layer is rendered on top of a composited layer)(元素的相邻元素是独立layer)</span><br></pre></td></tr></table></figure>\n<p>最后，我们总结一下如何合理的设计分层：分层总的原则是，减少渲染重绘面积与减少分层个数和分层总面积：</p>\n<ul>\n<li>相对位置会发生变化的元素需要分层(比如banner图、滚动条)</li>\n<li>元素内容更新比较频繁的需要分层(比如页面中夹杂的倒计时等)</li>\n<li>较长较大的页面注意总的分层个数</li>\n<li>避免某一块区域分层过多，面积过大</li>\n</ul>\n<p>(<em>如果你给一个元素添加上了-webkit-transform: translateZ(0);或者 -webkit-transform: translate3d(0,0,0);属性，那么你就等于告诉了浏览器用GPU来渲染该层，与一般的CPU渲染相比，提升了速度和性能。(我很确定这么做会在Chrome中启用了硬件加速，但在其他平台不做保证。就我得到的资料而言，在大多数浏览器比如Firefox、Safari也是适用的)</em>)</p>\n<p>另外值得一提的是，X5对分层方面做了一定的优化工作，当其检测到分层过多可能会出现显示问题的时候会进行层合并，牺牲显示性能换取显示正确性。</p>\n<p>最后再提出一个小问题：</p>\n<p>以下哪种渲染方式是最优的呢？</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P8.PNG\" alt=\"\"></p>\n<p>这里实际上后者虽然在分层上满足总体原则，但是之前讲到浏览器的分块渲染机制，是按照到可视区域的距离排序的，考虑到这个因素，实际上后者这种方式可能会对分块渲染造成一定的困扰，并且也不是最优的。</p>\n<h3 id=\"动画-amp-canvas-amp-WebGl\"><a href=\"#动画-amp-canvas-amp-WebGl\" class=\"headerlink\" title=\"动画 &amp; canvas &amp; WebGl\"></a>动画 &amp; canvas &amp; WebGl</h3><p>讲最后一部分开始，首先抛出一个问题：CSS动画 or JS动画?</p>\n<p>对内核来说，实际上就是Renderer线程动画还是Compositor线程动画，二者实际上过程如下：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P9.PNG\" alt=\"\"></p>\n<p>所以我们可以看出，Renderer线程是比Compositor线程动画性能差的(在中低端尤其明显)</p>\n<p>另外，无论是JS动画还是CSS动画，动画过程中的重绘以及样式变化都会拖慢动画执行以及引起卡顿<br>以下是一些不会触发重绘或者排版的CSS动画属性：</p>\n<ul>\n<li>cursor</li>\n<li>font-variant</li>\n<li>opacity</li>\n<li>orphans</li>\n<li>perspective</li>\n<li>perspecti-origin</li>\n<li>pointer-events</li>\n<li>transform</li>\n<li>transform-style</li>\n<li>widows</li>\n</ul>\n<p>想要了解更多内容，可以参考<a href=\"https://csstriggers.com/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这方面最终的建议参考如下：</p>\n<ul>\n<li>尽量使用不会引起重绘的CSS属性动画，例如transform、opacity等</li>\n<li>动画一定要避免触发大量元素重新排版或者大面积重绘</li>\n<li>在有动画执行时，避免其他动画不相关因素引起排版和重绘</li>\n</ul>\n<h4 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h4><p>另外当我们在使用动画的时候，为了避免出现掉帧的情况，最好采用requestAnimationFrame这个API，这个API迎合浏览器的流程，并且能够保证在下一帧绘制的时候上一帧一定出现了：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P11.PNG\" alt=\"\"></p>\n<h3 id=\"3D-canvas\"><a href=\"#3D-canvas\" class=\"headerlink\" title=\"3D canvas\"></a>3D canvas</h3><p>还有值得注意的是，有的时候我们需要涉及大量元素的动画(比如雪花飘落、多个不规则图形变化等)，这个时候如果用CSS动画，Animation动画的元素很多。，导致分层个数非常多，浏览器每帧都需要遍历计算所有分层，导致比较耗时、</p>\n<p>这个时候该怎么办呢？</p>\n<p>2D canvas上场。 </p>\n<p>和CSS动画相比，2D canvas的优点是这样的：</p>\n<ul>\n<li>硬件加速渲染</li>\n<li>渲染流程更优</li>\n</ul>\n<p>其渲染流程如下：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P10.PNG\" alt=\"\"></p>\n<p>实际上以上流程比较耗时的是JS Call这一部分，执行opengl的这一部分还是挺快的。</p>\n<p>HTML 2D canvas 主要绘制如下三种元素：</p>\n<ul>\n<li>图片</li>\n<li>文字</li>\n<li>矢量</li>\n</ul>\n<p>这个过程可以采用硬件加速，硬件加速图片绘制的主要流程：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P12.PNG\" alt=\"\"></p>\n<p>硬件加速文字绘制的主要流程：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P13.PNG\" alt=\"\"></p>\n<p>但对于矢量绘制而言，简单的图形，比如点、直线等可以直接使用OpenGL渲染，复杂的图形，如曲线等，无法采用OpenGL绘制。</p>\n<p>对于绘制效率来说，2D Canvas对绘制图片效率较高，绘制文字和矢量效率较低(<strong>所以建议是，我们如果能使用贴图就尽量使用贴图了</strong>)</p>\n<p>还有，有的时候我们需要先绘制到离屏canvas上面，然后再上屏，这个可以充分利用缓存。</p>\n<h3 id=\"3D-canvas-WebGL\"><a href=\"#3D-canvas-WebGL\" class=\"headerlink\" title=\"3D canvas(WebGL)\"></a>3D canvas(WebGL)</h3><p>目前，3D canvas(WebGL)的应用也越来越多，对于这类应用，现在已经有了不少已经成型的庫:</p>\n<ul>\n<li>通用引擎：threeJS、Pixi</li>\n<li>VR视频的专业引擎：krpano、UtoVR</li>\n<li>H5游戏引擎：Egret、Layabox、Cocos</li>\n</ul>\n<p>WebGL虽然包含Web，但本身对前端的要求最低，但是对OpenGL、数学相关的知识要求较高，所以如果前端工程师没有一定的基础，还是采用现在的流行庫。</p>\n<p>X5内核对于WebGl进行了性能上和耗电上的优化，并且也对兼容性错误上报和修复做了一定的工作。</p>\n<hr>\n<p>本文参考腾讯内部讲座资料整理而成，并融入一部分笔者的补充，谢绝任何形式的转载。</p>\n<p>其他优质好文：</p>\n<p><a href=\"http://qingbob.com/javascript-high-performance-animation-and-page-rendering/\" target=\"_blank\" rel=\"noopener\">Javascript高性能动画与页面渲染</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文主要分析和总结web内核渲染的相关内容，以及在这方面前端可以做的性能优化工作。</p>\n</blockquote>\n<p>文章主要分为以下几个部分：</p>\n<ul>\n<li>blink内核的渲染机制</li>\n<li>chrome内核架构变迁</li>\n<li>分层渲染</li>\n<li>动画 &amp; canvas &amp; WebGl</li>\n</ul>\n<p><em>这里的前两部分可能会有些枯燥，如果是前端工程师并且想立即获得实际项目的建议的，可以直接阅读第三部分和第四部分</em></p>\n<h3 id=\"blink内核的渲染机制\"><a href=\"#blink内核的渲染机制\" class=\"headerlink\" title=\"blink内核的渲染机制\"></a>blink内核的渲染机制</h3><p>blink内核是Google基于Webkit内核开发的新的分支，而实际上，目前Chrome已经采用了blink内核，所以，我们接下来的有关分析大多基于blink内核的浏览器(Chrome)，就不再详细指明，当然，部分内容也会涉及到腾讯研发的X5内核(X5内核基于安卓的WebView，目前已经在手机QQ等产品中使用，基于X5内核的项目累计有数亿UV，上百亿PV)。</p>\n<p>一个页面的显示，实际上主要经历了下面的四个流程：</p>\n<p>加载 =&gt; 解析 =&gt; 排版 =&gt; 渲染</p>\n<p>实际上，这里的渲染主要是指排版之后到最后的上屏绘制(这个时候内容已经排版好了)，一部分前端工程师通常会把一部分的排版工作理解到“渲染”的流程中(也就是下图中全部工作)，实际上这个理解是不准确的。</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P6.PNG\" alt=\"\"></p>\n<p>目前，浏览器的渲染采用的是分块渲染的机制，所谓的分块渲染的机制，其实应该这么理解：</p>\n<ul>\n<li>浏览器首先把整个网页分成一些低分辨率的块，再把网页分成高分辨率的块，然后给这些块排列优先级。</li>\n<li>处在可视区域内的低分辨率块的优先级会比较高，会被较先绘制。</li>\n<li>之后浏览器会把高分辨率的块进行绘制，同样也是先绘制处于可视区域内的，再绘制可视区域外的(由近到远)。</li>\n</ul>\n<p>以上讲的这些策略可以使可以使得浏览器优先展示可视区域内的内容，并且先展示大致内容，再展示高精度内容(当然，由于这个过程比较快，实际上我们大多时候是感受不到的)。</p>\n<p>另外这里值得提醒的一点是，分块的优先级是会根据到可视区域的距离来决定的，所以有些横着的内容(比如banner的滚动实现，通常会设置横向超出屏幕来表示隐藏)，也是会按照到可视区域的距离来决定优先级的。</p>\n<p>绘制的过程，可以被硬件加速，这里硬件加速的主要手段主要是指：</p>\n<ul>\n<li>硬件加速合成上屏</li>\n<li>2D Canvas、Video的硬件加速</li>\n<li>GPU光栅化<ul>\n<li>GPU光栅化速度更快，内存和CPU的消耗更少</li>\n<li>目前还没有办法对包含复杂矢量绘制的页面进行GPU光栅化</li>\n<li>GPU光栅化是未来趋势</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"chrome内核架构变迁\"><a href=\"#chrome内核架构变迁\" class=\"headerlink\" title=\"chrome内核架构变迁\"></a>chrome内核架构变迁</h3><p>在渲染架构上，chrome也是经历了诸多变迁，早期的Chrome是这样的：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P1.PNG\" alt=\"\"></p>\n<p>早期的chrome的架构实际上有以下缺点：</p>\n<ul>\n<li>Renderer线程任务繁重</li>\n<li>无法实时响应缩放滑动操作</li>\n<li>脏区域与滑动重绘区域有冲突<ul>\n<li>这里举个场景，假设一个gif，这个时候如果用户滑动，滑动新的需要绘制的内容和gif下一帧内容就会产生绘制冲突</li>\n</ul>\n</li>\n</ul>\n<p>当然，经过一系列的发展，Chrome现在是这样的：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P2.PNG\" alt=\"\"></p>\n<p>在安卓上，Android 4.4的 Blink内核架构如下(4.4之前并不支持OpenGL)</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P3.PNG\" alt=\"\"></p>\n<p>当然，这种架构也有如下缺点：</p>\n<ul>\n<li>UI线程过于繁忙</li>\n<li>无法支持Canvas的硬件加速以及WebGL</li>\n</ul>\n<p>所以，后期发展成了这样：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P4.PNG\" alt=\"\"></p>\n<p>总结看来，内核发展的趋势是：</p>\n<ul>\n<li>多线程化(可以充分利用多核心CPU)</li>\n<li>硬件加速(可以利用GPU)</li>\n</ul>\n<h3 id=\"分层渲染\"><a href=\"#分层渲染\" class=\"headerlink\" title=\"分层渲染\"></a>分层渲染</h3><p>在阅读这一章之前，我建议读者先去亲自体验一下所谓的“分层渲染”：</p>\n<blockquote>\n<p>打开Chrome浏览器，打开控制台，找到”Layers”，如果没有，那么在控制台右上角更多的图标-&gt;More tools 找到”Layers”，然后随便找个网页打开即可</p>\n</blockquote>\n<p>网页的分层渲染流程主要是下面这样的：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P7.PNG\" alt=\"\"></p>\n<p>(<em>注意：多个RenderObject可能又会对应一个或多个RenderLayer</em>)</p>\n<p>既然才用了分层渲染，那么肯定可以来分层处理，分层渲染有如下优点：</p>\n<ul>\n<li>减少不必要的重新绘制</li>\n<li>可以实现较为复杂的动画</li>\n<li>能够方便实现复杂的CSS样式</li>\n</ul>\n<p>当然，分层渲染是会很影响渲染效率的，可以有好的影响，使用不当也会有差的影响，我们需要合理的控制和使用分层：</p>\n<ul>\n<li>如果小豆腐块分层较多，页面整体的分层数量较大，会导致每帧渲染时遍历分层和计算分层位置耗时较长啊(比较典型的是腾讯网移动端首页)。</li>\n<li>如果可视区域内分层太多且需要绘制的面积太大，渲染性能非常差，甚至无法达到正常显示的地步(比如有一些全屏H5)。</li>\n<li>如果页面几乎没有分层，页面变化时候需要重绘的区域较多。元素内容无变化只有位置发生变化的时候，可以利用分层来避免重绘。</li>\n</ul>\n<p>那么，是什么原因可以导致分层呢？目前每一个浏览器或者不同版本的浏览器分层策略都是有些不同的(虽然总体差不太多)，但最常见的几个分层原因是：transform、Z-index；还有可以使用硬件加速的video、canvas；fixed元素；混合插件(flash等)。关于其他更具体的内容，可以见下文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注:Chrome中符合创建新层的情况：</span><br><span class=\"line\">Layer has 3D or perspective transform CSS properties(有3D元素的属性)</span><br><span class=\"line\">Layer is used by &lt;video&gt; element using accelerated video decoding(video标签并使用加速视频解码)</span><br><span class=\"line\">Layer is used by a &lt;canvas&gt; element with a 3D context or accelerated 2D context(canvas元素并启用3D)</span><br><span class=\"line\">Layer is used for a composited plugin(插件，比如flash)</span><br><span class=\"line\">Layer uses a CSS animation for its opacity or uses an animated webkit transform(CSS动画)</span><br><span class=\"line\">Layer uses accelerated CSS filters(CSS滤镜)</span><br><span class=\"line\">Layer with a composited descendant has information that needs to be in the composited layer tree, such as a clip or reflection(有一个后代元素是独立的layer)</span><br><span class=\"line\">Layer has a sibling with a lower z-index which has a compositing layer (in other words the layer is rendered on top of a composited layer)(元素的相邻元素是独立layer)</span><br></pre></td></tr></table></figure>\n<p>最后，我们总结一下如何合理的设计分层：分层总的原则是，减少渲染重绘面积与减少分层个数和分层总面积：</p>\n<ul>\n<li>相对位置会发生变化的元素需要分层(比如banner图、滚动条)</li>\n<li>元素内容更新比较频繁的需要分层(比如页面中夹杂的倒计时等)</li>\n<li>较长较大的页面注意总的分层个数</li>\n<li>避免某一块区域分层过多，面积过大</li>\n</ul>\n<p>(<em>如果你给一个元素添加上了-webkit-transform: translateZ(0);或者 -webkit-transform: translate3d(0,0,0);属性，那么你就等于告诉了浏览器用GPU来渲染该层，与一般的CPU渲染相比，提升了速度和性能。(我很确定这么做会在Chrome中启用了硬件加速，但在其他平台不做保证。就我得到的资料而言，在大多数浏览器比如Firefox、Safari也是适用的)</em>)</p>\n<p>另外值得一提的是，X5对分层方面做了一定的优化工作，当其检测到分层过多可能会出现显示问题的时候会进行层合并，牺牲显示性能换取显示正确性。</p>\n<p>最后再提出一个小问题：</p>\n<p>以下哪种渲染方式是最优的呢？</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P8.PNG\" alt=\"\"></p>\n<p>这里实际上后者虽然在分层上满足总体原则，但是之前讲到浏览器的分块渲染机制，是按照到可视区域的距离排序的，考虑到这个因素，实际上后者这种方式可能会对分块渲染造成一定的困扰，并且也不是最优的。</p>\n<h3 id=\"动画-amp-canvas-amp-WebGl\"><a href=\"#动画-amp-canvas-amp-WebGl\" class=\"headerlink\" title=\"动画 &amp; canvas &amp; WebGl\"></a>动画 &amp; canvas &amp; WebGl</h3><p>讲最后一部分开始，首先抛出一个问题：CSS动画 or JS动画?</p>\n<p>对内核来说，实际上就是Renderer线程动画还是Compositor线程动画，二者实际上过程如下：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P9.PNG\" alt=\"\"></p>\n<p>所以我们可以看出，Renderer线程是比Compositor线程动画性能差的(在中低端尤其明显)</p>\n<p>另外，无论是JS动画还是CSS动画，动画过程中的重绘以及样式变化都会拖慢动画执行以及引起卡顿<br>以下是一些不会触发重绘或者排版的CSS动画属性：</p>\n<ul>\n<li>cursor</li>\n<li>font-variant</li>\n<li>opacity</li>\n<li>orphans</li>\n<li>perspective</li>\n<li>perspecti-origin</li>\n<li>pointer-events</li>\n<li>transform</li>\n<li>transform-style</li>\n<li>widows</li>\n</ul>\n<p>想要了解更多内容，可以参考<a href=\"https://csstriggers.com/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>这方面最终的建议参考如下：</p>\n<ul>\n<li>尽量使用不会引起重绘的CSS属性动画，例如transform、opacity等</li>\n<li>动画一定要避免触发大量元素重新排版或者大面积重绘</li>\n<li>在有动画执行时，避免其他动画不相关因素引起排版和重绘</li>\n</ul>\n<h4 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h4><p>另外当我们在使用动画的时候，为了避免出现掉帧的情况，最好采用requestAnimationFrame这个API，这个API迎合浏览器的流程，并且能够保证在下一帧绘制的时候上一帧一定出现了：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P11.PNG\" alt=\"\"></p>\n<h3 id=\"3D-canvas\"><a href=\"#3D-canvas\" class=\"headerlink\" title=\"3D canvas\"></a>3D canvas</h3><p>还有值得注意的是，有的时候我们需要涉及大量元素的动画(比如雪花飘落、多个不规则图形变化等)，这个时候如果用CSS动画，Animation动画的元素很多。，导致分层个数非常多，浏览器每帧都需要遍历计算所有分层，导致比较耗时、</p>\n<p>这个时候该怎么办呢？</p>\n<p>2D canvas上场。 </p>\n<p>和CSS动画相比，2D canvas的优点是这样的：</p>\n<ul>\n<li>硬件加速渲染</li>\n<li>渲染流程更优</li>\n</ul>\n<p>其渲染流程如下：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P10.PNG\" alt=\"\"></p>\n<p>实际上以上流程比较耗时的是JS Call这一部分，执行opengl的这一部分还是挺快的。</p>\n<p>HTML 2D canvas 主要绘制如下三种元素：</p>\n<ul>\n<li>图片</li>\n<li>文字</li>\n<li>矢量</li>\n</ul>\n<p>这个过程可以采用硬件加速，硬件加速图片绘制的主要流程：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P12.PNG\" alt=\"\"></p>\n<p>硬件加速文字绘制的主要流程：</p>\n<p><img src=\"https://www.10000h.top/images/data_img/webRender/P13.PNG\" alt=\"\"></p>\n<p>但对于矢量绘制而言，简单的图形，比如点、直线等可以直接使用OpenGL渲染，复杂的图形，如曲线等，无法采用OpenGL绘制。</p>\n<p>对于绘制效率来说，2D Canvas对绘制图片效率较高，绘制文字和矢量效率较低(<strong>所以建议是，我们如果能使用贴图就尽量使用贴图了</strong>)</p>\n<p>还有，有的时候我们需要先绘制到离屏canvas上面，然后再上屏，这个可以充分利用缓存。</p>\n<h3 id=\"3D-canvas-WebGL\"><a href=\"#3D-canvas-WebGL\" class=\"headerlink\" title=\"3D canvas(WebGL)\"></a>3D canvas(WebGL)</h3><p>目前，3D canvas(WebGL)的应用也越来越多，对于这类应用，现在已经有了不少已经成型的庫:</p>\n<ul>\n<li>通用引擎：threeJS、Pixi</li>\n<li>VR视频的专业引擎：krpano、UtoVR</li>\n<li>H5游戏引擎：Egret、Layabox、Cocos</li>\n</ul>\n<p>WebGL虽然包含Web，但本身对前端的要求最低，但是对OpenGL、数学相关的知识要求较高，所以如果前端工程师没有一定的基础，还是采用现在的流行庫。</p>\n<p>X5内核对于WebGl进行了性能上和耗电上的优化，并且也对兼容性错误上报和修复做了一定的工作。</p>\n<hr>\n<p>本文参考腾讯内部讲座资料整理而成，并融入一部分笔者的补充，谢绝任何形式的转载。</p>\n<p>其他优质好文：</p>\n<p><a href=\"http://qingbob.com/javascript-high-performance-animation-and-page-rendering/\" target=\"_blank\" rel=\"noopener\">Javascript高性能动画与页面渲染</a></p>\n"},{"title":"从源码分析sentry的错误信息收集","date":"2018-08-18T10:23:55.000Z","_content":"\nraven.js 是 sentry 为 JavaScript 错误上报提供的 JS-SDK，本篇我们基于其源代码对其原理进行分析，本篇文章只分析前端部分，对应的文件目录是`https://github.com/getsentry/sentry-javascript/tree/master/packages/raven-js`。\n\n首先抛出几个问题：\n\n* **raven.js 是如何收集浏览器错误信息的？**\n* **raven.js 上报的错误信息格式是什么样的？又是如何把这些信息传给后端？支不支持合并上报？**\n* **面包屑（breadcrumbs）是什么？raven.js 如何来收集面包屑信息？**\n* **raven.js 如何和框架配合使用（比如 vue、react）？**\n\n在回答以上这几个问题之前，我们首先来对 raven.js 做一个宏观的分析，主要涉及其文件目录、所引用的第三方框架等。\n\nraven.js 的核心文件内容并不多，其中使用了三个第三方库，放在了 vendor 文件夹下：\n\n* [json-stringify-safe](https://github.com/moll/json-stringify-safe) ：一个对 `JSON.stringify` 的封装，安全的 json 序列化操作函数，不会抛出循环引用的错误。\n\t* 这里面有一个注意点要单独说一下，我们熟知的 `JSON.stringify` , 可以接受三个参数：第一个参数是我们要序列化的对象；第二个参数是对其中键值对的处理函数；第三个参数是控制缩进空格。reven.js 的 `json-stringify-safe` 就是充分利用了这三个参数。\n* [md5](https://github.com/blueimp/JavaScript-MD5)：js 的 md5 函数。\n* [TraceKit](https://github.com/csnover/TraceKit)：TraceKit 是一个已经比较完善的错误收集、堆栈格式化的库，reven.js 的功能在很大程度上对它有所依赖。\n\n除此之外，raven.js 支持插件，官方提供的一些知名库的 sentry 插件主要放在了 plugin 文件夹下面，raven.js 的一些核心文件，则放在了 src 文件夹下面。\n\n### raven.js 是如何收集错误信息的？\n\n我们知道，在前端收集错误，肯定离不开 `window.onerror` 这个函数，那么我们就从这个函数说起。\n\n实际上，这部分工作是 raven.js 引用的第三方库 TraceKit 完成的：\n\n```\nfunction installGlobalHandler() {\n  if (_onErrorHandlerInstalled) { // 一个起到标志作用的全局变量\n    return;\n  }\n  _oldOnerrorHandler = _window.onerror; \n  // _oldOnerrorHandler 是防止对用户其他地方定义的回调函数进行覆盖\n  // 该 _window 经过兼容，实际上就是 window\n  _window.onerror = traceKitWindowOnError;\n  _onErrorHandlerInstalled = true;\n}\n```\n\n相关错误回调函数交给 traceKitWindowOnError 处理，下面我们来看一下 traceKitWindowOnError 函数，为了避免太多冗余代码，我们仅分析一种主要情况：\n\n```\nfunction traceKitWindowOnError(msg, url, lineNo, colNo, ex) {\n\t\n\tvar exception = utils.isErrorEvent(ex) ? ex.error : ex;\n\t//...\n    stack = TraceKit.computeStackTrace(exception);\n    notifyHandlers(stack, true);\n    //...\n   \n    //...\n    if (_oldOnerrorHandler) {\n       return _oldOnerrorHandler.apply(this, arguments);\n    }\n    return false;\n}\n```\n\n其中调用的最重要的一个函数，就是 computeStackTrace，而这个函数也是 TraceKit 的核心函数，简单来讲，它做的事情就是统一格式化报错信息调用栈，因为对于各个浏览器来说，返回的 Error 调用栈信息格式不尽相同，另外甚至还有的浏览器并不返回调用栈，computeStackTrace 函数对这些情况都做了兼容性处理，并且对于一些不返回调用栈的情况，还使用了 caller 来向上回溯函数的调用栈，最终把报错信息转化成一个键相同的对象数组，做到了报错信息格式的统一。\n\nnotifyHandlers 函数则是通知相关的回调函数。 实际上，raven.js 在 install 函数中会调用 TraceKit.report.subscribe 函数，并把对错误的处理逻辑写入回调：\n\n```\nfunction subscribe(handler) {\n    installGlobalHandler();\n    handlers.push(handler);\n}\n```\n\n以上过程完成了错误处理过程中的负责角色转换，并且借助 TraceKit，可以使 raven.js 得到一个结构比较清晰的带有格式化好的调用栈信息的错误内容对象，之后，raven.js 对错误内容进一步处理并最终上报。\n\n下面我们对错误处理 raven.js 控制的部分做了一些梳理：\n\n```\n _handleOnErrorStackInfo: function(stackInfo, options) {\n    options.mechanism = options.mechanism || {\n      type: 'onerror',\n      handled: false\n    };\n    // mechanism 和错误统计来源有关\n\n    if (!this._ignoreOnError) {\n      this._handleStackInfo(stackInfo, options);\n    }\n},\n\n_handleStackInfo: function(stackInfo, options) {\n    var frames = this._prepareFrames(stackInfo, options);\n\n    this._triggerEvent('handle', {\n      stackInfo: stackInfo,\n      options: options\n    });\n\n    this._processException(\n      stackInfo.name,\n      stackInfo.message,\n      stackInfo.url,\n      stackInfo.lineno,\n      frames,\n      options\n    );\n},\n\n_processException: function(type, message, fileurl, lineno, frames, options) {\n    // 首先根据 message 信息判断是否是需要忽略的错误类型\n    // 然后判断出错的文件是否在黑名单中或者白名单中\n    // 接下来对错误内容进行必要的整合与转换，构造出 data 对象\n    // 最后调用上报函数\n    this._send(data);\n}\n\n_send: function(data) {\n\t\n\t// 对 data 进一步处理，增加必要的信息，包括后续会提到的面包屑信息\n\n\t// 交由 _sendProcessedPayload 进行进一步处理\n\tthis._sendProcessedPayload(data);\n}\n\n_sendProcessedPayload: function(data, callback) {\n\n\t// 对 data 增加一些必要的元信息\n\t// 可以通过自定义 globalOptions.transport 的方式来自定义上报函数 \n\t(globalOptions.transport || this._makeRequest).call(this, {\n\t     url: url,\n\t     auth: auth,\n\t     data: data,\n\t     options: globalOptions,\n\t     onSuccess: function success() {\n\t       \n\t     },\n\t     onError: function failure(error) {\n\t       \n\t     }\n\t});\n}    \n\n// 真正发起请求的函数\n_makeRequest: function(opts) {\n\t// 对于支持 fetch 的浏览器，直接使用 fetch 的方式发送 POST 请求\n\t// 如果浏览器不支持 fetch，则使用 XHR 的传统方式发送 POST 请求\n}\n``` \n\n实际上我们可以发现，从拿到已经初步格式化的报错信息，到最终真正执行数据上报，raven.js 的过程非常漫长，这其中我分析有如下几个原因：\n\n* 每个函数只处理一件或者一些事情，保持函数的短小整洁。\n* 部分函数可以做到复用（因为除了自动捕获错误的方式， raven.js 还提供通过 captureException，即 `try {\n    doSomething(a[0])\n} catch(e) {\n    Raven.captureException(e)\n}` 的方式来上报错误，两个过程中有一些函数的调用是有重叠的）。\n\n但是笔者认为，raven.js 的代码设计还有很多值得优化的地方，比如：\n\n* 对最终上报数据（data）的属性处理和增加分散在多个函数，并且有较多可选项目，很难梳理出一个完整的 data 格式，并且不便于维护。\n* 部分函数的拆分必要性不足，并且会增加链路的复杂性，比如 `_processException `、`_sendProcessedPayload `、`_makeRequest `等都只在一个链路中被调用一次。\n* 部分属性重命名会造成资源浪费，由于 TraceKit 部分最终返回的数据格式并不完全满足 raven.js 的需要，所以 raven.js 之后又在较后阶段进行了重命名等处理，实际上这些内容完全可以通过一些其他的方式避免。\n\n最后，非常遗憾，sentry 目前完全不支持合并上报，就算是在同一个事件循环（甚至事件循环的同一个阶段，关于事件循环，可以参考我之前绘制的[一张图](https://www.processon.com/view/link/5b6ec8cbe4b053a09c2fb977)）的两个错误，sentry 都是分开来上报的，这里有一个简单例子：\n\n```javascript\nRaven.config('http://8ec3f1a9f652463bb58191bd0b35f20c@localhost:9000/2').install()\nlet s = window.ss;\n\ntry{\n    let b = s.b\n} catch (e) {\n    Raven.captureException(e)\n    // sentry should report error now\n}\n\ns.nomethod();\n// sentry should report error now\n```\n\n以上例子中，sentry 会发送两个 POST 请求。\n\n### raven.js 最终上报数据的格式\n\n\n这一部分，我们并不会详细地分析 raven.js 上报的数据的每一项内容，仅会给读者展示一个比较典型的情况。\n\n我们看一下对于一个一般的 js 错误，raven.js 上报的 json 中包含哪些内容，下面是一个已经删掉一些冗余内容的典型上报信息：\n\n```\n{\n  \"project\": \"2\",\n  \"logger\": \"javascript\",\n  \"platform\": \"javascript\",\n  \"request\": {\n    \"headers\": {\n      \"User-Agent\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\"\n    },\n    \"url\": \"http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu\"\n  },\n  \"exception\": {\n    \"values\": [\n      {\n        \"type\": \"TypeError\",\n        \"value\": \"Cannot read property 'b' of undefined\",\n        \"stacktrace\": {\n          \"frames\": [\n            {\n              \"filename\": \"http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu\",\n              \"lineno\": 19,\n              \"colno\": 19,\n              \"function\": \"?\",\n              \"in_app\": true\n            }\n          ]\n        }\n      }\n    ],\n    \"mechanism\": {\n      \"type\": \"generic\",\n      \"handled\": true\n    }\n  },\n  \"transaction\": \"http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu\",\n  \"extra\": {\n    \"session:duration\": 6\n  },\n  \"breadcrumbs\": {\n    \"values\": [\n      {\n        \"timestamp\": 1534257309.996,\n        \"message\": \"_prepareFrames stackInfo: [object Object]\",\n        \"level\": \"log\",\n        \"category\": \"console\"\n      },\n      // ...\n   ]\n  },\n  \"event_id\": \"ea0334adaf9d43b78e72da2b10e084a9\",\n  \"trimHeadFrames\": 0\n}\n```\n\n其中支持的信息类型重点分为以下几种：\n\n* sentry 基本配置信息，包括库本身的配置和使用者的配置信息，以及用户的一些自定义信息\n* 错误信息，主要包括错误调用栈信息\n* request 信息，主要包括浏览器的 User-Agent、当前请求地址等\n* 面包屑信息，关于面包屑具体指的是什么，我们会在下一环节进行介绍\n\n### raven.js 面包屑收集\n\n面包屑信息，也就是错误在发生之前，一些用户、浏览器的行为信息，raven.js 实现了一个简单的队列（有一个最大条目长度，默认为 100），这个队列在时刻记录着这些信息，一旦错误发生并且需要上报，raven.js 就把这个队列的信息内容，作为面包屑 breadcrumbs，发回客户端。\n\n面包屑信息主要包括这几类：\n\n* 用户对某个元素的点击或者用户对某个可输入元素的输入\n* 发送的 http 请求\n* console 打印的信息（支持配置 'debug', 'info', 'warn', 'error', 'log' 等不同级别）\n* window.location 变化信息\n\n接下来，我们对这几类面包屑信息 sentry 的记录实现进行简单的分析。\n\n实际上，sentry 对这些信息记录的方式比较一致，都是通过对原声的函数进行包装，并且在包装好的函数中增加自己的钩子函数，来实现触发时候的事件记录，实际上，sentry 总共包装的函数有：\n\n* window.setTimeout\n* window.setInterval\n* window.requestAnimationFrame\n* EventTarget.addEventListener\n* EventTarget.removeEventListener\n* XMLHTTPRequest.open\n* XMLHTTPRequest.send\n* window.fetch\n* History.pushState\n* History.replaceState\n\n>备注：这里包装的所有函数，其中有一部分只是使 raven.js 具有捕获回调函数中错误的能力（对回调函数进行包装）\n\n接下来我们看一段典型的代码，来分析 raven.js 是如何记录用户的点击和输入信息的（通过对 EventTarget.addEventListener 进行封装）：\n\n```javascript\nfunction wrapEventTarget(global) {\n      var proto = _window[global] && _window[global].prototype;\n      if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n        fill(\n          proto,\n          'addEventListener',\n          function(orig) {\n            return function(evtName, fn, capture, secure) {\n              try {\n                if (fn && fn.handleEvent) { //兼容通过 handleEvent 的方式进行绑定事件\n                  fn.handleEvent = self.wrap(\n                    {\n                      mechanism: {\n                        type: 'instrument',\n                        data: {\n                          target: global,\n                          function: 'handleEvent',\n                          handler: (fn && fn.name) || '<anonymous>'\n                        }\n                      }\n                    },\n                    fn.handleEvent\n                  );\n                }\n              } catch (err) {\n              }\n\n              var before, clickHandler, keypressHandler;\n\n              if (\n                autoBreadcrumbs &&\n                autoBreadcrumbs.dom &&\n                (global === 'EventTarget' || global === 'Node')\n              ) {\n                // NOTE: generating multiple handlers per addEventListener invocation, should\n                //       revisit and verify we can just use one (almost certainly)\n                clickHandler = self._breadcrumbEventHandler('click');\n                keypressHandler = self._keypressEventHandler();\n                before = function(evt) { // 钩子函数，用于在回调函数调用的时候记录信息\n                  if (!evt) return;\n\n                  var eventType;\n                  try {\n                    eventType = evt.type;\n                  } catch (e) {\n                    // just accessing event properties can throw an exception in some rare circumstances\n                    // see: https://github.com/getsentry/raven-js/issues/838\n                    return;\n                  }\n                  if (eventType === 'click') return clickHandler(evt);\n                  else if (eventType === 'keypress') return keypressHandler(evt);\n                };\n              }\n              return orig.call(\n                this,\n                evtName,\n                self.wrap(\n                  {\n                    mechanism: {\n                      type: 'instrument',\n                      data: {\n                        target: global,\n                        function: 'addEventListener',\n                        handler: (fn && fn.name) || '<anonymous>'\n                      }\n                    }\n                  },\n                  fn,\n                  before\n                ),\n                capture,\n                secure\n              );\n            };\n          },\n          wrappedBuiltIns\n        );\n        fill(\n          proto,\n          'removeEventListener',\n          function(orig) {\n            return function(evt, fn, capture, secure) {\n              try {\n                fn = fn && (fn.__raven_wrapper__ ? fn.__raven_wrapper__ : fn);\n              } catch (e) {\n                // ignore, accessing __raven_wrapper__ will throw in some Selenium environments\n              }\n              return orig.call(this, evt, fn, capture, secure);\n            };\n          },\n          wrappedBuiltIns\n        );\n      }\n    }\n```\n\n以上代码兼容了通过 handleEvent 的方式进行绑定事件（如果没有听说过这种方式，可以在[这里](http://www.ayqy.net/blog/handleevent%E4%B8%8Eaddeventlistener/)补充一些相关的知识）。\n\n默认情况下，raven.js 只记录通过 `EventTarget.addEventListener` 绑定的点击和输入信息，实际上这是比较科学的，并且这些信息较为有效。另外，raven.js 也提供了记录所有点击和输入信息的可选项，其实现方式更为简单，直接在 document 上添加相关的监听即可。\n\n### raven.js 如何和框架配合使用\n\nraven.js 和框架配合使用的方式非常简单，但是我们要知道，很多框架内置了错误边界处理，或者对错误进行转义。以至于我们通过 window.onerror 的方式得不到完整的错误信息。同时，有些框架提供了错误处理的接口（比如 vue），利用错误处理的接口，我们能够获取到和错误有关的更多更重要的信息。\n\nraven.js 利用各个框架的官方接口，提供了 vue、require.js、angular、ember、react-native 等各个框架的官方插件。\n\n插件内容本身非常简单，我们可以看一下 vue 插件的代码：\n\n```\nfunction formatComponentName(vm) {\n  if (vm.$root === vm) {\n    return 'root instance';\n  }\n  var name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;\n  return (\n    (name ? 'component <' + name + '>' : 'anonymous component') +\n    (vm._isVue && vm.$options.__file ? ' at ' + vm.$options.__file : '')\n  );\n}\n\nfunction vuePlugin(Raven, Vue) {\n  Vue = Vue || window.Vue;\n\n  // quit if Vue isn't on the page\n  if (!Vue || !Vue.config) return;\n\n  var _oldOnError = Vue.config.errorHandler;\n  Vue.config.errorHandler = function VueErrorHandler(error, vm, info) {\n    var metaData = {};\n\n    // vm and lifecycleHook are not always available\n    if (Object.prototype.toString.call(vm) === '[object Object]') {\n      metaData.componentName = formatComponentName(vm);\n      metaData.propsData = vm.$options.propsData;\n    }\n\n    if (typeof info !== 'undefined') {\n      metaData.lifecycleHook = info;\n    }\n\n    Raven.captureException(error, {\n      extra: metaData\n    });\n\n    if (typeof _oldOnError === 'function') {\n      _oldOnError.call(this, error, vm, info);\n    }\n  };\n}\n\nmodule.exports = vuePlugin;\n```\n\n应该不用进行过多解释。\n\n你也许想知道为什么没有提供 react 插件，事实上，react 16 以后才引入了[Error Boundaries](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)，这种方式由于灵活性太强，并不太适合使用插件，另外，就算不使用插件，也非常方便地使用 raven.js 进行错误上报，可以参考[这里](https://docs.sentry.io/clients/javascript/integrations/react/)\n\n>但笔者认为，目前 react 的引入方式会对源代码进行侵入，并且比较难通过构建的方式进行 sentry 的配置，也许我们可以寻找更好的方式。\n\n完。\n\n","source":"_posts/从源码分析sentry的错误信息收集.md","raw":"---\ntitle: 从源码分析sentry的错误信息收集\ndate: 2018-08-18 19:23:55\ntags:\n    - javascript\n    - 前端监控\n---\n\nraven.js 是 sentry 为 JavaScript 错误上报提供的 JS-SDK，本篇我们基于其源代码对其原理进行分析，本篇文章只分析前端部分，对应的文件目录是`https://github.com/getsentry/sentry-javascript/tree/master/packages/raven-js`。\n\n首先抛出几个问题：\n\n* **raven.js 是如何收集浏览器错误信息的？**\n* **raven.js 上报的错误信息格式是什么样的？又是如何把这些信息传给后端？支不支持合并上报？**\n* **面包屑（breadcrumbs）是什么？raven.js 如何来收集面包屑信息？**\n* **raven.js 如何和框架配合使用（比如 vue、react）？**\n\n在回答以上这几个问题之前，我们首先来对 raven.js 做一个宏观的分析，主要涉及其文件目录、所引用的第三方框架等。\n\nraven.js 的核心文件内容并不多，其中使用了三个第三方库，放在了 vendor 文件夹下：\n\n* [json-stringify-safe](https://github.com/moll/json-stringify-safe) ：一个对 `JSON.stringify` 的封装，安全的 json 序列化操作函数，不会抛出循环引用的错误。\n\t* 这里面有一个注意点要单独说一下，我们熟知的 `JSON.stringify` , 可以接受三个参数：第一个参数是我们要序列化的对象；第二个参数是对其中键值对的处理函数；第三个参数是控制缩进空格。reven.js 的 `json-stringify-safe` 就是充分利用了这三个参数。\n* [md5](https://github.com/blueimp/JavaScript-MD5)：js 的 md5 函数。\n* [TraceKit](https://github.com/csnover/TraceKit)：TraceKit 是一个已经比较完善的错误收集、堆栈格式化的库，reven.js 的功能在很大程度上对它有所依赖。\n\n除此之外，raven.js 支持插件，官方提供的一些知名库的 sentry 插件主要放在了 plugin 文件夹下面，raven.js 的一些核心文件，则放在了 src 文件夹下面。\n\n### raven.js 是如何收集错误信息的？\n\n我们知道，在前端收集错误，肯定离不开 `window.onerror` 这个函数，那么我们就从这个函数说起。\n\n实际上，这部分工作是 raven.js 引用的第三方库 TraceKit 完成的：\n\n```\nfunction installGlobalHandler() {\n  if (_onErrorHandlerInstalled) { // 一个起到标志作用的全局变量\n    return;\n  }\n  _oldOnerrorHandler = _window.onerror; \n  // _oldOnerrorHandler 是防止对用户其他地方定义的回调函数进行覆盖\n  // 该 _window 经过兼容，实际上就是 window\n  _window.onerror = traceKitWindowOnError;\n  _onErrorHandlerInstalled = true;\n}\n```\n\n相关错误回调函数交给 traceKitWindowOnError 处理，下面我们来看一下 traceKitWindowOnError 函数，为了避免太多冗余代码，我们仅分析一种主要情况：\n\n```\nfunction traceKitWindowOnError(msg, url, lineNo, colNo, ex) {\n\t\n\tvar exception = utils.isErrorEvent(ex) ? ex.error : ex;\n\t//...\n    stack = TraceKit.computeStackTrace(exception);\n    notifyHandlers(stack, true);\n    //...\n   \n    //...\n    if (_oldOnerrorHandler) {\n       return _oldOnerrorHandler.apply(this, arguments);\n    }\n    return false;\n}\n```\n\n其中调用的最重要的一个函数，就是 computeStackTrace，而这个函数也是 TraceKit 的核心函数，简单来讲，它做的事情就是统一格式化报错信息调用栈，因为对于各个浏览器来说，返回的 Error 调用栈信息格式不尽相同，另外甚至还有的浏览器并不返回调用栈，computeStackTrace 函数对这些情况都做了兼容性处理，并且对于一些不返回调用栈的情况，还使用了 caller 来向上回溯函数的调用栈，最终把报错信息转化成一个键相同的对象数组，做到了报错信息格式的统一。\n\nnotifyHandlers 函数则是通知相关的回调函数。 实际上，raven.js 在 install 函数中会调用 TraceKit.report.subscribe 函数，并把对错误的处理逻辑写入回调：\n\n```\nfunction subscribe(handler) {\n    installGlobalHandler();\n    handlers.push(handler);\n}\n```\n\n以上过程完成了错误处理过程中的负责角色转换，并且借助 TraceKit，可以使 raven.js 得到一个结构比较清晰的带有格式化好的调用栈信息的错误内容对象，之后，raven.js 对错误内容进一步处理并最终上报。\n\n下面我们对错误处理 raven.js 控制的部分做了一些梳理：\n\n```\n _handleOnErrorStackInfo: function(stackInfo, options) {\n    options.mechanism = options.mechanism || {\n      type: 'onerror',\n      handled: false\n    };\n    // mechanism 和错误统计来源有关\n\n    if (!this._ignoreOnError) {\n      this._handleStackInfo(stackInfo, options);\n    }\n},\n\n_handleStackInfo: function(stackInfo, options) {\n    var frames = this._prepareFrames(stackInfo, options);\n\n    this._triggerEvent('handle', {\n      stackInfo: stackInfo,\n      options: options\n    });\n\n    this._processException(\n      stackInfo.name,\n      stackInfo.message,\n      stackInfo.url,\n      stackInfo.lineno,\n      frames,\n      options\n    );\n},\n\n_processException: function(type, message, fileurl, lineno, frames, options) {\n    // 首先根据 message 信息判断是否是需要忽略的错误类型\n    // 然后判断出错的文件是否在黑名单中或者白名单中\n    // 接下来对错误内容进行必要的整合与转换，构造出 data 对象\n    // 最后调用上报函数\n    this._send(data);\n}\n\n_send: function(data) {\n\t\n\t// 对 data 进一步处理，增加必要的信息，包括后续会提到的面包屑信息\n\n\t// 交由 _sendProcessedPayload 进行进一步处理\n\tthis._sendProcessedPayload(data);\n}\n\n_sendProcessedPayload: function(data, callback) {\n\n\t// 对 data 增加一些必要的元信息\n\t// 可以通过自定义 globalOptions.transport 的方式来自定义上报函数 \n\t(globalOptions.transport || this._makeRequest).call(this, {\n\t     url: url,\n\t     auth: auth,\n\t     data: data,\n\t     options: globalOptions,\n\t     onSuccess: function success() {\n\t       \n\t     },\n\t     onError: function failure(error) {\n\t       \n\t     }\n\t});\n}    \n\n// 真正发起请求的函数\n_makeRequest: function(opts) {\n\t// 对于支持 fetch 的浏览器，直接使用 fetch 的方式发送 POST 请求\n\t// 如果浏览器不支持 fetch，则使用 XHR 的传统方式发送 POST 请求\n}\n``` \n\n实际上我们可以发现，从拿到已经初步格式化的报错信息，到最终真正执行数据上报，raven.js 的过程非常漫长，这其中我分析有如下几个原因：\n\n* 每个函数只处理一件或者一些事情，保持函数的短小整洁。\n* 部分函数可以做到复用（因为除了自动捕获错误的方式， raven.js 还提供通过 captureException，即 `try {\n    doSomething(a[0])\n} catch(e) {\n    Raven.captureException(e)\n}` 的方式来上报错误，两个过程中有一些函数的调用是有重叠的）。\n\n但是笔者认为，raven.js 的代码设计还有很多值得优化的地方，比如：\n\n* 对最终上报数据（data）的属性处理和增加分散在多个函数，并且有较多可选项目，很难梳理出一个完整的 data 格式，并且不便于维护。\n* 部分函数的拆分必要性不足，并且会增加链路的复杂性，比如 `_processException `、`_sendProcessedPayload `、`_makeRequest `等都只在一个链路中被调用一次。\n* 部分属性重命名会造成资源浪费，由于 TraceKit 部分最终返回的数据格式并不完全满足 raven.js 的需要，所以 raven.js 之后又在较后阶段进行了重命名等处理，实际上这些内容完全可以通过一些其他的方式避免。\n\n最后，非常遗憾，sentry 目前完全不支持合并上报，就算是在同一个事件循环（甚至事件循环的同一个阶段，关于事件循环，可以参考我之前绘制的[一张图](https://www.processon.com/view/link/5b6ec8cbe4b053a09c2fb977)）的两个错误，sentry 都是分开来上报的，这里有一个简单例子：\n\n```javascript\nRaven.config('http://8ec3f1a9f652463bb58191bd0b35f20c@localhost:9000/2').install()\nlet s = window.ss;\n\ntry{\n    let b = s.b\n} catch (e) {\n    Raven.captureException(e)\n    // sentry should report error now\n}\n\ns.nomethod();\n// sentry should report error now\n```\n\n以上例子中，sentry 会发送两个 POST 请求。\n\n### raven.js 最终上报数据的格式\n\n\n这一部分，我们并不会详细地分析 raven.js 上报的数据的每一项内容，仅会给读者展示一个比较典型的情况。\n\n我们看一下对于一个一般的 js 错误，raven.js 上报的 json 中包含哪些内容，下面是一个已经删掉一些冗余内容的典型上报信息：\n\n```\n{\n  \"project\": \"2\",\n  \"logger\": \"javascript\",\n  \"platform\": \"javascript\",\n  \"request\": {\n    \"headers\": {\n      \"User-Agent\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\"\n    },\n    \"url\": \"http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu\"\n  },\n  \"exception\": {\n    \"values\": [\n      {\n        \"type\": \"TypeError\",\n        \"value\": \"Cannot read property 'b' of undefined\",\n        \"stacktrace\": {\n          \"frames\": [\n            {\n              \"filename\": \"http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu\",\n              \"lineno\": 19,\n              \"colno\": 19,\n              \"function\": \"?\",\n              \"in_app\": true\n            }\n          ]\n        }\n      }\n    ],\n    \"mechanism\": {\n      \"type\": \"generic\",\n      \"handled\": true\n    }\n  },\n  \"transaction\": \"http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu\",\n  \"extra\": {\n    \"session:duration\": 6\n  },\n  \"breadcrumbs\": {\n    \"values\": [\n      {\n        \"timestamp\": 1534257309.996,\n        \"message\": \"_prepareFrames stackInfo: [object Object]\",\n        \"level\": \"log\",\n        \"category\": \"console\"\n      },\n      // ...\n   ]\n  },\n  \"event_id\": \"ea0334adaf9d43b78e72da2b10e084a9\",\n  \"trimHeadFrames\": 0\n}\n```\n\n其中支持的信息类型重点分为以下几种：\n\n* sentry 基本配置信息，包括库本身的配置和使用者的配置信息，以及用户的一些自定义信息\n* 错误信息，主要包括错误调用栈信息\n* request 信息，主要包括浏览器的 User-Agent、当前请求地址等\n* 面包屑信息，关于面包屑具体指的是什么，我们会在下一环节进行介绍\n\n### raven.js 面包屑收集\n\n面包屑信息，也就是错误在发生之前，一些用户、浏览器的行为信息，raven.js 实现了一个简单的队列（有一个最大条目长度，默认为 100），这个队列在时刻记录着这些信息，一旦错误发生并且需要上报，raven.js 就把这个队列的信息内容，作为面包屑 breadcrumbs，发回客户端。\n\n面包屑信息主要包括这几类：\n\n* 用户对某个元素的点击或者用户对某个可输入元素的输入\n* 发送的 http 请求\n* console 打印的信息（支持配置 'debug', 'info', 'warn', 'error', 'log' 等不同级别）\n* window.location 变化信息\n\n接下来，我们对这几类面包屑信息 sentry 的记录实现进行简单的分析。\n\n实际上，sentry 对这些信息记录的方式比较一致，都是通过对原声的函数进行包装，并且在包装好的函数中增加自己的钩子函数，来实现触发时候的事件记录，实际上，sentry 总共包装的函数有：\n\n* window.setTimeout\n* window.setInterval\n* window.requestAnimationFrame\n* EventTarget.addEventListener\n* EventTarget.removeEventListener\n* XMLHTTPRequest.open\n* XMLHTTPRequest.send\n* window.fetch\n* History.pushState\n* History.replaceState\n\n>备注：这里包装的所有函数，其中有一部分只是使 raven.js 具有捕获回调函数中错误的能力（对回调函数进行包装）\n\n接下来我们看一段典型的代码，来分析 raven.js 是如何记录用户的点击和输入信息的（通过对 EventTarget.addEventListener 进行封装）：\n\n```javascript\nfunction wrapEventTarget(global) {\n      var proto = _window[global] && _window[global].prototype;\n      if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n        fill(\n          proto,\n          'addEventListener',\n          function(orig) {\n            return function(evtName, fn, capture, secure) {\n              try {\n                if (fn && fn.handleEvent) { //兼容通过 handleEvent 的方式进行绑定事件\n                  fn.handleEvent = self.wrap(\n                    {\n                      mechanism: {\n                        type: 'instrument',\n                        data: {\n                          target: global,\n                          function: 'handleEvent',\n                          handler: (fn && fn.name) || '<anonymous>'\n                        }\n                      }\n                    },\n                    fn.handleEvent\n                  );\n                }\n              } catch (err) {\n              }\n\n              var before, clickHandler, keypressHandler;\n\n              if (\n                autoBreadcrumbs &&\n                autoBreadcrumbs.dom &&\n                (global === 'EventTarget' || global === 'Node')\n              ) {\n                // NOTE: generating multiple handlers per addEventListener invocation, should\n                //       revisit and verify we can just use one (almost certainly)\n                clickHandler = self._breadcrumbEventHandler('click');\n                keypressHandler = self._keypressEventHandler();\n                before = function(evt) { // 钩子函数，用于在回调函数调用的时候记录信息\n                  if (!evt) return;\n\n                  var eventType;\n                  try {\n                    eventType = evt.type;\n                  } catch (e) {\n                    // just accessing event properties can throw an exception in some rare circumstances\n                    // see: https://github.com/getsentry/raven-js/issues/838\n                    return;\n                  }\n                  if (eventType === 'click') return clickHandler(evt);\n                  else if (eventType === 'keypress') return keypressHandler(evt);\n                };\n              }\n              return orig.call(\n                this,\n                evtName,\n                self.wrap(\n                  {\n                    mechanism: {\n                      type: 'instrument',\n                      data: {\n                        target: global,\n                        function: 'addEventListener',\n                        handler: (fn && fn.name) || '<anonymous>'\n                      }\n                    }\n                  },\n                  fn,\n                  before\n                ),\n                capture,\n                secure\n              );\n            };\n          },\n          wrappedBuiltIns\n        );\n        fill(\n          proto,\n          'removeEventListener',\n          function(orig) {\n            return function(evt, fn, capture, secure) {\n              try {\n                fn = fn && (fn.__raven_wrapper__ ? fn.__raven_wrapper__ : fn);\n              } catch (e) {\n                // ignore, accessing __raven_wrapper__ will throw in some Selenium environments\n              }\n              return orig.call(this, evt, fn, capture, secure);\n            };\n          },\n          wrappedBuiltIns\n        );\n      }\n    }\n```\n\n以上代码兼容了通过 handleEvent 的方式进行绑定事件（如果没有听说过这种方式，可以在[这里](http://www.ayqy.net/blog/handleevent%E4%B8%8Eaddeventlistener/)补充一些相关的知识）。\n\n默认情况下，raven.js 只记录通过 `EventTarget.addEventListener` 绑定的点击和输入信息，实际上这是比较科学的，并且这些信息较为有效。另外，raven.js 也提供了记录所有点击和输入信息的可选项，其实现方式更为简单，直接在 document 上添加相关的监听即可。\n\n### raven.js 如何和框架配合使用\n\nraven.js 和框架配合使用的方式非常简单，但是我们要知道，很多框架内置了错误边界处理，或者对错误进行转义。以至于我们通过 window.onerror 的方式得不到完整的错误信息。同时，有些框架提供了错误处理的接口（比如 vue），利用错误处理的接口，我们能够获取到和错误有关的更多更重要的信息。\n\nraven.js 利用各个框架的官方接口，提供了 vue、require.js、angular、ember、react-native 等各个框架的官方插件。\n\n插件内容本身非常简单，我们可以看一下 vue 插件的代码：\n\n```\nfunction formatComponentName(vm) {\n  if (vm.$root === vm) {\n    return 'root instance';\n  }\n  var name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;\n  return (\n    (name ? 'component <' + name + '>' : 'anonymous component') +\n    (vm._isVue && vm.$options.__file ? ' at ' + vm.$options.__file : '')\n  );\n}\n\nfunction vuePlugin(Raven, Vue) {\n  Vue = Vue || window.Vue;\n\n  // quit if Vue isn't on the page\n  if (!Vue || !Vue.config) return;\n\n  var _oldOnError = Vue.config.errorHandler;\n  Vue.config.errorHandler = function VueErrorHandler(error, vm, info) {\n    var metaData = {};\n\n    // vm and lifecycleHook are not always available\n    if (Object.prototype.toString.call(vm) === '[object Object]') {\n      metaData.componentName = formatComponentName(vm);\n      metaData.propsData = vm.$options.propsData;\n    }\n\n    if (typeof info !== 'undefined') {\n      metaData.lifecycleHook = info;\n    }\n\n    Raven.captureException(error, {\n      extra: metaData\n    });\n\n    if (typeof _oldOnError === 'function') {\n      _oldOnError.call(this, error, vm, info);\n    }\n  };\n}\n\nmodule.exports = vuePlugin;\n```\n\n应该不用进行过多解释。\n\n你也许想知道为什么没有提供 react 插件，事实上，react 16 以后才引入了[Error Boundaries](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)，这种方式由于灵活性太强，并不太适合使用插件，另外，就算不使用插件，也非常方便地使用 raven.js 进行错误上报，可以参考[这里](https://docs.sentry.io/clients/javascript/integrations/react/)\n\n>但笔者认为，目前 react 的引入方式会对源代码进行侵入，并且比较难通过构建的方式进行 sentry 的配置，也许我们可以寻找更好的方式。\n\n完。\n\n","slug":"从源码分析sentry的错误信息收集","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds1c002agxy02ig9hjss","content":"<p>raven.js 是 sentry 为 JavaScript 错误上报提供的 JS-SDK，本篇我们基于其源代码对其原理进行分析，本篇文章只分析前端部分，对应的文件目录是<code>https://github.com/getsentry/sentry-javascript/tree/master/packages/raven-js</code>。</p>\n<p>首先抛出几个问题：</p>\n<ul>\n<li><strong>raven.js 是如何收集浏览器错误信息的？</strong></li>\n<li><strong>raven.js 上报的错误信息格式是什么样的？又是如何把这些信息传给后端？支不支持合并上报？</strong></li>\n<li><strong>面包屑（breadcrumbs）是什么？raven.js 如何来收集面包屑信息？</strong></li>\n<li><strong>raven.js 如何和框架配合使用（比如 vue、react）？</strong></li>\n</ul>\n<p>在回答以上这几个问题之前，我们首先来对 raven.js 做一个宏观的分析，主要涉及其文件目录、所引用的第三方框架等。</p>\n<p>raven.js 的核心文件内容并不多，其中使用了三个第三方库，放在了 vendor 文件夹下：</p>\n<ul>\n<li><a href=\"https://github.com/moll/json-stringify-safe\" target=\"_blank\" rel=\"noopener\">json-stringify-safe</a> ：一个对 <code>JSON.stringify</code> 的封装，安全的 json 序列化操作函数，不会抛出循环引用的错误。<ul>\n<li>这里面有一个注意点要单独说一下，我们熟知的 <code>JSON.stringify</code> , 可以接受三个参数：第一个参数是我们要序列化的对象；第二个参数是对其中键值对的处理函数；第三个参数是控制缩进空格。reven.js 的 <code>json-stringify-safe</code> 就是充分利用了这三个参数。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/blueimp/JavaScript-MD5\" target=\"_blank\" rel=\"noopener\">md5</a>：js 的 md5 函数。</li>\n<li><a href=\"https://github.com/csnover/TraceKit\" target=\"_blank\" rel=\"noopener\">TraceKit</a>：TraceKit 是一个已经比较完善的错误收集、堆栈格式化的库，reven.js 的功能在很大程度上对它有所依赖。</li>\n</ul>\n<p>除此之外，raven.js 支持插件，官方提供的一些知名库的 sentry 插件主要放在了 plugin 文件夹下面，raven.js 的一些核心文件，则放在了 src 文件夹下面。</p>\n<h3 id=\"raven-js-是如何收集错误信息的？\"><a href=\"#raven-js-是如何收集错误信息的？\" class=\"headerlink\" title=\"raven.js 是如何收集错误信息的？\"></a>raven.js 是如何收集错误信息的？</h3><p>我们知道，在前端收集错误，肯定离不开 <code>window.onerror</code> 这个函数，那么我们就从这个函数说起。</p>\n<p>实际上，这部分工作是 raven.js 引用的第三方库 TraceKit 完成的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function installGlobalHandler() &#123;</span><br><span class=\"line\">  if (_onErrorHandlerInstalled) &#123; // 一个起到标志作用的全局变量</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _oldOnerrorHandler = _window.onerror; </span><br><span class=\"line\">  // _oldOnerrorHandler 是防止对用户其他地方定义的回调函数进行覆盖</span><br><span class=\"line\">  // 该 _window 经过兼容，实际上就是 window</span><br><span class=\"line\">  _window.onerror = traceKitWindowOnError;</span><br><span class=\"line\">  _onErrorHandlerInstalled = true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关错误回调函数交给 traceKitWindowOnError 处理，下面我们来看一下 traceKitWindowOnError 函数，为了避免太多冗余代码，我们仅分析一种主要情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function traceKitWindowOnError(msg, url, lineNo, colNo, ex) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvar exception = utils.isErrorEvent(ex) ? ex.error : ex;</span><br><span class=\"line\">\t//...</span><br><span class=\"line\">    stack = TraceKit.computeStackTrace(exception);</span><br><span class=\"line\">    notifyHandlers(stack, true);</span><br><span class=\"line\">    //...</span><br><span class=\"line\">   </span><br><span class=\"line\">    //...</span><br><span class=\"line\">    if (_oldOnerrorHandler) &#123;</span><br><span class=\"line\">       return _oldOnerrorHandler.apply(this, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用的最重要的一个函数，就是 computeStackTrace，而这个函数也是 TraceKit 的核心函数，简单来讲，它做的事情就是统一格式化报错信息调用栈，因为对于各个浏览器来说，返回的 Error 调用栈信息格式不尽相同，另外甚至还有的浏览器并不返回调用栈，computeStackTrace 函数对这些情况都做了兼容性处理，并且对于一些不返回调用栈的情况，还使用了 caller 来向上回溯函数的调用栈，最终把报错信息转化成一个键相同的对象数组，做到了报错信息格式的统一。</p>\n<p>notifyHandlers 函数则是通知相关的回调函数。 实际上，raven.js 在 install 函数中会调用 TraceKit.report.subscribe 函数，并把对错误的处理逻辑写入回调：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function subscribe(handler) &#123;</span><br><span class=\"line\">    installGlobalHandler();</span><br><span class=\"line\">    handlers.push(handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上过程完成了错误处理过程中的负责角色转换，并且借助 TraceKit，可以使 raven.js 得到一个结构比较清晰的带有格式化好的调用栈信息的错误内容对象，之后，raven.js 对错误内容进一步处理并最终上报。</p>\n<p>下面我们对错误处理 raven.js 控制的部分做了一些梳理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> _handleOnErrorStackInfo: function(stackInfo, options) &#123;</span><br><span class=\"line\">    options.mechanism = options.mechanism || &#123;</span><br><span class=\"line\">      type: &apos;onerror&apos;,</span><br><span class=\"line\">      handled: false</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    // mechanism 和错误统计来源有关</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!this._ignoreOnError) &#123;</span><br><span class=\"line\">      this._handleStackInfo(stackInfo, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_handleStackInfo: function(stackInfo, options) &#123;</span><br><span class=\"line\">    var frames = this._prepareFrames(stackInfo, options);</span><br><span class=\"line\"></span><br><span class=\"line\">    this._triggerEvent(&apos;handle&apos;, &#123;</span><br><span class=\"line\">      stackInfo: stackInfo,</span><br><span class=\"line\">      options: options</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    this._processException(</span><br><span class=\"line\">      stackInfo.name,</span><br><span class=\"line\">      stackInfo.message,</span><br><span class=\"line\">      stackInfo.url,</span><br><span class=\"line\">      stackInfo.lineno,</span><br><span class=\"line\">      frames,</span><br><span class=\"line\">      options</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_processException: function(type, message, fileurl, lineno, frames, options) &#123;</span><br><span class=\"line\">    // 首先根据 message 信息判断是否是需要忽略的错误类型</span><br><span class=\"line\">    // 然后判断出错的文件是否在黑名单中或者白名单中</span><br><span class=\"line\">    // 接下来对错误内容进行必要的整合与转换，构造出 data 对象</span><br><span class=\"line\">    // 最后调用上报函数</span><br><span class=\"line\">    this._send(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_send: function(data) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 对 data 进一步处理，增加必要的信息，包括后续会提到的面包屑信息</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 交由 _sendProcessedPayload 进行进一步处理</span><br><span class=\"line\">\tthis._sendProcessedPayload(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_sendProcessedPayload: function(data, callback) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 对 data 增加一些必要的元信息</span><br><span class=\"line\">\t// 可以通过自定义 globalOptions.transport 的方式来自定义上报函数 </span><br><span class=\"line\">\t(globalOptions.transport || this._makeRequest).call(this, &#123;</span><br><span class=\"line\">\t     url: url,</span><br><span class=\"line\">\t     auth: auth,</span><br><span class=\"line\">\t     data: data,</span><br><span class=\"line\">\t     options: globalOptions,</span><br><span class=\"line\">\t     onSuccess: function success() &#123;</span><br><span class=\"line\">\t       </span><br><span class=\"line\">\t     &#125;,</span><br><span class=\"line\">\t     onError: function failure(error) &#123;</span><br><span class=\"line\">\t       </span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">// 真正发起请求的函数</span><br><span class=\"line\">_makeRequest: function(opts) &#123;</span><br><span class=\"line\">\t// 对于支持 fetch 的浏览器，直接使用 fetch 的方式发送 POST 请求</span><br><span class=\"line\">\t// 如果浏览器不支持 fetch，则使用 XHR 的传统方式发送 POST 请求</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">实际上我们可以发现，从拿到已经初步格式化的报错信息，到最终真正执行数据上报，raven.js 的过程非常漫长，这其中我分析有如下几个原因：</span><br><span class=\"line\"></span><br><span class=\"line\">* 每个函数只处理一件或者一些事情，保持函数的短小整洁。</span><br><span class=\"line\">* 部分函数可以做到复用（因为除了自动捕获错误的方式， raven.js 还提供通过 captureException，即 `try &#123;</span><br><span class=\"line\">    doSomething(a[0])</span><br><span class=\"line\">&#125; catch(e) &#123;</span><br><span class=\"line\">    Raven.captureException(e)</span><br><span class=\"line\">&#125;` 的方式来上报错误，两个过程中有一些函数的调用是有重叠的）。</span><br><span class=\"line\"></span><br><span class=\"line\">但是笔者认为，raven.js 的代码设计还有很多值得优化的地方，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">* 对最终上报数据（data）的属性处理和增加分散在多个函数，并且有较多可选项目，很难梳理出一个完整的 data 格式，并且不便于维护。</span><br><span class=\"line\">* 部分函数的拆分必要性不足，并且会增加链路的复杂性，比如 `_processException `、`_sendProcessedPayload `、`_makeRequest `等都只在一个链路中被调用一次。</span><br><span class=\"line\">* 部分属性重命名会造成资源浪费，由于 TraceKit 部分最终返回的数据格式并不完全满足 raven.js 的需要，所以 raven.js 之后又在较后阶段进行了重命名等处理，实际上这些内容完全可以通过一些其他的方式避免。</span><br><span class=\"line\"></span><br><span class=\"line\">最后，非常遗憾，sentry 目前完全不支持合并上报，就算是在同一个事件循环（甚至事件循环的同一个阶段，关于事件循环，可以参考我之前绘制的[一张图](https://www.processon.com/view/link/5b6ec8cbe4b053a09c2fb977)）的两个错误，sentry 都是分开来上报的，这里有一个简单例子：</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript</span><br><span class=\"line\">Raven.config(&apos;http://8ec3f1a9f652463bb58191bd0b35f20c@localhost:9000/2&apos;).install()</span><br><span class=\"line\">let s = window.ss;</span><br><span class=\"line\"></span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">    let b = s.b</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">    Raven.captureException(e)</span><br><span class=\"line\">    // sentry should report error now</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s.nomethod();</span><br><span class=\"line\">// sentry should report error now</span><br></pre></td></tr></table></figure>\n<p>以上例子中，sentry 会发送两个 POST 请求。</p>\n<h3 id=\"raven-js-最终上报数据的格式\"><a href=\"#raven-js-最终上报数据的格式\" class=\"headerlink\" title=\"raven.js 最终上报数据的格式\"></a>raven.js 最终上报数据的格式</h3><p>这一部分，我们并不会详细地分析 raven.js 上报的数据的每一项内容，仅会给读者展示一个比较典型的情况。</p>\n<p>我们看一下对于一个一般的 js 错误，raven.js 上报的 json 中包含哪些内容，下面是一个已经删掉一些冗余内容的典型上报信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;project&quot;: &quot;2&quot;,</span><br><span class=\"line\">  &quot;logger&quot;: &quot;javascript&quot;,</span><br><span class=\"line\">  &quot;platform&quot;: &quot;javascript&quot;,</span><br><span class=\"line\">  &quot;request&quot;: &#123;</span><br><span class=\"line\">    &quot;headers&quot;: &#123;</span><br><span class=\"line\">      &quot;User-Agent&quot;: &quot;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;exception&quot;: &#123;</span><br><span class=\"line\">    &quot;values&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;TypeError&quot;,</span><br><span class=\"line\">        &quot;value&quot;: &quot;Cannot read property &apos;b&apos; of undefined&quot;,</span><br><span class=\"line\">        &quot;stacktrace&quot;: &#123;</span><br><span class=\"line\">          &quot;frames&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              &quot;filename&quot;: &quot;http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu&quot;,</span><br><span class=\"line\">              &quot;lineno&quot;: 19,</span><br><span class=\"line\">              &quot;colno&quot;: 19,</span><br><span class=\"line\">              &quot;function&quot;: &quot;?&quot;,</span><br><span class=\"line\">              &quot;in_app&quot;: true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;mechanism&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;generic&quot;,</span><br><span class=\"line\">      &quot;handled&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;transaction&quot;: &quot;http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu&quot;,</span><br><span class=\"line\">  &quot;extra&quot;: &#123;</span><br><span class=\"line\">    &quot;session:duration&quot;: 6</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;breadcrumbs&quot;: &#123;</span><br><span class=\"line\">    &quot;values&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;timestamp&quot;: 1534257309.996,</span><br><span class=\"line\">        &quot;message&quot;: &quot;_prepareFrames stackInfo: [object Object]&quot;,</span><br><span class=\"line\">        &quot;level&quot;: &quot;log&quot;,</span><br><span class=\"line\">        &quot;category&quot;: &quot;console&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">   ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;event_id&quot;: &quot;ea0334adaf9d43b78e72da2b10e084a9&quot;,</span><br><span class=\"line\">  &quot;trimHeadFrames&quot;: 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中支持的信息类型重点分为以下几种：</p>\n<ul>\n<li>sentry 基本配置信息，包括库本身的配置和使用者的配置信息，以及用户的一些自定义信息</li>\n<li>错误信息，主要包括错误调用栈信息</li>\n<li>request 信息，主要包括浏览器的 User-Agent、当前请求地址等</li>\n<li>面包屑信息，关于面包屑具体指的是什么，我们会在下一环节进行介绍</li>\n</ul>\n<h3 id=\"raven-js-面包屑收集\"><a href=\"#raven-js-面包屑收集\" class=\"headerlink\" title=\"raven.js 面包屑收集\"></a>raven.js 面包屑收集</h3><p>面包屑信息，也就是错误在发生之前，一些用户、浏览器的行为信息，raven.js 实现了一个简单的队列（有一个最大条目长度，默认为 100），这个队列在时刻记录着这些信息，一旦错误发生并且需要上报，raven.js 就把这个队列的信息内容，作为面包屑 breadcrumbs，发回客户端。</p>\n<p>面包屑信息主要包括这几类：</p>\n<ul>\n<li>用户对某个元素的点击或者用户对某个可输入元素的输入</li>\n<li>发送的 http 请求</li>\n<li>console 打印的信息（支持配置 ‘debug’, ‘info’, ‘warn’, ‘error’, ‘log’ 等不同级别）</li>\n<li>window.location 变化信息</li>\n</ul>\n<p>接下来，我们对这几类面包屑信息 sentry 的记录实现进行简单的分析。</p>\n<p>实际上，sentry 对这些信息记录的方式比较一致，都是通过对原声的函数进行包装，并且在包装好的函数中增加自己的钩子函数，来实现触发时候的事件记录，实际上，sentry 总共包装的函数有：</p>\n<ul>\n<li>window.setTimeout</li>\n<li>window.setInterval</li>\n<li>window.requestAnimationFrame</li>\n<li>EventTarget.addEventListener</li>\n<li>EventTarget.removeEventListener</li>\n<li>XMLHTTPRequest.open</li>\n<li>XMLHTTPRequest.send</li>\n<li>window.fetch</li>\n<li>History.pushState</li>\n<li>History.replaceState</li>\n</ul>\n<blockquote>\n<p>备注：这里包装的所有函数，其中有一部分只是使 raven.js 具有捕获回调函数中错误的能力（对回调函数进行包装）</p>\n</blockquote>\n<p>接下来我们看一段典型的代码，来分析 raven.js 是如何记录用户的点击和输入信息的（通过对 EventTarget.addEventListener 进行封装）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapEventTarget</span>(<span class=\"params\">global</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> proto = _window[global] &amp;&amp; _window[global].prototype;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (proto &amp;&amp; proto.hasOwnProperty &amp;&amp; proto.hasOwnProperty(<span class=\"string\">'addEventListener'</span>)) &#123;</span><br><span class=\"line\">        fill(</span><br><span class=\"line\">          proto,</span><br><span class=\"line\">          <span class=\"string\">'addEventListener'</span>,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">orig</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evtName, fn, capture, secure</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fn &amp;&amp; fn.handleEvent) &#123; <span class=\"comment\">//兼容通过 handleEvent 的方式进行绑定事件</span></span><br><span class=\"line\">                  fn.handleEvent = self.wrap(</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      mechanism: &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'instrument'</span>,</span><br><span class=\"line\">                        data: &#123;</span><br><span class=\"line\">                          target: global,</span><br><span class=\"line\">                          <span class=\"function\"><span class=\"keyword\">function</span>: '<span class=\"title\">handleEvent</span>',</span></span><br><span class=\"line\"><span class=\"function\">                          <span class=\"title\">handler</span>: (<span class=\"params\">fn &amp;&amp; fn.name</span>) || '&lt;<span class=\"title\">anonymous</span>&gt;'</span></span><br><span class=\"line\"><span class=\"function\">                        &#125;</span></span><br><span class=\"line\"><span class=\"function\">                      &#125;</span></span><br><span class=\"line\"><span class=\"function\">                    &#125;,</span></span><br><span class=\"line\"><span class=\"function\">                    <span class=\"title\">fn</span>.<span class=\"title\">handleEvent</span></span></span><br><span class=\"line\"><span class=\"function\">                  );</span></span><br><span class=\"line\"><span class=\"function\">                &#125;</span></span><br><span class=\"line\"><span class=\"function\">              &#125; <span class=\"title\">catch</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">var</span> before, clickHandler, keypressHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                autoBreadcrumbs &amp;&amp;</span><br><span class=\"line\">                autoBreadcrumbs.dom &amp;&amp;</span><br><span class=\"line\">                (global === <span class=\"string\">'EventTarget'</span> || global === <span class=\"string\">'Node'</span>)</span><br><span class=\"line\">              ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> generating multiple handlers per addEventListener invocation, should</span></span><br><span class=\"line\">                <span class=\"comment\">//       revisit and verify we can just use one (almost certainly)</span></span><br><span class=\"line\">                clickHandler = self._breadcrumbEventHandler(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">                keypressHandler = self._keypressEventHandler();</span><br><span class=\"line\">                before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123; <span class=\"comment\">// 钩子函数，用于在回调函数调用的时候记录信息</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (!evt) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"keyword\">var</span> eventType;</span><br><span class=\"line\">                  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    eventType = evt.type;</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// just accessing event properties can throw an exception in some rare circumstances</span></span><br><span class=\"line\">                    <span class=\"comment\">// see: https://github.com/getsentry/raven-js/issues/838</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (eventType === <span class=\"string\">'click'</span>) <span class=\"keyword\">return</span> clickHandler(evt);</span><br><span class=\"line\">                  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (eventType === <span class=\"string\">'keypress'</span>) <span class=\"keyword\">return</span> keypressHandler(evt);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> orig.call(</span><br><span class=\"line\">                <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                evtName,</span><br><span class=\"line\">                self.wrap(</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    mechanism: &#123;</span><br><span class=\"line\">                      type: <span class=\"string\">'instrument'</span>,</span><br><span class=\"line\">                      data: &#123;</span><br><span class=\"line\">                        target: global,</span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">function</span>: '<span class=\"title\">addEventListener</span>',</span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"title\">handler</span>: (<span class=\"params\">fn &amp;&amp; fn.name</span>) || '&lt;<span class=\"title\">anonymous</span>&gt;'</span></span><br><span class=\"line\"><span class=\"function\">                      &#125;</span></span><br><span class=\"line\"><span class=\"function\">                    &#125;</span></span><br><span class=\"line\"><span class=\"function\">                  &#125;,</span></span><br><span class=\"line\"><span class=\"function\">                  <span class=\"title\">fn</span>,</span></span><br><span class=\"line\"><span class=\"function\">                  <span class=\"title\">before</span></span></span><br><span class=\"line\"><span class=\"function\">                ),</span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"title\">capture</span>,</span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"title\">secure</span></span></span><br><span class=\"line\"><span class=\"function\">              );</span></span><br><span class=\"line\"><span class=\"function\">            &#125;;</span></span><br><span class=\"line\"><span class=\"function\">          &#125;,</span></span><br><span class=\"line\"><span class=\"function\">          <span class=\"title\">wrappedBuiltIns</span></span></span><br><span class=\"line\"><span class=\"function\">        );</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">fill</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          proto,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          <span class=\"string\">'removeEventListener'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          function(orig</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt, fn, capture, secure</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fn = fn &amp;&amp; (fn.__raven_wrapper__ ? fn.__raven_wrapper__ : fn);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore, accessing __raven_wrapper__ will throw in some Selenium environments</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> orig.call(<span class=\"keyword\">this</span>, evt, fn, capture, secure);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          wrappedBuiltIns</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码兼容了通过 handleEvent 的方式进行绑定事件（如果没有听说过这种方式，可以在<a href=\"http://www.ayqy.net/blog/handleevent%E4%B8%8Eaddeventlistener/\" target=\"_blank\" rel=\"noopener\">这里</a>补充一些相关的知识）。</p>\n<p>默认情况下，raven.js 只记录通过 <code>EventTarget.addEventListener</code> 绑定的点击和输入信息，实际上这是比较科学的，并且这些信息较为有效。另外，raven.js 也提供了记录所有点击和输入信息的可选项，其实现方式更为简单，直接在 document 上添加相关的监听即可。</p>\n<h3 id=\"raven-js-如何和框架配合使用\"><a href=\"#raven-js-如何和框架配合使用\" class=\"headerlink\" title=\"raven.js 如何和框架配合使用\"></a>raven.js 如何和框架配合使用</h3><p>raven.js 和框架配合使用的方式非常简单，但是我们要知道，很多框架内置了错误边界处理，或者对错误进行转义。以至于我们通过 window.onerror 的方式得不到完整的错误信息。同时，有些框架提供了错误处理的接口（比如 vue），利用错误处理的接口，我们能够获取到和错误有关的更多更重要的信息。</p>\n<p>raven.js 利用各个框架的官方接口，提供了 vue、require.js、angular、ember、react-native 等各个框架的官方插件。</p>\n<p>插件内容本身非常简单，我们可以看一下 vue 插件的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function formatComponentName(vm) &#123;</span><br><span class=\"line\">  if (vm.$root === vm) &#123;</span><br><span class=\"line\">    return &apos;root instance&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    (name ? &apos;component &lt;&apos; + name + &apos;&gt;&apos; : &apos;anonymous component&apos;) +</span><br><span class=\"line\">    (vm._isVue &amp;&amp; vm.$options.__file ? &apos; at &apos; + vm.$options.__file : &apos;&apos;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function vuePlugin(Raven, Vue) &#123;</span><br><span class=\"line\">  Vue = Vue || window.Vue;</span><br><span class=\"line\"></span><br><span class=\"line\">  // quit if Vue isn&apos;t on the page</span><br><span class=\"line\">  if (!Vue || !Vue.config) return;</span><br><span class=\"line\"></span><br><span class=\"line\">  var _oldOnError = Vue.config.errorHandler;</span><br><span class=\"line\">  Vue.config.errorHandler = function VueErrorHandler(error, vm, info) &#123;</span><br><span class=\"line\">    var metaData = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // vm and lifecycleHook are not always available</span><br><span class=\"line\">    if (Object.prototype.toString.call(vm) === &apos;[object Object]&apos;) &#123;</span><br><span class=\"line\">      metaData.componentName = formatComponentName(vm);</span><br><span class=\"line\">      metaData.propsData = vm.$options.propsData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (typeof info !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">      metaData.lifecycleHook = info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Raven.captureException(error, &#123;</span><br><span class=\"line\">      extra: metaData</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (typeof _oldOnError === &apos;function&apos;) &#123;</span><br><span class=\"line\">      _oldOnError.call(this, error, vm, info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = vuePlugin;</span><br></pre></td></tr></table></figure>\n<p>应该不用进行过多解释。</p>\n<p>你也许想知道为什么没有提供 react 插件，事实上，react 16 以后才引入了<a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\" target=\"_blank\" rel=\"noopener\">Error Boundaries</a>，这种方式由于灵活性太强，并不太适合使用插件，另外，就算不使用插件，也非常方便地使用 raven.js 进行错误上报，可以参考<a href=\"https://docs.sentry.io/clients/javascript/integrations/react/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<blockquote>\n<p>但笔者认为，目前 react 的引入方式会对源代码进行侵入，并且比较难通过构建的方式进行 sentry 的配置，也许我们可以寻找更好的方式。</p>\n</blockquote>\n<p>完。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>raven.js 是 sentry 为 JavaScript 错误上报提供的 JS-SDK，本篇我们基于其源代码对其原理进行分析，本篇文章只分析前端部分，对应的文件目录是<code>https://github.com/getsentry/sentry-javascript/tree/master/packages/raven-js</code>。</p>\n<p>首先抛出几个问题：</p>\n<ul>\n<li><strong>raven.js 是如何收集浏览器错误信息的？</strong></li>\n<li><strong>raven.js 上报的错误信息格式是什么样的？又是如何把这些信息传给后端？支不支持合并上报？</strong></li>\n<li><strong>面包屑（breadcrumbs）是什么？raven.js 如何来收集面包屑信息？</strong></li>\n<li><strong>raven.js 如何和框架配合使用（比如 vue、react）？</strong></li>\n</ul>\n<p>在回答以上这几个问题之前，我们首先来对 raven.js 做一个宏观的分析，主要涉及其文件目录、所引用的第三方框架等。</p>\n<p>raven.js 的核心文件内容并不多，其中使用了三个第三方库，放在了 vendor 文件夹下：</p>\n<ul>\n<li><a href=\"https://github.com/moll/json-stringify-safe\" target=\"_blank\" rel=\"noopener\">json-stringify-safe</a> ：一个对 <code>JSON.stringify</code> 的封装，安全的 json 序列化操作函数，不会抛出循环引用的错误。<ul>\n<li>这里面有一个注意点要单独说一下，我们熟知的 <code>JSON.stringify</code> , 可以接受三个参数：第一个参数是我们要序列化的对象；第二个参数是对其中键值对的处理函数；第三个参数是控制缩进空格。reven.js 的 <code>json-stringify-safe</code> 就是充分利用了这三个参数。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/blueimp/JavaScript-MD5\" target=\"_blank\" rel=\"noopener\">md5</a>：js 的 md5 函数。</li>\n<li><a href=\"https://github.com/csnover/TraceKit\" target=\"_blank\" rel=\"noopener\">TraceKit</a>：TraceKit 是一个已经比较完善的错误收集、堆栈格式化的库，reven.js 的功能在很大程度上对它有所依赖。</li>\n</ul>\n<p>除此之外，raven.js 支持插件，官方提供的一些知名库的 sentry 插件主要放在了 plugin 文件夹下面，raven.js 的一些核心文件，则放在了 src 文件夹下面。</p>\n<h3 id=\"raven-js-是如何收集错误信息的？\"><a href=\"#raven-js-是如何收集错误信息的？\" class=\"headerlink\" title=\"raven.js 是如何收集错误信息的？\"></a>raven.js 是如何收集错误信息的？</h3><p>我们知道，在前端收集错误，肯定离不开 <code>window.onerror</code> 这个函数，那么我们就从这个函数说起。</p>\n<p>实际上，这部分工作是 raven.js 引用的第三方库 TraceKit 完成的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function installGlobalHandler() &#123;</span><br><span class=\"line\">  if (_onErrorHandlerInstalled) &#123; // 一个起到标志作用的全局变量</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _oldOnerrorHandler = _window.onerror; </span><br><span class=\"line\">  // _oldOnerrorHandler 是防止对用户其他地方定义的回调函数进行覆盖</span><br><span class=\"line\">  // 该 _window 经过兼容，实际上就是 window</span><br><span class=\"line\">  _window.onerror = traceKitWindowOnError;</span><br><span class=\"line\">  _onErrorHandlerInstalled = true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关错误回调函数交给 traceKitWindowOnError 处理，下面我们来看一下 traceKitWindowOnError 函数，为了避免太多冗余代码，我们仅分析一种主要情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function traceKitWindowOnError(msg, url, lineNo, colNo, ex) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvar exception = utils.isErrorEvent(ex) ? ex.error : ex;</span><br><span class=\"line\">\t//...</span><br><span class=\"line\">    stack = TraceKit.computeStackTrace(exception);</span><br><span class=\"line\">    notifyHandlers(stack, true);</span><br><span class=\"line\">    //...</span><br><span class=\"line\">   </span><br><span class=\"line\">    //...</span><br><span class=\"line\">    if (_oldOnerrorHandler) &#123;</span><br><span class=\"line\">       return _oldOnerrorHandler.apply(this, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用的最重要的一个函数，就是 computeStackTrace，而这个函数也是 TraceKit 的核心函数，简单来讲，它做的事情就是统一格式化报错信息调用栈，因为对于各个浏览器来说，返回的 Error 调用栈信息格式不尽相同，另外甚至还有的浏览器并不返回调用栈，computeStackTrace 函数对这些情况都做了兼容性处理，并且对于一些不返回调用栈的情况，还使用了 caller 来向上回溯函数的调用栈，最终把报错信息转化成一个键相同的对象数组，做到了报错信息格式的统一。</p>\n<p>notifyHandlers 函数则是通知相关的回调函数。 实际上，raven.js 在 install 函数中会调用 TraceKit.report.subscribe 函数，并把对错误的处理逻辑写入回调：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function subscribe(handler) &#123;</span><br><span class=\"line\">    installGlobalHandler();</span><br><span class=\"line\">    handlers.push(handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上过程完成了错误处理过程中的负责角色转换，并且借助 TraceKit，可以使 raven.js 得到一个结构比较清晰的带有格式化好的调用栈信息的错误内容对象，之后，raven.js 对错误内容进一步处理并最终上报。</p>\n<p>下面我们对错误处理 raven.js 控制的部分做了一些梳理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> _handleOnErrorStackInfo: function(stackInfo, options) &#123;</span><br><span class=\"line\">    options.mechanism = options.mechanism || &#123;</span><br><span class=\"line\">      type: &apos;onerror&apos;,</span><br><span class=\"line\">      handled: false</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    // mechanism 和错误统计来源有关</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!this._ignoreOnError) &#123;</span><br><span class=\"line\">      this._handleStackInfo(stackInfo, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_handleStackInfo: function(stackInfo, options) &#123;</span><br><span class=\"line\">    var frames = this._prepareFrames(stackInfo, options);</span><br><span class=\"line\"></span><br><span class=\"line\">    this._triggerEvent(&apos;handle&apos;, &#123;</span><br><span class=\"line\">      stackInfo: stackInfo,</span><br><span class=\"line\">      options: options</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    this._processException(</span><br><span class=\"line\">      stackInfo.name,</span><br><span class=\"line\">      stackInfo.message,</span><br><span class=\"line\">      stackInfo.url,</span><br><span class=\"line\">      stackInfo.lineno,</span><br><span class=\"line\">      frames,</span><br><span class=\"line\">      options</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_processException: function(type, message, fileurl, lineno, frames, options) &#123;</span><br><span class=\"line\">    // 首先根据 message 信息判断是否是需要忽略的错误类型</span><br><span class=\"line\">    // 然后判断出错的文件是否在黑名单中或者白名单中</span><br><span class=\"line\">    // 接下来对错误内容进行必要的整合与转换，构造出 data 对象</span><br><span class=\"line\">    // 最后调用上报函数</span><br><span class=\"line\">    this._send(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_send: function(data) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 对 data 进一步处理，增加必要的信息，包括后续会提到的面包屑信息</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 交由 _sendProcessedPayload 进行进一步处理</span><br><span class=\"line\">\tthis._sendProcessedPayload(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_sendProcessedPayload: function(data, callback) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 对 data 增加一些必要的元信息</span><br><span class=\"line\">\t// 可以通过自定义 globalOptions.transport 的方式来自定义上报函数 </span><br><span class=\"line\">\t(globalOptions.transport || this._makeRequest).call(this, &#123;</span><br><span class=\"line\">\t     url: url,</span><br><span class=\"line\">\t     auth: auth,</span><br><span class=\"line\">\t     data: data,</span><br><span class=\"line\">\t     options: globalOptions,</span><br><span class=\"line\">\t     onSuccess: function success() &#123;</span><br><span class=\"line\">\t       </span><br><span class=\"line\">\t     &#125;,</span><br><span class=\"line\">\t     onError: function failure(error) &#123;</span><br><span class=\"line\">\t       </span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">// 真正发起请求的函数</span><br><span class=\"line\">_makeRequest: function(opts) &#123;</span><br><span class=\"line\">\t// 对于支持 fetch 的浏览器，直接使用 fetch 的方式发送 POST 请求</span><br><span class=\"line\">\t// 如果浏览器不支持 fetch，则使用 XHR 的传统方式发送 POST 请求</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">实际上我们可以发现，从拿到已经初步格式化的报错信息，到最终真正执行数据上报，raven.js 的过程非常漫长，这其中我分析有如下几个原因：</span><br><span class=\"line\"></span><br><span class=\"line\">* 每个函数只处理一件或者一些事情，保持函数的短小整洁。</span><br><span class=\"line\">* 部分函数可以做到复用（因为除了自动捕获错误的方式， raven.js 还提供通过 captureException，即 `try &#123;</span><br><span class=\"line\">    doSomething(a[0])</span><br><span class=\"line\">&#125; catch(e) &#123;</span><br><span class=\"line\">    Raven.captureException(e)</span><br><span class=\"line\">&#125;` 的方式来上报错误，两个过程中有一些函数的调用是有重叠的）。</span><br><span class=\"line\"></span><br><span class=\"line\">但是笔者认为，raven.js 的代码设计还有很多值得优化的地方，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">* 对最终上报数据（data）的属性处理和增加分散在多个函数，并且有较多可选项目，很难梳理出一个完整的 data 格式，并且不便于维护。</span><br><span class=\"line\">* 部分函数的拆分必要性不足，并且会增加链路的复杂性，比如 `_processException `、`_sendProcessedPayload `、`_makeRequest `等都只在一个链路中被调用一次。</span><br><span class=\"line\">* 部分属性重命名会造成资源浪费，由于 TraceKit 部分最终返回的数据格式并不完全满足 raven.js 的需要，所以 raven.js 之后又在较后阶段进行了重命名等处理，实际上这些内容完全可以通过一些其他的方式避免。</span><br><span class=\"line\"></span><br><span class=\"line\">最后，非常遗憾，sentry 目前完全不支持合并上报，就算是在同一个事件循环（甚至事件循环的同一个阶段，关于事件循环，可以参考我之前绘制的[一张图](https://www.processon.com/view/link/5b6ec8cbe4b053a09c2fb977)）的两个错误，sentry 都是分开来上报的，这里有一个简单例子：</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript</span><br><span class=\"line\">Raven.config(&apos;http://8ec3f1a9f652463bb58191bd0b35f20c@localhost:9000/2&apos;).install()</span><br><span class=\"line\">let s = window.ss;</span><br><span class=\"line\"></span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">    let b = s.b</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">    Raven.captureException(e)</span><br><span class=\"line\">    // sentry should report error now</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s.nomethod();</span><br><span class=\"line\">// sentry should report error now</span><br></pre></td></tr></table></figure>\n<p>以上例子中，sentry 会发送两个 POST 请求。</p>\n<h3 id=\"raven-js-最终上报数据的格式\"><a href=\"#raven-js-最终上报数据的格式\" class=\"headerlink\" title=\"raven.js 最终上报数据的格式\"></a>raven.js 最终上报数据的格式</h3><p>这一部分，我们并不会详细地分析 raven.js 上报的数据的每一项内容，仅会给读者展示一个比较典型的情况。</p>\n<p>我们看一下对于一个一般的 js 错误，raven.js 上报的 json 中包含哪些内容，下面是一个已经删掉一些冗余内容的典型上报信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;project&quot;: &quot;2&quot;,</span><br><span class=\"line\">  &quot;logger&quot;: &quot;javascript&quot;,</span><br><span class=\"line\">  &quot;platform&quot;: &quot;javascript&quot;,</span><br><span class=\"line\">  &quot;request&quot;: &#123;</span><br><span class=\"line\">    &quot;headers&quot;: &#123;</span><br><span class=\"line\">      &quot;User-Agent&quot;: &quot;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;exception&quot;: &#123;</span><br><span class=\"line\">    &quot;values&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;TypeError&quot;,</span><br><span class=\"line\">        &quot;value&quot;: &quot;Cannot read property &apos;b&apos; of undefined&quot;,</span><br><span class=\"line\">        &quot;stacktrace&quot;: &#123;</span><br><span class=\"line\">          &quot;frames&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              &quot;filename&quot;: &quot;http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu&quot;,</span><br><span class=\"line\">              &quot;lineno&quot;: 19,</span><br><span class=\"line\">              &quot;colno&quot;: 19,</span><br><span class=\"line\">              &quot;function&quot;: &quot;?&quot;,</span><br><span class=\"line\">              &quot;in_app&quot;: true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;mechanism&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;generic&quot;,</span><br><span class=\"line\">      &quot;handled&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;transaction&quot;: &quot;http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu&quot;,</span><br><span class=\"line\">  &quot;extra&quot;: &#123;</span><br><span class=\"line\">    &quot;session:duration&quot;: 6</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;breadcrumbs&quot;: &#123;</span><br><span class=\"line\">    &quot;values&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;timestamp&quot;: 1534257309.996,</span><br><span class=\"line\">        &quot;message&quot;: &quot;_prepareFrames stackInfo: [object Object]&quot;,</span><br><span class=\"line\">        &quot;level&quot;: &quot;log&quot;,</span><br><span class=\"line\">        &quot;category&quot;: &quot;console&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">   ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;event_id&quot;: &quot;ea0334adaf9d43b78e72da2b10e084a9&quot;,</span><br><span class=\"line\">  &quot;trimHeadFrames&quot;: 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中支持的信息类型重点分为以下几种：</p>\n<ul>\n<li>sentry 基本配置信息，包括库本身的配置和使用者的配置信息，以及用户的一些自定义信息</li>\n<li>错误信息，主要包括错误调用栈信息</li>\n<li>request 信息，主要包括浏览器的 User-Agent、当前请求地址等</li>\n<li>面包屑信息，关于面包屑具体指的是什么，我们会在下一环节进行介绍</li>\n</ul>\n<h3 id=\"raven-js-面包屑收集\"><a href=\"#raven-js-面包屑收集\" class=\"headerlink\" title=\"raven.js 面包屑收集\"></a>raven.js 面包屑收集</h3><p>面包屑信息，也就是错误在发生之前，一些用户、浏览器的行为信息，raven.js 实现了一个简单的队列（有一个最大条目长度，默认为 100），这个队列在时刻记录着这些信息，一旦错误发生并且需要上报，raven.js 就把这个队列的信息内容，作为面包屑 breadcrumbs，发回客户端。</p>\n<p>面包屑信息主要包括这几类：</p>\n<ul>\n<li>用户对某个元素的点击或者用户对某个可输入元素的输入</li>\n<li>发送的 http 请求</li>\n<li>console 打印的信息（支持配置 ‘debug’, ‘info’, ‘warn’, ‘error’, ‘log’ 等不同级别）</li>\n<li>window.location 变化信息</li>\n</ul>\n<p>接下来，我们对这几类面包屑信息 sentry 的记录实现进行简单的分析。</p>\n<p>实际上，sentry 对这些信息记录的方式比较一致，都是通过对原声的函数进行包装，并且在包装好的函数中增加自己的钩子函数，来实现触发时候的事件记录，实际上，sentry 总共包装的函数有：</p>\n<ul>\n<li>window.setTimeout</li>\n<li>window.setInterval</li>\n<li>window.requestAnimationFrame</li>\n<li>EventTarget.addEventListener</li>\n<li>EventTarget.removeEventListener</li>\n<li>XMLHTTPRequest.open</li>\n<li>XMLHTTPRequest.send</li>\n<li>window.fetch</li>\n<li>History.pushState</li>\n<li>History.replaceState</li>\n</ul>\n<blockquote>\n<p>备注：这里包装的所有函数，其中有一部分只是使 raven.js 具有捕获回调函数中错误的能力（对回调函数进行包装）</p>\n</blockquote>\n<p>接下来我们看一段典型的代码，来分析 raven.js 是如何记录用户的点击和输入信息的（通过对 EventTarget.addEventListener 进行封装）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapEventTarget</span>(<span class=\"params\">global</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> proto = _window[global] &amp;&amp; _window[global].prototype;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (proto &amp;&amp; proto.hasOwnProperty &amp;&amp; proto.hasOwnProperty(<span class=\"string\">'addEventListener'</span>)) &#123;</span><br><span class=\"line\">        fill(</span><br><span class=\"line\">          proto,</span><br><span class=\"line\">          <span class=\"string\">'addEventListener'</span>,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">orig</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evtName, fn, capture, secure</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fn &amp;&amp; fn.handleEvent) &#123; <span class=\"comment\">//兼容通过 handleEvent 的方式进行绑定事件</span></span><br><span class=\"line\">                  fn.handleEvent = self.wrap(</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      mechanism: &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'instrument'</span>,</span><br><span class=\"line\">                        data: &#123;</span><br><span class=\"line\">                          target: global,</span><br><span class=\"line\">                          <span class=\"function\"><span class=\"keyword\">function</span>: '<span class=\"title\">handleEvent</span>',</span></span><br><span class=\"line\"><span class=\"function\">                          <span class=\"title\">handler</span>: (<span class=\"params\">fn &amp;&amp; fn.name</span>) || '&lt;<span class=\"title\">anonymous</span>&gt;'</span></span><br><span class=\"line\"><span class=\"function\">                        &#125;</span></span><br><span class=\"line\"><span class=\"function\">                      &#125;</span></span><br><span class=\"line\"><span class=\"function\">                    &#125;,</span></span><br><span class=\"line\"><span class=\"function\">                    <span class=\"title\">fn</span>.<span class=\"title\">handleEvent</span></span></span><br><span class=\"line\"><span class=\"function\">                  );</span></span><br><span class=\"line\"><span class=\"function\">                &#125;</span></span><br><span class=\"line\"><span class=\"function\">              &#125; <span class=\"title\">catch</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">var</span> before, clickHandler, keypressHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                autoBreadcrumbs &amp;&amp;</span><br><span class=\"line\">                autoBreadcrumbs.dom &amp;&amp;</span><br><span class=\"line\">                (global === <span class=\"string\">'EventTarget'</span> || global === <span class=\"string\">'Node'</span>)</span><br><span class=\"line\">              ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> generating multiple handlers per addEventListener invocation, should</span></span><br><span class=\"line\">                <span class=\"comment\">//       revisit and verify we can just use one (almost certainly)</span></span><br><span class=\"line\">                clickHandler = self._breadcrumbEventHandler(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">                keypressHandler = self._keypressEventHandler();</span><br><span class=\"line\">                before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123; <span class=\"comment\">// 钩子函数，用于在回调函数调用的时候记录信息</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (!evt) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"keyword\">var</span> eventType;</span><br><span class=\"line\">                  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    eventType = evt.type;</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// just accessing event properties can throw an exception in some rare circumstances</span></span><br><span class=\"line\">                    <span class=\"comment\">// see: https://github.com/getsentry/raven-js/issues/838</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (eventType === <span class=\"string\">'click'</span>) <span class=\"keyword\">return</span> clickHandler(evt);</span><br><span class=\"line\">                  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (eventType === <span class=\"string\">'keypress'</span>) <span class=\"keyword\">return</span> keypressHandler(evt);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> orig.call(</span><br><span class=\"line\">                <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                evtName,</span><br><span class=\"line\">                self.wrap(</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    mechanism: &#123;</span><br><span class=\"line\">                      type: <span class=\"string\">'instrument'</span>,</span><br><span class=\"line\">                      data: &#123;</span><br><span class=\"line\">                        target: global,</span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">function</span>: '<span class=\"title\">addEventListener</span>',</span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"title\">handler</span>: (<span class=\"params\">fn &amp;&amp; fn.name</span>) || '&lt;<span class=\"title\">anonymous</span>&gt;'</span></span><br><span class=\"line\"><span class=\"function\">                      &#125;</span></span><br><span class=\"line\"><span class=\"function\">                    &#125;</span></span><br><span class=\"line\"><span class=\"function\">                  &#125;,</span></span><br><span class=\"line\"><span class=\"function\">                  <span class=\"title\">fn</span>,</span></span><br><span class=\"line\"><span class=\"function\">                  <span class=\"title\">before</span></span></span><br><span class=\"line\"><span class=\"function\">                ),</span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"title\">capture</span>,</span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"title\">secure</span></span></span><br><span class=\"line\"><span class=\"function\">              );</span></span><br><span class=\"line\"><span class=\"function\">            &#125;;</span></span><br><span class=\"line\"><span class=\"function\">          &#125;,</span></span><br><span class=\"line\"><span class=\"function\">          <span class=\"title\">wrappedBuiltIns</span></span></span><br><span class=\"line\"><span class=\"function\">        );</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">fill</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          proto,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          <span class=\"string\">'removeEventListener'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          function(orig</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt, fn, capture, secure</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fn = fn &amp;&amp; (fn.__raven_wrapper__ ? fn.__raven_wrapper__ : fn);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore, accessing __raven_wrapper__ will throw in some Selenium environments</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> orig.call(<span class=\"keyword\">this</span>, evt, fn, capture, secure);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          wrappedBuiltIns</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码兼容了通过 handleEvent 的方式进行绑定事件（如果没有听说过这种方式，可以在<a href=\"http://www.ayqy.net/blog/handleevent%E4%B8%8Eaddeventlistener/\" target=\"_blank\" rel=\"noopener\">这里</a>补充一些相关的知识）。</p>\n<p>默认情况下，raven.js 只记录通过 <code>EventTarget.addEventListener</code> 绑定的点击和输入信息，实际上这是比较科学的，并且这些信息较为有效。另外，raven.js 也提供了记录所有点击和输入信息的可选项，其实现方式更为简单，直接在 document 上添加相关的监听即可。</p>\n<h3 id=\"raven-js-如何和框架配合使用\"><a href=\"#raven-js-如何和框架配合使用\" class=\"headerlink\" title=\"raven.js 如何和框架配合使用\"></a>raven.js 如何和框架配合使用</h3><p>raven.js 和框架配合使用的方式非常简单，但是我们要知道，很多框架内置了错误边界处理，或者对错误进行转义。以至于我们通过 window.onerror 的方式得不到完整的错误信息。同时，有些框架提供了错误处理的接口（比如 vue），利用错误处理的接口，我们能够获取到和错误有关的更多更重要的信息。</p>\n<p>raven.js 利用各个框架的官方接口，提供了 vue、require.js、angular、ember、react-native 等各个框架的官方插件。</p>\n<p>插件内容本身非常简单，我们可以看一下 vue 插件的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function formatComponentName(vm) &#123;</span><br><span class=\"line\">  if (vm.$root === vm) &#123;</span><br><span class=\"line\">    return &apos;root instance&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    (name ? &apos;component &lt;&apos; + name + &apos;&gt;&apos; : &apos;anonymous component&apos;) +</span><br><span class=\"line\">    (vm._isVue &amp;&amp; vm.$options.__file ? &apos; at &apos; + vm.$options.__file : &apos;&apos;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function vuePlugin(Raven, Vue) &#123;</span><br><span class=\"line\">  Vue = Vue || window.Vue;</span><br><span class=\"line\"></span><br><span class=\"line\">  // quit if Vue isn&apos;t on the page</span><br><span class=\"line\">  if (!Vue || !Vue.config) return;</span><br><span class=\"line\"></span><br><span class=\"line\">  var _oldOnError = Vue.config.errorHandler;</span><br><span class=\"line\">  Vue.config.errorHandler = function VueErrorHandler(error, vm, info) &#123;</span><br><span class=\"line\">    var metaData = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // vm and lifecycleHook are not always available</span><br><span class=\"line\">    if (Object.prototype.toString.call(vm) === &apos;[object Object]&apos;) &#123;</span><br><span class=\"line\">      metaData.componentName = formatComponentName(vm);</span><br><span class=\"line\">      metaData.propsData = vm.$options.propsData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (typeof info !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">      metaData.lifecycleHook = info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Raven.captureException(error, &#123;</span><br><span class=\"line\">      extra: metaData</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (typeof _oldOnError === &apos;function&apos;) &#123;</span><br><span class=\"line\">      _oldOnError.call(this, error, vm, info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = vuePlugin;</span><br></pre></td></tr></table></figure>\n<p>应该不用进行过多解释。</p>\n<p>你也许想知道为什么没有提供 react 插件，事实上，react 16 以后才引入了<a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\" target=\"_blank\" rel=\"noopener\">Error Boundaries</a>，这种方式由于灵活性太强，并不太适合使用插件，另外，就算不使用插件，也非常方便地使用 raven.js 进行错误上报，可以参考<a href=\"https://docs.sentry.io/clients/javascript/integrations/react/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<blockquote>\n<p>但笔者认为，目前 react 的引入方式会对源代码进行侵入，并且比较难通过构建的方式进行 sentry 的配置，也许我们可以寻找更好的方式。</p>\n</blockquote>\n<p>完。</p>\n"},{"title":"浅谈前端中的二进制数据类型","date":"2018-05-09T01:28:42.000Z","_content":"\n>目前在一个项目中，WebSocket部分由于后端使用了gzip压缩，前端处理起来废了一点时间，从而发现自己在二进制数据类型这个知识点还存在一定的盲区，因此这里进行总结。\n\n本文主要简单介绍ArrayBuffer对象、TypedArray对象、DataView对象以及Blob原始数据类型，和它们之间的互相转换方法。部分代码参考[这里](http://javascript.ruanyifeng.com/stdlib/arraybuffer.html#toc4)而非本人原创，仅做个人学习使用。\n\n这些类型化对象，一般会在以下场景中使用：\n\n* WebGL 中，浏览器和显卡之间需要使用二进制数据进行通信。\n* 在一些 Rest 接口或者 WebSocket 中，采用压缩过的数据进行通信，这个压缩和解压缩的过程可能需要借助二进制对象。\n* 在 Canvas 中，我们可能需要通过生成 Blob 的方式保存当前内容。\n* 在 Img 等资源文件中，URL 可以为 Blob 原始数据类型。\n* 在读取用户上传文件时，可能需要用到二进制数据类型进行中间转换。\n\n下文分两部分，前一部分概述各个二进制数据类型，后一部分将它们之间的互相转换。\n\n### 二进制数据类型概述\n\n#### ArrayBuffer\n\nArrayBuffer对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（TypedArray视图和DataView视图)来读写，视图的作用是以指定格式解读二进制数据。\n\nArrayBuffer也是一个构造函数，可以分配一段可以存放数据的连续内存区域。\n\n```\nvar buf = new ArrayBuffer(32);\n```\n\n上面代码生成了一段32字节的内存区域，每个字节的值默认都是0。可以看到，ArrayBuffer构造函数的参数是所需要的内存大小（单位字节）。\n\n为了读写这段内容，需要为它指定视图。DataView视图的创建，需要提供ArrayBuffer对象实例作为参数。\n\n```\nvar buf = new ArrayBuffer(32);\nvar dataView = new DataView(buf);\ndataView.getUint8(0) // 0\n```\n\n上面代码对一段32字节的内存，建立DataView视图，然后以不带符号的8位整数格式，读取第一个元素，结果得到0，因为原始内存的ArrayBuffer对象，默认所有位都是0。\n\n另外，我们可以将ArrayBuffer生成的结果，传入TypedArray中：\n\n```\nvar buffer = new ArrayBuffer(12);\n\nvar x1 = new Int32Array(buffer);\nx1[0] = 1;\nvar x2 = new Uint8Array(buffer);\nx2[0]  = 2;\n\nx1[0] // 2\n```\n\nArrayBuffer实例的byteLength属性，返回所分配的内存区域的字节长度。\n\n```\nvar buffer = new ArrayBuffer(32);\nbuffer.byteLength\n// 32\n```\n如果要分配的内存区域很大，有可能分配失败（因为没有那么多的连续空余内存），所以有必要检查是否分配成功。\n\n```\nif (buffer.byteLength === n) {\n  // 成功\n} else {\n  // 失败\n}\n```\n\nArrayBuffer实例有一个slice方法，允许将内存区域的一部分，拷贝生成一个新的ArrayBuffer对象。\n\n```\nvar buffer = new ArrayBuffer(8);\nvar newBuffer = buffer.slice(0, 3);\n```\n\n上面代码拷贝buffer对象的前3个字节（从0开始，到第3个字节前面结束），生成一个新的ArrayBuffer对象。slice方法其实包含两步，第一步是先分配一段新内存，第二步是将原来那个ArrayBuffer对象拷贝过去。\n\nslice方法接受两个参数，第一个参数表示拷贝开始的字节序号（含该字节），第二个参数表示拷贝截止的字节序号（不含该字节）。如果省略第二个参数，则默认到原ArrayBuffer对象的结尾。\n\n除了slice方法，ArrayBuffer对象不提供任何直接读写内存的方法，只允许在其上方建立视图，然后通过视图读写。\n\nArrayBuffer有一个静态方法isView，返回一个布尔值，表示参数是否为ArrayBuffer的视图实例。这个方法大致相当于判断参数，是否为TypedArray实例或DataView实例。\n\n```\nvar buffer = new ArrayBuffer(8);\nArrayBuffer.isView(buffer) // false\n\nvar v = new Int32Array(buffer);\nArrayBuffer.isView(v) // true\n```\n\n#### TypedArray\n\n目前，TypedArray对象一共提供9种类型的视图，每一种视图都是一种构造函数。\n\n* Int8Array：8位有符号整数，长度1个字节。\n* Uint8Array：8位无符号整数，长度1个字节。\n* Uint8ClampedArray：8位无符号整数，长度1个字节，溢出处理不同。\n* Int16Array：16位有符号整数，长度2个字节。\n* Uint16Array：16位无符号整数，长度2个字节。\n* Int32Array：32位有符号整数，长度4个字节。\n* Uint32Array：32位无符号整数，长度4个字节。\n* Float32Array：32位浮点数，长度4个字节。\n* Float64Array：64位浮点数，长度8个字节。\n\n这9个构造函数生成的对象，统称为TypedArray对象。它们很像正常数组，都有length属性，都能用方括号运算符（[]）获取单个元素，所有数组的方法，在类型化数组上面都能使用。两者的差异主要在以下方面。\n\n* TypedArray数组的所有成员，都是同一种类型和格式。\n* TypedArray数组的成员是连续的，不会有空位。\n* Typed化数组成员的默认值为0。比如，new Array(10)返回一个正常数组，里面没有任何成员，只是10个空位；new Uint8Array(10)返回一个类型化数组，里面10个成员都是0。\n* TypedArray数组只是一层视图，本身不储存数据，它的数据都储存在底层的ArrayBuffer对象之中，要获取底层对象必须使用buffer属性。\n\n##### 构造函数\n\nTypedArray数组提供9种构造函数，用来生成相应类型的数组实例。\n\n构造函数有多种用法。\n\n* TypedArray(buffer, byteOffset=0, length?)\n\n同一个ArrayBuffer对象之上，可以根据不同的数据类型，建立多个视图。\n\n```\n// 创建一个8字节的ArrayBuffer\nvar b = new ArrayBuffer(8);\n\n// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾\nvar v1 = new Int32Array(b);\n\n// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾\nvar v2 = new Uint8Array(b, 2);\n\n// 创建一个指向b的Int16视图，开始于字节2，长度为2\nvar v3 = new Int16Array(b, 2, 2);\n```\n\n对于以上代码，v1、v2和v3是重叠的：v1[0]是一个32位整数，指向字节0～字节3；v2[0]是一个8位无符号整数，指向字节2；v3[0]是一个16位整数，指向字节2～字节3。只要任何一个视图对内存有所修改，就会在另外两个视图上反应出来。\n\n注意，byteOffset必须与所要建立的数据类型一致，否则会报错。\n\n```\nvar buffer = new ArrayBuffer(8);\nvar i16 = new Int16Array(buffer, 1);\n// Uncaught RangeError: start offset of Int16Array should be a multiple of 2\n```\n\n上面代码中，新生成一个8个字节的ArrayBuffer对象，然后在这个对象的第一个字节，建立带符号的16位整数视图，结果报错。因为，带符号的16位整数需要两个字节，所以byteOffset参数必须能够被2整除。\n\n如果想从任意字节开始解读ArrayBuffer对象，必须使用DataView视图，因为TypedArray视图只提供9种固定的解读格式。\n\n* TypedArray(length)\n\n视图还可以不通过ArrayBuffer对象，直接分配内存而生成。\n\n```\nvar f64a = new Float64Array(8);\nf64a[0] = 10;\nf64a[1] = 20;\nf64a[2] = f64a[0] + f64a[1];\n```\n\n* TypedArray(typedArray)\n\n类型化数组的构造函数，可以接受另一个视图实例作为参数。\n\n```\nvar typedArray = new Int8Array(new Uint8Array(4));\n```\n\n上面代码中，Int8Array构造函数接受一个Uint8Array实例作为参数。\n\n注意，此时生成的新数组，只是复制了参数数组的值，对应的底层内存是不一样的。新数组会开辟一段新的内存储存数据，不会在原数组的内存之上建立视图。\n\n```\nvar x = new Int8Array([1, 1]);\nvar y = new Int8Array(x);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 1\n```\n\n上面代码中，数组y是以数组x为模板而生成的，当x变动的时候，y并没有变动。\n\n如果想基于同一段内存，构造不同的视图，可以采用下面的写法。\n\n```\nvar x = new Int8Array([1, 1]);\nvar y = new Int8Array(x.buffer);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 2\n```\n\n* TypedArray(arrayLikeObject)\n\n构造函数的参数也可以是一个普通数组，然后直接生成TypedArray实例。\n\n```\nvar typedArray = new Uint8Array([1, 2, 3, 4]);\n```\n\n注意，这时TypedArray视图会重新开辟内存，不会在原数组的内存上建立视图。\n\n上面代码从一个普通的数组，生成一个8位无符号整数的TypedArray实例。\n\nTypedArray数组也可以转换回普通数组。\n\n```\nvar normalArray = Array.prototype.slice.call(typedArray);\n```\n\n##### BYTES_PER_ELEMENT属性\n\n每一种视图的构造函数，都有一个BYTES_PER_ELEMENT属性，表示这种数据类型占据的字节数。\n\n```\nInt8Array.BYTES_PER_ELEMENT // 1\nUint8Array.BYTES_PER_ELEMENT // 1\nInt16Array.BYTES_PER_ELEMENT // 2\nUint16Array.BYTES_PER_ELEMENT // 2\nInt32Array.BYTES_PER_ELEMENT // 4\nUint32Array.BYTES_PER_ELEMENT // 4\nFloat32Array.BYTES_PER_ELEMENT // 4\nFloat64Array.BYTES_PER_ELEMENT // 8\n```\n\n##### ArrayBuffer与字符串的互相转换\n\nArrayBuffer转为字符串，或者字符串转为ArrayBuffer，有一个前提，即字符串的编码方法是确定的。假定字符串采用UTF-16编码（JavaScript的内部编码方式），可以自己编写转换函数。\n\n```\n// ArrayBuffer转为字符串，参数为ArrayBuffer对象\nfunction ab2str(buf) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf));\n}\n\n// 字符串转为ArrayBuffer对象，参数为字符串\nfunction str2ab(str) {\n  var buf = new ArrayBuffer(str.length * 2); // 每个字符占用2个字节\n  var bufView = new Uint16Array(buf);\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n```\n\n##### TypedArray.prototype.set()\n\nTypedArray数组的set方法用于复制数组（正常数组或TypedArray数组），也就是将一段内容完全复制到另一段内存。\n\n```\nvar a = new Uint8Array(8);\nvar b = new Uint8Array(8);\n\nb.set(a);\n```\n\n上面代码复制a数组的内容到b数组，它是整段内存的复制，比一个个拷贝成员的那种复制快得多。set方法还可以接受第二个参数，表示从b对象哪一个成员开始复制a对象。\n\n```\nvar a = new Uint16Array(8);\nvar b = new Uint16Array(10);\n\nb.set(a, 2)\n```\n上面代码的b数组比a数组多两个成员，所以从b[2]开始复制。\n\n##### TypedArray.prototype.subarray()\n\nsubarray方法是对于TypedArray数组的一部分，再建立一个新的视图。\n\n```\nvar a = new Uint16Array(8);\nvar b = a.subarray(2,3);\n\na.byteLength // 16\nb.byteLength // 2\n```\n\nsubarray方法的第一个参数是起始的成员序号，第二个参数是结束的成员序号（不含该成员），如果省略则包含剩余的全部成员。所以，上面代码的a.subarray(2,3)，意味着b只包含a[2]一个成员，字节长度为2。\n\n##### TypedArray.prototype.slice()\n\nTypeArray实例的slice方法，可以返回一个指定位置的新的TypedArray实例。\n\n```\nlet ui8 = Uint8Array.of(0, 1, 2);\nui8.slice(-1)\n// Uint8Array [ 2 ]\n```\n\n\n上面代码中，ui8是8位无符号整数数组视图的一个实例。它的slice方法可以从当前视图之中，返回一个新的视图实例。\n\nslice方法的参数，表示原数组的具体位置，开始生成新数组。负值表示逆向的位置，即-1为倒数第一个位置，-2表示倒数第二个位置，以此类推。\n\n##### TypedArray.of()\n\nTypedArray数组的所有构造函数，都有一个静态方法of，用于将参数转为一个TypedArray实例。\n\n```\nFloat32Array.of(0.151, -8, 3.7)\n// Float32Array [ 0.151, -8, 3.7 ]\n```\n\n##### TypedArray.from()\n\n静态方法from接受一个**可遍历的数据结构（比如数组）**作为参数，返回一个基于这个结构的TypedArray实例。\n\n```\nUint16Array.from([0, 1, 2])\n// Uint16Array [ 0, 1, 2 ]\n```\n\n这个方法还可以将一种TypedArray实例，转为另一种。\n\n```\nvar ui16 = Uint16Array.from(Uint8Array.of(0, 1, 2));\nui16 instanceof Uint16Array // true\n```\n\nfrom方法还可以接受一个函数，作为第二个参数，用来对每个元素进行遍历，功能类似map方法。\n\n```\nInt8Array.of(127, 126, 125).map(x => 2 * x)\n// Int8Array [ -2, -4, -6 ]\n\nInt16Array.from(Int8Array.of(127, 126, 125), x => 2 * x)\n// Int16Array [ 254, 252, 250 ]\n```\n\n上面的例子中，from方法没有发生溢出，这说明遍历是针对新生成的16位整数数组，而不是针对原来的8位整数数组。也就是说，from会将第一个参数指定的TypedArray数组，拷贝到另一段内存之中（占用内存从3字节变为6字节），然后再进行处理。\n\n#### DataView\n\n如果一段数据包括多种类型（比如服务器传来的HTTP数据），这时除了建立ArrayBuffer对象的复合视图以外，还可以通过DataView视图进行操作。\n\nDataView视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，ArrayBuffer对象的各种TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。\n\nDataView视图本身也是构造函数，接受一个ArrayBuffer对象作为参数，生成视图。\n\n```\nDataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);\n```\n下面是一个例子。\n\n```\nvar buffer = new ArrayBuffer(24);\nvar dv = new DataView(buffer);\n```\n\nDataView实例有以下属性，含义与TypedArray实例的同名方法相同。\n\n* DataView.prototype.buffer：返回对应的ArrayBuffer对象\n* DataView.prototype.byteLength：返回占据的内存字节长度\n* DataView.prototype.byteOffset：返回当前视图从对应的ArrayBuffer对象的哪个字节开始\n\nDataView实例提供8个方法读取内存。\n\n* getInt8：读取1个字节，返回一个8位整数。\n* getUint8：读取1个字节，返回一个无符号的8位整数。\n* getInt16：读取2个字节，返回一个16位整数。\n* getUint16：读取2个字节，返回一个无符号的16位整数。\n* getInt32：读取4个字节，返回一个32位整数。\n* getUint32：读取4个字节，返回一个无符号的32位整数。\n* getFloat32：读取4个字节，返回一个32位浮点数。\n* getFloat64：读取8个字节，返回一个64位浮点数。\n\n这一系列get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。\n\n```\nvar buffer = new ArrayBuffer(24);\nvar dv = new DataView(buffer);\n\n// 从第1个字节读取一个8位无符号整数\nvar v1 = dv.getUint8(0);\n\n// 从第2个字节读取一个16位无符号整数\nvar v2 = dv.getUint16(1);\n\n// 从第4个字节读取一个16位无符号整数\nvar v3 = dv.getUint16(3);\n```\n\n上面代码读取了ArrayBuffer对象的前5个字节，其中有一个8位整数和两个十六位整数。\n\n如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。\n\n```\n// 小端字节序\nvar v1 = dv.getUint16(1, true);\n\n// 大端字节序\nvar v2 = dv.getUint16(3, false);\n\n// 大端字节序\nvar v3 = dv.getUint16(3);\n```\n\nDataView视图提供8个方法写入内存。\n\n* setInt8：写入1个字节的8位整数。\n* setUint8：写入1个字节的8位无符号整数。\n* setInt16：写入2个字节的16位整数。\n* setUint16：写入2个字节的16位无符号整数。\n* setInt32：写入4个字节的32位整数。\n* setUint32：写入4个字节的32位无符号整数。\n* setFloat32：写入4个字节的32位浮点数。\n* setFloat64：写入8个字节的64位浮点数。\n\n这一系列set方法，接受两个参数，第一个参数是字节序号，表示从哪个字节开始写入，第二个参数为写入的数据。对于那些写入两个或两个以上字节的方法，需要指定第三个参数，false或者undefined表示使用大端字节序写入，true表示使用小端字节序写入。\n\n```\n// 在第1个字节，以大端字节序写入值为25的32位整数\ndv.setInt32(0, 25, false);\n\n// 在第5个字节，以大端字节序写入值为25的32位整数\ndv.setInt32(4, 25);\n\n// 在第9个字节，以小端字节序写入值为2.5的32位浮点数\ndv.setFloat32(8, 2.5, true);\n```\n\n如果不确定正在使用的计算机的字节序，可以采用下面的判断方式。\n\n```\nvar littleEndian = (function() {\n  var buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true);\n  return new Int16Array(buffer)[0] === 256;\n})();\n```\n\n#### Blob\n\nBlob 对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。\n\n要从其他非blob对象和数据构造一个Blob，请使用 Blob() 构造函数。要创建包含另一个blob数据的子集blob，请使用 slice()方法。要获取用户文件系统上的文件对应的Blob对象，请参阅 File文档。\n\n从Blob中读取内容的唯一方法是使用 FileReader。以下代码将 Blob 的内容作为类型数组读取：\n\n```\nvar reader = new FileReader();\nreader.addEventListener(\"loadend\", function() {\n   // reader.result 包含转化为类型数组的blob\n});\nreader.readAsArrayBuffer(blob);\n```\n\n更多关于Blob的内容，请直接查看[这里](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)\n\n### 数据格式转换\n\n#### String转Blob\n\n```\n//将字符串 转换成 Blob 对象\nvar blob = new Blob([\"Hello World!\"], {\n    type: 'text/plain'\n});\nconsole.info(blob);\nconsole.info(blob.slice(1, 3, 'text/plain'));\n```\n#### TypeArray转Blob\n\n```\n//将 TypeArray  转换成 Blob 对象\nvar array = new Uint16Array([97, 32, 72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]);\n//测试成功\n//var blob = new Blob([array], { type: \"application/octet-binary\" });\n//测试成功， 注意必须[]的包裹\nvar blob = new Blob([array]);\n//将 Blob对象 读成字符串\nvar reader = new FileReader();\nreader.readAsText(blob, 'utf-8');\nreader.onload = function (e) {\n    console.info(reader.result); //a Hello world!\n}\n```\n\n#### ArrayBuffer转Blob\n\n```\nvar buffer = new ArrayBuffer(32);\nvar blob = new Blob([buffer]);       // 注意必须包裹[]\n```\n\n#### Blob转String\n\n这里需要注意的是readAsText方法的使用。\n\n```\n//将字符串转换成 Blob对象\nvar blob = new Blob(['中文字符串'], {\n    type: 'text/plain'\n});\n//将Blob 对象转换成字符串\nvar reader = new FileReader();\nreader.readAsText(blob, 'utf-8');\nreader.onload = function (e) {\n    console.info(reader.result);\n}\n```\n\n#### Blob转ArrayBuffer\n\n这里需要注意的是readAsArrayBuffer方法的使用。\n\n```\n//将字符串转换成 Blob对象\nvar blob = new Blob(['中文字符串'], {\n    type: 'text/plain'\n});\n//将Blob 对象转换成 ArrayBuffer\nvar reader = new FileReader();\nreader.readAsArrayBuffer(blob);\nreader.onload = function (e) {\n    console.info(reader.result); //ArrayBuffer {}\n    //经常会遇到的异常 Uncaught RangeError: byte length of Int16Array should be a multiple of 2\n    //var buf = new int16array(reader.result);\n    //console.info(buf);\n\n    //将 ArrayBufferView  转换成Blob\n    var buf = new Uint8Array(reader.result);\n    console.info(buf); //[228, 184, 173, 230, 150, 135, 229, 173, 151, 231, 172, 166, 228, 184, 178]\n    reader.readAsText(new Blob([buf]), 'utf-8');\n    reader.onload = function () {\n        console.info(reader.result); //中文字符串\n    };\n\n    //将 ArrayBufferView  转换成Blob\n    var buf = new DataView(reader.result);\n    console.info(buf); //DataView {}\n    reader.readAsText(new Blob([buf]), 'utf-8');\n    reader.onload = function () {\n        console.info(reader.result); //中文字符串\n    };\n}\n```\n\n","source":"_posts/浅谈前端中的二进制数据类型.md","raw":"---\ntitle: 浅谈前端中的二进制数据类型\ndate: 2018-05-09 10:28:42\ntags:\n\t- javascript\n---\n\n>目前在一个项目中，WebSocket部分由于后端使用了gzip压缩，前端处理起来废了一点时间，从而发现自己在二进制数据类型这个知识点还存在一定的盲区，因此这里进行总结。\n\n本文主要简单介绍ArrayBuffer对象、TypedArray对象、DataView对象以及Blob原始数据类型，和它们之间的互相转换方法。部分代码参考[这里](http://javascript.ruanyifeng.com/stdlib/arraybuffer.html#toc4)而非本人原创，仅做个人学习使用。\n\n这些类型化对象，一般会在以下场景中使用：\n\n* WebGL 中，浏览器和显卡之间需要使用二进制数据进行通信。\n* 在一些 Rest 接口或者 WebSocket 中，采用压缩过的数据进行通信，这个压缩和解压缩的过程可能需要借助二进制对象。\n* 在 Canvas 中，我们可能需要通过生成 Blob 的方式保存当前内容。\n* 在 Img 等资源文件中，URL 可以为 Blob 原始数据类型。\n* 在读取用户上传文件时，可能需要用到二进制数据类型进行中间转换。\n\n下文分两部分，前一部分概述各个二进制数据类型，后一部分将它们之间的互相转换。\n\n### 二进制数据类型概述\n\n#### ArrayBuffer\n\nArrayBuffer对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（TypedArray视图和DataView视图)来读写，视图的作用是以指定格式解读二进制数据。\n\nArrayBuffer也是一个构造函数，可以分配一段可以存放数据的连续内存区域。\n\n```\nvar buf = new ArrayBuffer(32);\n```\n\n上面代码生成了一段32字节的内存区域，每个字节的值默认都是0。可以看到，ArrayBuffer构造函数的参数是所需要的内存大小（单位字节）。\n\n为了读写这段内容，需要为它指定视图。DataView视图的创建，需要提供ArrayBuffer对象实例作为参数。\n\n```\nvar buf = new ArrayBuffer(32);\nvar dataView = new DataView(buf);\ndataView.getUint8(0) // 0\n```\n\n上面代码对一段32字节的内存，建立DataView视图，然后以不带符号的8位整数格式，读取第一个元素，结果得到0，因为原始内存的ArrayBuffer对象，默认所有位都是0。\n\n另外，我们可以将ArrayBuffer生成的结果，传入TypedArray中：\n\n```\nvar buffer = new ArrayBuffer(12);\n\nvar x1 = new Int32Array(buffer);\nx1[0] = 1;\nvar x2 = new Uint8Array(buffer);\nx2[0]  = 2;\n\nx1[0] // 2\n```\n\nArrayBuffer实例的byteLength属性，返回所分配的内存区域的字节长度。\n\n```\nvar buffer = new ArrayBuffer(32);\nbuffer.byteLength\n// 32\n```\n如果要分配的内存区域很大，有可能分配失败（因为没有那么多的连续空余内存），所以有必要检查是否分配成功。\n\n```\nif (buffer.byteLength === n) {\n  // 成功\n} else {\n  // 失败\n}\n```\n\nArrayBuffer实例有一个slice方法，允许将内存区域的一部分，拷贝生成一个新的ArrayBuffer对象。\n\n```\nvar buffer = new ArrayBuffer(8);\nvar newBuffer = buffer.slice(0, 3);\n```\n\n上面代码拷贝buffer对象的前3个字节（从0开始，到第3个字节前面结束），生成一个新的ArrayBuffer对象。slice方法其实包含两步，第一步是先分配一段新内存，第二步是将原来那个ArrayBuffer对象拷贝过去。\n\nslice方法接受两个参数，第一个参数表示拷贝开始的字节序号（含该字节），第二个参数表示拷贝截止的字节序号（不含该字节）。如果省略第二个参数，则默认到原ArrayBuffer对象的结尾。\n\n除了slice方法，ArrayBuffer对象不提供任何直接读写内存的方法，只允许在其上方建立视图，然后通过视图读写。\n\nArrayBuffer有一个静态方法isView，返回一个布尔值，表示参数是否为ArrayBuffer的视图实例。这个方法大致相当于判断参数，是否为TypedArray实例或DataView实例。\n\n```\nvar buffer = new ArrayBuffer(8);\nArrayBuffer.isView(buffer) // false\n\nvar v = new Int32Array(buffer);\nArrayBuffer.isView(v) // true\n```\n\n#### TypedArray\n\n目前，TypedArray对象一共提供9种类型的视图，每一种视图都是一种构造函数。\n\n* Int8Array：8位有符号整数，长度1个字节。\n* Uint8Array：8位无符号整数，长度1个字节。\n* Uint8ClampedArray：8位无符号整数，长度1个字节，溢出处理不同。\n* Int16Array：16位有符号整数，长度2个字节。\n* Uint16Array：16位无符号整数，长度2个字节。\n* Int32Array：32位有符号整数，长度4个字节。\n* Uint32Array：32位无符号整数，长度4个字节。\n* Float32Array：32位浮点数，长度4个字节。\n* Float64Array：64位浮点数，长度8个字节。\n\n这9个构造函数生成的对象，统称为TypedArray对象。它们很像正常数组，都有length属性，都能用方括号运算符（[]）获取单个元素，所有数组的方法，在类型化数组上面都能使用。两者的差异主要在以下方面。\n\n* TypedArray数组的所有成员，都是同一种类型和格式。\n* TypedArray数组的成员是连续的，不会有空位。\n* Typed化数组成员的默认值为0。比如，new Array(10)返回一个正常数组，里面没有任何成员，只是10个空位；new Uint8Array(10)返回一个类型化数组，里面10个成员都是0。\n* TypedArray数组只是一层视图，本身不储存数据，它的数据都储存在底层的ArrayBuffer对象之中，要获取底层对象必须使用buffer属性。\n\n##### 构造函数\n\nTypedArray数组提供9种构造函数，用来生成相应类型的数组实例。\n\n构造函数有多种用法。\n\n* TypedArray(buffer, byteOffset=0, length?)\n\n同一个ArrayBuffer对象之上，可以根据不同的数据类型，建立多个视图。\n\n```\n// 创建一个8字节的ArrayBuffer\nvar b = new ArrayBuffer(8);\n\n// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾\nvar v1 = new Int32Array(b);\n\n// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾\nvar v2 = new Uint8Array(b, 2);\n\n// 创建一个指向b的Int16视图，开始于字节2，长度为2\nvar v3 = new Int16Array(b, 2, 2);\n```\n\n对于以上代码，v1、v2和v3是重叠的：v1[0]是一个32位整数，指向字节0～字节3；v2[0]是一个8位无符号整数，指向字节2；v3[0]是一个16位整数，指向字节2～字节3。只要任何一个视图对内存有所修改，就会在另外两个视图上反应出来。\n\n注意，byteOffset必须与所要建立的数据类型一致，否则会报错。\n\n```\nvar buffer = new ArrayBuffer(8);\nvar i16 = new Int16Array(buffer, 1);\n// Uncaught RangeError: start offset of Int16Array should be a multiple of 2\n```\n\n上面代码中，新生成一个8个字节的ArrayBuffer对象，然后在这个对象的第一个字节，建立带符号的16位整数视图，结果报错。因为，带符号的16位整数需要两个字节，所以byteOffset参数必须能够被2整除。\n\n如果想从任意字节开始解读ArrayBuffer对象，必须使用DataView视图，因为TypedArray视图只提供9种固定的解读格式。\n\n* TypedArray(length)\n\n视图还可以不通过ArrayBuffer对象，直接分配内存而生成。\n\n```\nvar f64a = new Float64Array(8);\nf64a[0] = 10;\nf64a[1] = 20;\nf64a[2] = f64a[0] + f64a[1];\n```\n\n* TypedArray(typedArray)\n\n类型化数组的构造函数，可以接受另一个视图实例作为参数。\n\n```\nvar typedArray = new Int8Array(new Uint8Array(4));\n```\n\n上面代码中，Int8Array构造函数接受一个Uint8Array实例作为参数。\n\n注意，此时生成的新数组，只是复制了参数数组的值，对应的底层内存是不一样的。新数组会开辟一段新的内存储存数据，不会在原数组的内存之上建立视图。\n\n```\nvar x = new Int8Array([1, 1]);\nvar y = new Int8Array(x);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 1\n```\n\n上面代码中，数组y是以数组x为模板而生成的，当x变动的时候，y并没有变动。\n\n如果想基于同一段内存，构造不同的视图，可以采用下面的写法。\n\n```\nvar x = new Int8Array([1, 1]);\nvar y = new Int8Array(x.buffer);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 2\n```\n\n* TypedArray(arrayLikeObject)\n\n构造函数的参数也可以是一个普通数组，然后直接生成TypedArray实例。\n\n```\nvar typedArray = new Uint8Array([1, 2, 3, 4]);\n```\n\n注意，这时TypedArray视图会重新开辟内存，不会在原数组的内存上建立视图。\n\n上面代码从一个普通的数组，生成一个8位无符号整数的TypedArray实例。\n\nTypedArray数组也可以转换回普通数组。\n\n```\nvar normalArray = Array.prototype.slice.call(typedArray);\n```\n\n##### BYTES_PER_ELEMENT属性\n\n每一种视图的构造函数，都有一个BYTES_PER_ELEMENT属性，表示这种数据类型占据的字节数。\n\n```\nInt8Array.BYTES_PER_ELEMENT // 1\nUint8Array.BYTES_PER_ELEMENT // 1\nInt16Array.BYTES_PER_ELEMENT // 2\nUint16Array.BYTES_PER_ELEMENT // 2\nInt32Array.BYTES_PER_ELEMENT // 4\nUint32Array.BYTES_PER_ELEMENT // 4\nFloat32Array.BYTES_PER_ELEMENT // 4\nFloat64Array.BYTES_PER_ELEMENT // 8\n```\n\n##### ArrayBuffer与字符串的互相转换\n\nArrayBuffer转为字符串，或者字符串转为ArrayBuffer，有一个前提，即字符串的编码方法是确定的。假定字符串采用UTF-16编码（JavaScript的内部编码方式），可以自己编写转换函数。\n\n```\n// ArrayBuffer转为字符串，参数为ArrayBuffer对象\nfunction ab2str(buf) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf));\n}\n\n// 字符串转为ArrayBuffer对象，参数为字符串\nfunction str2ab(str) {\n  var buf = new ArrayBuffer(str.length * 2); // 每个字符占用2个字节\n  var bufView = new Uint16Array(buf);\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n```\n\n##### TypedArray.prototype.set()\n\nTypedArray数组的set方法用于复制数组（正常数组或TypedArray数组），也就是将一段内容完全复制到另一段内存。\n\n```\nvar a = new Uint8Array(8);\nvar b = new Uint8Array(8);\n\nb.set(a);\n```\n\n上面代码复制a数组的内容到b数组，它是整段内存的复制，比一个个拷贝成员的那种复制快得多。set方法还可以接受第二个参数，表示从b对象哪一个成员开始复制a对象。\n\n```\nvar a = new Uint16Array(8);\nvar b = new Uint16Array(10);\n\nb.set(a, 2)\n```\n上面代码的b数组比a数组多两个成员，所以从b[2]开始复制。\n\n##### TypedArray.prototype.subarray()\n\nsubarray方法是对于TypedArray数组的一部分，再建立一个新的视图。\n\n```\nvar a = new Uint16Array(8);\nvar b = a.subarray(2,3);\n\na.byteLength // 16\nb.byteLength // 2\n```\n\nsubarray方法的第一个参数是起始的成员序号，第二个参数是结束的成员序号（不含该成员），如果省略则包含剩余的全部成员。所以，上面代码的a.subarray(2,3)，意味着b只包含a[2]一个成员，字节长度为2。\n\n##### TypedArray.prototype.slice()\n\nTypeArray实例的slice方法，可以返回一个指定位置的新的TypedArray实例。\n\n```\nlet ui8 = Uint8Array.of(0, 1, 2);\nui8.slice(-1)\n// Uint8Array [ 2 ]\n```\n\n\n上面代码中，ui8是8位无符号整数数组视图的一个实例。它的slice方法可以从当前视图之中，返回一个新的视图实例。\n\nslice方法的参数，表示原数组的具体位置，开始生成新数组。负值表示逆向的位置，即-1为倒数第一个位置，-2表示倒数第二个位置，以此类推。\n\n##### TypedArray.of()\n\nTypedArray数组的所有构造函数，都有一个静态方法of，用于将参数转为一个TypedArray实例。\n\n```\nFloat32Array.of(0.151, -8, 3.7)\n// Float32Array [ 0.151, -8, 3.7 ]\n```\n\n##### TypedArray.from()\n\n静态方法from接受一个**可遍历的数据结构（比如数组）**作为参数，返回一个基于这个结构的TypedArray实例。\n\n```\nUint16Array.from([0, 1, 2])\n// Uint16Array [ 0, 1, 2 ]\n```\n\n这个方法还可以将一种TypedArray实例，转为另一种。\n\n```\nvar ui16 = Uint16Array.from(Uint8Array.of(0, 1, 2));\nui16 instanceof Uint16Array // true\n```\n\nfrom方法还可以接受一个函数，作为第二个参数，用来对每个元素进行遍历，功能类似map方法。\n\n```\nInt8Array.of(127, 126, 125).map(x => 2 * x)\n// Int8Array [ -2, -4, -6 ]\n\nInt16Array.from(Int8Array.of(127, 126, 125), x => 2 * x)\n// Int16Array [ 254, 252, 250 ]\n```\n\n上面的例子中，from方法没有发生溢出，这说明遍历是针对新生成的16位整数数组，而不是针对原来的8位整数数组。也就是说，from会将第一个参数指定的TypedArray数组，拷贝到另一段内存之中（占用内存从3字节变为6字节），然后再进行处理。\n\n#### DataView\n\n如果一段数据包括多种类型（比如服务器传来的HTTP数据），这时除了建立ArrayBuffer对象的复合视图以外，还可以通过DataView视图进行操作。\n\nDataView视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，ArrayBuffer对象的各种TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。\n\nDataView视图本身也是构造函数，接受一个ArrayBuffer对象作为参数，生成视图。\n\n```\nDataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);\n```\n下面是一个例子。\n\n```\nvar buffer = new ArrayBuffer(24);\nvar dv = new DataView(buffer);\n```\n\nDataView实例有以下属性，含义与TypedArray实例的同名方法相同。\n\n* DataView.prototype.buffer：返回对应的ArrayBuffer对象\n* DataView.prototype.byteLength：返回占据的内存字节长度\n* DataView.prototype.byteOffset：返回当前视图从对应的ArrayBuffer对象的哪个字节开始\n\nDataView实例提供8个方法读取内存。\n\n* getInt8：读取1个字节，返回一个8位整数。\n* getUint8：读取1个字节，返回一个无符号的8位整数。\n* getInt16：读取2个字节，返回一个16位整数。\n* getUint16：读取2个字节，返回一个无符号的16位整数。\n* getInt32：读取4个字节，返回一个32位整数。\n* getUint32：读取4个字节，返回一个无符号的32位整数。\n* getFloat32：读取4个字节，返回一个32位浮点数。\n* getFloat64：读取8个字节，返回一个64位浮点数。\n\n这一系列get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。\n\n```\nvar buffer = new ArrayBuffer(24);\nvar dv = new DataView(buffer);\n\n// 从第1个字节读取一个8位无符号整数\nvar v1 = dv.getUint8(0);\n\n// 从第2个字节读取一个16位无符号整数\nvar v2 = dv.getUint16(1);\n\n// 从第4个字节读取一个16位无符号整数\nvar v3 = dv.getUint16(3);\n```\n\n上面代码读取了ArrayBuffer对象的前5个字节，其中有一个8位整数和两个十六位整数。\n\n如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。\n\n```\n// 小端字节序\nvar v1 = dv.getUint16(1, true);\n\n// 大端字节序\nvar v2 = dv.getUint16(3, false);\n\n// 大端字节序\nvar v3 = dv.getUint16(3);\n```\n\nDataView视图提供8个方法写入内存。\n\n* setInt8：写入1个字节的8位整数。\n* setUint8：写入1个字节的8位无符号整数。\n* setInt16：写入2个字节的16位整数。\n* setUint16：写入2个字节的16位无符号整数。\n* setInt32：写入4个字节的32位整数。\n* setUint32：写入4个字节的32位无符号整数。\n* setFloat32：写入4个字节的32位浮点数。\n* setFloat64：写入8个字节的64位浮点数。\n\n这一系列set方法，接受两个参数，第一个参数是字节序号，表示从哪个字节开始写入，第二个参数为写入的数据。对于那些写入两个或两个以上字节的方法，需要指定第三个参数，false或者undefined表示使用大端字节序写入，true表示使用小端字节序写入。\n\n```\n// 在第1个字节，以大端字节序写入值为25的32位整数\ndv.setInt32(0, 25, false);\n\n// 在第5个字节，以大端字节序写入值为25的32位整数\ndv.setInt32(4, 25);\n\n// 在第9个字节，以小端字节序写入值为2.5的32位浮点数\ndv.setFloat32(8, 2.5, true);\n```\n\n如果不确定正在使用的计算机的字节序，可以采用下面的判断方式。\n\n```\nvar littleEndian = (function() {\n  var buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true);\n  return new Int16Array(buffer)[0] === 256;\n})();\n```\n\n#### Blob\n\nBlob 对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。\n\n要从其他非blob对象和数据构造一个Blob，请使用 Blob() 构造函数。要创建包含另一个blob数据的子集blob，请使用 slice()方法。要获取用户文件系统上的文件对应的Blob对象，请参阅 File文档。\n\n从Blob中读取内容的唯一方法是使用 FileReader。以下代码将 Blob 的内容作为类型数组读取：\n\n```\nvar reader = new FileReader();\nreader.addEventListener(\"loadend\", function() {\n   // reader.result 包含转化为类型数组的blob\n});\nreader.readAsArrayBuffer(blob);\n```\n\n更多关于Blob的内容，请直接查看[这里](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)\n\n### 数据格式转换\n\n#### String转Blob\n\n```\n//将字符串 转换成 Blob 对象\nvar blob = new Blob([\"Hello World!\"], {\n    type: 'text/plain'\n});\nconsole.info(blob);\nconsole.info(blob.slice(1, 3, 'text/plain'));\n```\n#### TypeArray转Blob\n\n```\n//将 TypeArray  转换成 Blob 对象\nvar array = new Uint16Array([97, 32, 72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]);\n//测试成功\n//var blob = new Blob([array], { type: \"application/octet-binary\" });\n//测试成功， 注意必须[]的包裹\nvar blob = new Blob([array]);\n//将 Blob对象 读成字符串\nvar reader = new FileReader();\nreader.readAsText(blob, 'utf-8');\nreader.onload = function (e) {\n    console.info(reader.result); //a Hello world!\n}\n```\n\n#### ArrayBuffer转Blob\n\n```\nvar buffer = new ArrayBuffer(32);\nvar blob = new Blob([buffer]);       // 注意必须包裹[]\n```\n\n#### Blob转String\n\n这里需要注意的是readAsText方法的使用。\n\n```\n//将字符串转换成 Blob对象\nvar blob = new Blob(['中文字符串'], {\n    type: 'text/plain'\n});\n//将Blob 对象转换成字符串\nvar reader = new FileReader();\nreader.readAsText(blob, 'utf-8');\nreader.onload = function (e) {\n    console.info(reader.result);\n}\n```\n\n#### Blob转ArrayBuffer\n\n这里需要注意的是readAsArrayBuffer方法的使用。\n\n```\n//将字符串转换成 Blob对象\nvar blob = new Blob(['中文字符串'], {\n    type: 'text/plain'\n});\n//将Blob 对象转换成 ArrayBuffer\nvar reader = new FileReader();\nreader.readAsArrayBuffer(blob);\nreader.onload = function (e) {\n    console.info(reader.result); //ArrayBuffer {}\n    //经常会遇到的异常 Uncaught RangeError: byte length of Int16Array should be a multiple of 2\n    //var buf = new int16array(reader.result);\n    //console.info(buf);\n\n    //将 ArrayBufferView  转换成Blob\n    var buf = new Uint8Array(reader.result);\n    console.info(buf); //[228, 184, 173, 230, 150, 135, 229, 173, 151, 231, 172, 166, 228, 184, 178]\n    reader.readAsText(new Blob([buf]), 'utf-8');\n    reader.onload = function () {\n        console.info(reader.result); //中文字符串\n    };\n\n    //将 ArrayBufferView  转换成Blob\n    var buf = new DataView(reader.result);\n    console.info(buf); //DataView {}\n    reader.readAsText(new Blob([buf]), 'utf-8');\n    reader.onload = function () {\n        console.info(reader.result); //中文字符串\n    };\n}\n```\n\n","slug":"浅谈前端中的二进制数据类型","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds1c002bgxy09nbaq3dn","content":"<blockquote>\n<p>目前在一个项目中，WebSocket部分由于后端使用了gzip压缩，前端处理起来废了一点时间，从而发现自己在二进制数据类型这个知识点还存在一定的盲区，因此这里进行总结。</p>\n</blockquote>\n<p>本文主要简单介绍ArrayBuffer对象、TypedArray对象、DataView对象以及Blob原始数据类型，和它们之间的互相转换方法。部分代码参考<a href=\"http://javascript.ruanyifeng.com/stdlib/arraybuffer.html#toc4\" target=\"_blank\" rel=\"noopener\">这里</a>而非本人原创，仅做个人学习使用。</p>\n<p>这些类型化对象，一般会在以下场景中使用：</p>\n<ul>\n<li>WebGL 中，浏览器和显卡之间需要使用二进制数据进行通信。</li>\n<li>在一些 Rest 接口或者 WebSocket 中，采用压缩过的数据进行通信，这个压缩和解压缩的过程可能需要借助二进制对象。</li>\n<li>在 Canvas 中，我们可能需要通过生成 Blob 的方式保存当前内容。</li>\n<li>在 Img 等资源文件中，URL 可以为 Blob 原始数据类型。</li>\n<li>在读取用户上传文件时，可能需要用到二进制数据类型进行中间转换。</li>\n</ul>\n<p>下文分两部分，前一部分概述各个二进制数据类型，后一部分将它们之间的互相转换。</p>\n<h3 id=\"二进制数据类型概述\"><a href=\"#二进制数据类型概述\" class=\"headerlink\" title=\"二进制数据类型概述\"></a>二进制数据类型概述</h3><h4 id=\"ArrayBuffer\"><a href=\"#ArrayBuffer\" class=\"headerlink\" title=\"ArrayBuffer\"></a>ArrayBuffer</h4><p>ArrayBuffer对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（TypedArray视图和DataView视图)来读写，视图的作用是以指定格式解读二进制数据。</p>\n<p>ArrayBuffer也是一个构造函数，可以分配一段可以存放数据的连续内存区域。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf = new ArrayBuffer(32);</span><br></pre></td></tr></table></figure>\n<p>上面代码生成了一段32字节的内存区域，每个字节的值默认都是0。可以看到，ArrayBuffer构造函数的参数是所需要的内存大小（单位字节）。</p>\n<p>为了读写这段内容，需要为它指定视图。DataView视图的创建，需要提供ArrayBuffer对象实例作为参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf = new ArrayBuffer(32);</span><br><span class=\"line\">var dataView = new DataView(buf);</span><br><span class=\"line\">dataView.getUint8(0) // 0</span><br></pre></td></tr></table></figure>\n<p>上面代码对一段32字节的内存，建立DataView视图，然后以不带符号的8位整数格式，读取第一个元素，结果得到0，因为原始内存的ArrayBuffer对象，默认所有位都是0。</p>\n<p>另外，我们可以将ArrayBuffer生成的结果，传入TypedArray中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(12);</span><br><span class=\"line\"></span><br><span class=\"line\">var x1 = new Int32Array(buffer);</span><br><span class=\"line\">x1[0] = 1;</span><br><span class=\"line\">var x2 = new Uint8Array(buffer);</span><br><span class=\"line\">x2[0]  = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">x1[0] // 2</span><br></pre></td></tr></table></figure>\n<p>ArrayBuffer实例的byteLength属性，返回所分配的内存区域的字节长度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(32);</span><br><span class=\"line\">buffer.byteLength</span><br><span class=\"line\">// 32</span><br></pre></td></tr></table></figure>\n<p>如果要分配的内存区域很大，有可能分配失败（因为没有那么多的连续空余内存），所以有必要检查是否分配成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (buffer.byteLength === n) &#123;</span><br><span class=\"line\">  // 成功</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  // 失败</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ArrayBuffer实例有一个slice方法，允许将内存区域的一部分，拷贝生成一个新的ArrayBuffer对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(8);</span><br><span class=\"line\">var newBuffer = buffer.slice(0, 3);</span><br></pre></td></tr></table></figure>\n<p>上面代码拷贝buffer对象的前3个字节（从0开始，到第3个字节前面结束），生成一个新的ArrayBuffer对象。slice方法其实包含两步，第一步是先分配一段新内存，第二步是将原来那个ArrayBuffer对象拷贝过去。</p>\n<p>slice方法接受两个参数，第一个参数表示拷贝开始的字节序号（含该字节），第二个参数表示拷贝截止的字节序号（不含该字节）。如果省略第二个参数，则默认到原ArrayBuffer对象的结尾。</p>\n<p>除了slice方法，ArrayBuffer对象不提供任何直接读写内存的方法，只允许在其上方建立视图，然后通过视图读写。</p>\n<p>ArrayBuffer有一个静态方法isView，返回一个布尔值，表示参数是否为ArrayBuffer的视图实例。这个方法大致相当于判断参数，是否为TypedArray实例或DataView实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(8);</span><br><span class=\"line\">ArrayBuffer.isView(buffer) // false</span><br><span class=\"line\"></span><br><span class=\"line\">var v = new Int32Array(buffer);</span><br><span class=\"line\">ArrayBuffer.isView(v) // true</span><br></pre></td></tr></table></figure>\n<h4 id=\"TypedArray\"><a href=\"#TypedArray\" class=\"headerlink\" title=\"TypedArray\"></a>TypedArray</h4><p>目前，TypedArray对象一共提供9种类型的视图，每一种视图都是一种构造函数。</p>\n<ul>\n<li>Int8Array：8位有符号整数，长度1个字节。</li>\n<li>Uint8Array：8位无符号整数，长度1个字节。</li>\n<li>Uint8ClampedArray：8位无符号整数，长度1个字节，溢出处理不同。</li>\n<li>Int16Array：16位有符号整数，长度2个字节。</li>\n<li>Uint16Array：16位无符号整数，长度2个字节。</li>\n<li>Int32Array：32位有符号整数，长度4个字节。</li>\n<li>Uint32Array：32位无符号整数，长度4个字节。</li>\n<li>Float32Array：32位浮点数，长度4个字节。</li>\n<li>Float64Array：64位浮点数，长度8个字节。</li>\n</ul>\n<p>这9个构造函数生成的对象，统称为TypedArray对象。它们很像正常数组，都有length属性，都能用方括号运算符（[]）获取单个元素，所有数组的方法，在类型化数组上面都能使用。两者的差异主要在以下方面。</p>\n<ul>\n<li>TypedArray数组的所有成员，都是同一种类型和格式。</li>\n<li>TypedArray数组的成员是连续的，不会有空位。</li>\n<li>Typed化数组成员的默认值为0。比如，new Array(10)返回一个正常数组，里面没有任何成员，只是10个空位；new Uint8Array(10)返回一个类型化数组，里面10个成员都是0。</li>\n<li>TypedArray数组只是一层视图，本身不储存数据，它的数据都储存在底层的ArrayBuffer对象之中，要获取底层对象必须使用buffer属性。</li>\n</ul>\n<h5 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h5><p>TypedArray数组提供9种构造函数，用来生成相应类型的数组实例。</p>\n<p>构造函数有多种用法。</p>\n<ul>\n<li>TypedArray(buffer, byteOffset=0, length?)</li>\n</ul>\n<p>同一个ArrayBuffer对象之上，可以根据不同的数据类型，建立多个视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个8字节的ArrayBuffer</span><br><span class=\"line\">var b = new ArrayBuffer(8);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾</span><br><span class=\"line\">var v1 = new Int32Array(b);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾</span><br><span class=\"line\">var v2 = new Uint8Array(b, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个指向b的Int16视图，开始于字节2，长度为2</span><br><span class=\"line\">var v3 = new Int16Array(b, 2, 2);</span><br></pre></td></tr></table></figure>\n<p>对于以上代码，v1、v2和v3是重叠的：v1[0]是一个32位整数，指向字节0～字节3；v2[0]是一个8位无符号整数，指向字节2；v3[0]是一个16位整数，指向字节2～字节3。只要任何一个视图对内存有所修改，就会在另外两个视图上反应出来。</p>\n<p>注意，byteOffset必须与所要建立的数据类型一致，否则会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(8);</span><br><span class=\"line\">var i16 = new Int16Array(buffer, 1);</span><br><span class=\"line\">// Uncaught RangeError: start offset of Int16Array should be a multiple of 2</span><br></pre></td></tr></table></figure>\n<p>上面代码中，新生成一个8个字节的ArrayBuffer对象，然后在这个对象的第一个字节，建立带符号的16位整数视图，结果报错。因为，带符号的16位整数需要两个字节，所以byteOffset参数必须能够被2整除。</p>\n<p>如果想从任意字节开始解读ArrayBuffer对象，必须使用DataView视图，因为TypedArray视图只提供9种固定的解读格式。</p>\n<ul>\n<li>TypedArray(length)</li>\n</ul>\n<p>视图还可以不通过ArrayBuffer对象，直接分配内存而生成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f64a = new Float64Array(8);</span><br><span class=\"line\">f64a[0] = 10;</span><br><span class=\"line\">f64a[1] = 20;</span><br><span class=\"line\">f64a[2] = f64a[0] + f64a[1];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TypedArray(typedArray)</li>\n</ul>\n<p>类型化数组的构造函数，可以接受另一个视图实例作为参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var typedArray = new Int8Array(new Uint8Array(4));</span><br></pre></td></tr></table></figure>\n<p>上面代码中，Int8Array构造函数接受一个Uint8Array实例作为参数。</p>\n<p>注意，此时生成的新数组，只是复制了参数数组的值，对应的底层内存是不一样的。新数组会开辟一段新的内存储存数据，不会在原数组的内存之上建立视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = new Int8Array([1, 1]);</span><br><span class=\"line\">var y = new Int8Array(x);</span><br><span class=\"line\">x[0] // 1</span><br><span class=\"line\">y[0] // 1</span><br><span class=\"line\"></span><br><span class=\"line\">x[0] = 2;</span><br><span class=\"line\">y[0] // 1</span><br></pre></td></tr></table></figure>\n<p>上面代码中，数组y是以数组x为模板而生成的，当x变动的时候，y并没有变动。</p>\n<p>如果想基于同一段内存，构造不同的视图，可以采用下面的写法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = new Int8Array([1, 1]);</span><br><span class=\"line\">var y = new Int8Array(x.buffer);</span><br><span class=\"line\">x[0] // 1</span><br><span class=\"line\">y[0] // 1</span><br><span class=\"line\"></span><br><span class=\"line\">x[0] = 2;</span><br><span class=\"line\">y[0] // 2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TypedArray(arrayLikeObject)</li>\n</ul>\n<p>构造函数的参数也可以是一个普通数组，然后直接生成TypedArray实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var typedArray = new Uint8Array([1, 2, 3, 4]);</span><br></pre></td></tr></table></figure>\n<p>注意，这时TypedArray视图会重新开辟内存，不会在原数组的内存上建立视图。</p>\n<p>上面代码从一个普通的数组，生成一个8位无符号整数的TypedArray实例。</p>\n<p>TypedArray数组也可以转换回普通数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var normalArray = Array.prototype.slice.call(typedArray);</span><br></pre></td></tr></table></figure>\n<h5 id=\"BYTES-PER-ELEMENT属性\"><a href=\"#BYTES-PER-ELEMENT属性\" class=\"headerlink\" title=\"BYTES_PER_ELEMENT属性\"></a>BYTES_PER_ELEMENT属性</h5><p>每一种视图的构造函数，都有一个BYTES_PER_ELEMENT属性，表示这种数据类型占据的字节数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Int8Array.BYTES_PER_ELEMENT // 1</span><br><span class=\"line\">Uint8Array.BYTES_PER_ELEMENT // 1</span><br><span class=\"line\">Int16Array.BYTES_PER_ELEMENT // 2</span><br><span class=\"line\">Uint16Array.BYTES_PER_ELEMENT // 2</span><br><span class=\"line\">Int32Array.BYTES_PER_ELEMENT // 4</span><br><span class=\"line\">Uint32Array.BYTES_PER_ELEMENT // 4</span><br><span class=\"line\">Float32Array.BYTES_PER_ELEMENT // 4</span><br><span class=\"line\">Float64Array.BYTES_PER_ELEMENT // 8</span><br></pre></td></tr></table></figure>\n<h5 id=\"ArrayBuffer与字符串的互相转换\"><a href=\"#ArrayBuffer与字符串的互相转换\" class=\"headerlink\" title=\"ArrayBuffer与字符串的互相转换\"></a>ArrayBuffer与字符串的互相转换</h5><p>ArrayBuffer转为字符串，或者字符串转为ArrayBuffer，有一个前提，即字符串的编码方法是确定的。假定字符串采用UTF-16编码（JavaScript的内部编码方式），可以自己编写转换函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ArrayBuffer转为字符串，参数为ArrayBuffer对象</span><br><span class=\"line\">function ab2str(buf) &#123;</span><br><span class=\"line\">  return String.fromCharCode.apply(null, new Uint16Array(buf));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 字符串转为ArrayBuffer对象，参数为字符串</span><br><span class=\"line\">function str2ab(str) &#123;</span><br><span class=\"line\">  var buf = new ArrayBuffer(str.length * 2); // 每个字符占用2个字节</span><br><span class=\"line\">  var bufView = new Uint16Array(buf);</span><br><span class=\"line\">  for (var i = 0, strLen = str.length; i &lt; strLen; i++) &#123;</span><br><span class=\"line\">    bufView[i] = str.charCodeAt(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"TypedArray-prototype-set\"><a href=\"#TypedArray-prototype-set\" class=\"headerlink\" title=\"TypedArray.prototype.set()\"></a>TypedArray.prototype.set()</h5><p>TypedArray数组的set方法用于复制数组（正常数组或TypedArray数组），也就是将一段内容完全复制到另一段内存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Uint8Array(8);</span><br><span class=\"line\">var b = new Uint8Array(8);</span><br><span class=\"line\"></span><br><span class=\"line\">b.set(a);</span><br></pre></td></tr></table></figure>\n<p>上面代码复制a数组的内容到b数组，它是整段内存的复制，比一个个拷贝成员的那种复制快得多。set方法还可以接受第二个参数，表示从b对象哪一个成员开始复制a对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Uint16Array(8);</span><br><span class=\"line\">var b = new Uint16Array(10);</span><br><span class=\"line\"></span><br><span class=\"line\">b.set(a, 2)</span><br></pre></td></tr></table></figure>\n<p>上面代码的b数组比a数组多两个成员，所以从b[2]开始复制。</p>\n<h5 id=\"TypedArray-prototype-subarray\"><a href=\"#TypedArray-prototype-subarray\" class=\"headerlink\" title=\"TypedArray.prototype.subarray()\"></a>TypedArray.prototype.subarray()</h5><p>subarray方法是对于TypedArray数组的一部分，再建立一个新的视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Uint16Array(8);</span><br><span class=\"line\">var b = a.subarray(2,3);</span><br><span class=\"line\"></span><br><span class=\"line\">a.byteLength // 16</span><br><span class=\"line\">b.byteLength // 2</span><br></pre></td></tr></table></figure>\n<p>subarray方法的第一个参数是起始的成员序号，第二个参数是结束的成员序号（不含该成员），如果省略则包含剩余的全部成员。所以，上面代码的a.subarray(2,3)，意味着b只包含a[2]一个成员，字节长度为2。</p>\n<h5 id=\"TypedArray-prototype-slice\"><a href=\"#TypedArray-prototype-slice\" class=\"headerlink\" title=\"TypedArray.prototype.slice()\"></a>TypedArray.prototype.slice()</h5><p>TypeArray实例的slice方法，可以返回一个指定位置的新的TypedArray实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ui8 = Uint8Array.of(0, 1, 2);</span><br><span class=\"line\">ui8.slice(-1)</span><br><span class=\"line\">// Uint8Array [ 2 ]</span><br></pre></td></tr></table></figure>\n<p>上面代码中，ui8是8位无符号整数数组视图的一个实例。它的slice方法可以从当前视图之中，返回一个新的视图实例。</p>\n<p>slice方法的参数，表示原数组的具体位置，开始生成新数组。负值表示逆向的位置，即-1为倒数第一个位置，-2表示倒数第二个位置，以此类推。</p>\n<h5 id=\"TypedArray-of\"><a href=\"#TypedArray-of\" class=\"headerlink\" title=\"TypedArray.of()\"></a>TypedArray.of()</h5><p>TypedArray数组的所有构造函数，都有一个静态方法of，用于将参数转为一个TypedArray实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Float32Array.of(0.151, -8, 3.7)</span><br><span class=\"line\">// Float32Array [ 0.151, -8, 3.7 ]</span><br></pre></td></tr></table></figure>\n<h5 id=\"TypedArray-from\"><a href=\"#TypedArray-from\" class=\"headerlink\" title=\"TypedArray.from()\"></a>TypedArray.from()</h5><p>静态方法from接受一个<strong>可遍历的数据结构（比如数组）</strong>作为参数，返回一个基于这个结构的TypedArray实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uint16Array.from([0, 1, 2])</span><br><span class=\"line\">// Uint16Array [ 0, 1, 2 ]</span><br></pre></td></tr></table></figure>\n<p>这个方法还可以将一种TypedArray实例，转为另一种。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ui16 = Uint16Array.from(Uint8Array.of(0, 1, 2));</span><br><span class=\"line\">ui16 instanceof Uint16Array // true</span><br></pre></td></tr></table></figure>\n<p>from方法还可以接受一个函数，作为第二个参数，用来对每个元素进行遍历，功能类似map方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Int8Array.of(127, 126, 125).map(x =&gt; 2 * x)</span><br><span class=\"line\">// Int8Array [ -2, -4, -6 ]</span><br><span class=\"line\"></span><br><span class=\"line\">Int16Array.from(Int8Array.of(127, 126, 125), x =&gt; 2 * x)</span><br><span class=\"line\">// Int16Array [ 254, 252, 250 ]</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，from方法没有发生溢出，这说明遍历是针对新生成的16位整数数组，而不是针对原来的8位整数数组。也就是说，from会将第一个参数指定的TypedArray数组，拷贝到另一段内存之中（占用内存从3字节变为6字节），然后再进行处理。</p>\n<h4 id=\"DataView\"><a href=\"#DataView\" class=\"headerlink\" title=\"DataView\"></a>DataView</h4><p>如果一段数据包括多种类型（比如服务器传来的HTTP数据），这时除了建立ArrayBuffer对象的复合视图以外，还可以通过DataView视图进行操作。</p>\n<p>DataView视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，ArrayBuffer对象的各种TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。</p>\n<p>DataView视图本身也是构造函数，接受一个ArrayBuffer对象作为参数，生成视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span><br></pre></td></tr></table></figure>\n<p>下面是一个例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(24);</span><br><span class=\"line\">var dv = new DataView(buffer);</span><br></pre></td></tr></table></figure>\n<p>DataView实例有以下属性，含义与TypedArray实例的同名方法相同。</p>\n<ul>\n<li>DataView.prototype.buffer：返回对应的ArrayBuffer对象</li>\n<li>DataView.prototype.byteLength：返回占据的内存字节长度</li>\n<li>DataView.prototype.byteOffset：返回当前视图从对应的ArrayBuffer对象的哪个字节开始</li>\n</ul>\n<p>DataView实例提供8个方法读取内存。</p>\n<ul>\n<li>getInt8：读取1个字节，返回一个8位整数。</li>\n<li>getUint8：读取1个字节，返回一个无符号的8位整数。</li>\n<li>getInt16：读取2个字节，返回一个16位整数。</li>\n<li>getUint16：读取2个字节，返回一个无符号的16位整数。</li>\n<li>getInt32：读取4个字节，返回一个32位整数。</li>\n<li>getUint32：读取4个字节，返回一个无符号的32位整数。</li>\n<li>getFloat32：读取4个字节，返回一个32位浮点数。</li>\n<li>getFloat64：读取8个字节，返回一个64位浮点数。</li>\n</ul>\n<p>这一系列get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(24);</span><br><span class=\"line\">var dv = new DataView(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">// 从第1个字节读取一个8位无符号整数</span><br><span class=\"line\">var v1 = dv.getUint8(0);</span><br><span class=\"line\"></span><br><span class=\"line\">// 从第2个字节读取一个16位无符号整数</span><br><span class=\"line\">var v2 = dv.getUint16(1);</span><br><span class=\"line\"></span><br><span class=\"line\">// 从第4个字节读取一个16位无符号整数</span><br><span class=\"line\">var v3 = dv.getUint16(3);</span><br></pre></td></tr></table></figure>\n<p>上面代码读取了ArrayBuffer对象的前5个字节，其中有一个8位整数和两个十六位整数。</p>\n<p>如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 小端字节序</span><br><span class=\"line\">var v1 = dv.getUint16(1, true);</span><br><span class=\"line\"></span><br><span class=\"line\">// 大端字节序</span><br><span class=\"line\">var v2 = dv.getUint16(3, false);</span><br><span class=\"line\"></span><br><span class=\"line\">// 大端字节序</span><br><span class=\"line\">var v3 = dv.getUint16(3);</span><br></pre></td></tr></table></figure>\n<p>DataView视图提供8个方法写入内存。</p>\n<ul>\n<li>setInt8：写入1个字节的8位整数。</li>\n<li>setUint8：写入1个字节的8位无符号整数。</li>\n<li>setInt16：写入2个字节的16位整数。</li>\n<li>setUint16：写入2个字节的16位无符号整数。</li>\n<li>setInt32：写入4个字节的32位整数。</li>\n<li>setUint32：写入4个字节的32位无符号整数。</li>\n<li>setFloat32：写入4个字节的32位浮点数。</li>\n<li>setFloat64：写入8个字节的64位浮点数。</li>\n</ul>\n<p>这一系列set方法，接受两个参数，第一个参数是字节序号，表示从哪个字节开始写入，第二个参数为写入的数据。对于那些写入两个或两个以上字节的方法，需要指定第三个参数，false或者undefined表示使用大端字节序写入，true表示使用小端字节序写入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在第1个字节，以大端字节序写入值为25的32位整数</span><br><span class=\"line\">dv.setInt32(0, 25, false);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在第5个字节，以大端字节序写入值为25的32位整数</span><br><span class=\"line\">dv.setInt32(4, 25);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在第9个字节，以小端字节序写入值为2.5的32位浮点数</span><br><span class=\"line\">dv.setFloat32(8, 2.5, true);</span><br></pre></td></tr></table></figure>\n<p>如果不确定正在使用的计算机的字节序，可以采用下面的判断方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var littleEndian = (function() &#123;</span><br><span class=\"line\">  var buffer = new ArrayBuffer(2);</span><br><span class=\"line\">  new DataView(buffer).setInt16(0, 256, true);</span><br><span class=\"line\">  return new Int16Array(buffer)[0] === 256;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h4><p>Blob 对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p>\n<p>要从其他非blob对象和数据构造一个Blob，请使用 Blob() 构造函数。要创建包含另一个blob数据的子集blob，请使用 slice()方法。要获取用户文件系统上的文件对应的Blob对象，请参阅 File文档。</p>\n<p>从Blob中读取内容的唯一方法是使用 FileReader。以下代码将 Blob 的内容作为类型数组读取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reader = new FileReader();</span><br><span class=\"line\">reader.addEventListener(&quot;loadend&quot;, function() &#123;</span><br><span class=\"line\">   // reader.result 包含转化为类型数组的blob</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">reader.readAsArrayBuffer(blob);</span><br></pre></td></tr></table></figure>\n<p>更多关于Blob的内容，请直接查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"数据格式转换\"><a href=\"#数据格式转换\" class=\"headerlink\" title=\"数据格式转换\"></a>数据格式转换</h3><h4 id=\"String转Blob\"><a href=\"#String转Blob\" class=\"headerlink\" title=\"String转Blob\"></a>String转Blob</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将字符串 转换成 Blob 对象</span><br><span class=\"line\">var blob = new Blob([&quot;Hello World!&quot;], &#123;</span><br><span class=\"line\">    type: &apos;text/plain&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.info(blob);</span><br><span class=\"line\">console.info(blob.slice(1, 3, &apos;text/plain&apos;));</span><br></pre></td></tr></table></figure>\n<h4 id=\"TypeArray转Blob\"><a href=\"#TypeArray转Blob\" class=\"headerlink\" title=\"TypeArray转Blob\"></a>TypeArray转Blob</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将 TypeArray  转换成 Blob 对象</span><br><span class=\"line\">var array = new Uint16Array([97, 32, 72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]);</span><br><span class=\"line\">//测试成功</span><br><span class=\"line\">//var blob = new Blob([array], &#123; type: &quot;application/octet-binary&quot; &#125;);</span><br><span class=\"line\">//测试成功， 注意必须[]的包裹</span><br><span class=\"line\">var blob = new Blob([array]);</span><br><span class=\"line\">//将 Blob对象 读成字符串</span><br><span class=\"line\">var reader = new FileReader();</span><br><span class=\"line\">reader.readAsText(blob, &apos;utf-8&apos;);</span><br><span class=\"line\">reader.onload = function (e) &#123;</span><br><span class=\"line\">    console.info(reader.result); //a Hello world!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ArrayBuffer转Blob\"><a href=\"#ArrayBuffer转Blob\" class=\"headerlink\" title=\"ArrayBuffer转Blob\"></a>ArrayBuffer转Blob</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(32);</span><br><span class=\"line\">var blob = new Blob([buffer]);       // 注意必须包裹[]</span><br></pre></td></tr></table></figure>\n<h4 id=\"Blob转String\"><a href=\"#Blob转String\" class=\"headerlink\" title=\"Blob转String\"></a>Blob转String</h4><p>这里需要注意的是readAsText方法的使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将字符串转换成 Blob对象</span><br><span class=\"line\">var blob = new Blob([&apos;中文字符串&apos;], &#123;</span><br><span class=\"line\">    type: &apos;text/plain&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//将Blob 对象转换成字符串</span><br><span class=\"line\">var reader = new FileReader();</span><br><span class=\"line\">reader.readAsText(blob, &apos;utf-8&apos;);</span><br><span class=\"line\">reader.onload = function (e) &#123;</span><br><span class=\"line\">    console.info(reader.result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Blob转ArrayBuffer\"><a href=\"#Blob转ArrayBuffer\" class=\"headerlink\" title=\"Blob转ArrayBuffer\"></a>Blob转ArrayBuffer</h4><p>这里需要注意的是readAsArrayBuffer方法的使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将字符串转换成 Blob对象</span><br><span class=\"line\">var blob = new Blob([&apos;中文字符串&apos;], &#123;</span><br><span class=\"line\">    type: &apos;text/plain&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//将Blob 对象转换成 ArrayBuffer</span><br><span class=\"line\">var reader = new FileReader();</span><br><span class=\"line\">reader.readAsArrayBuffer(blob);</span><br><span class=\"line\">reader.onload = function (e) &#123;</span><br><span class=\"line\">    console.info(reader.result); //ArrayBuffer &#123;&#125;</span><br><span class=\"line\">    //经常会遇到的异常 Uncaught RangeError: byte length of Int16Array should be a multiple of 2</span><br><span class=\"line\">    //var buf = new int16array(reader.result);</span><br><span class=\"line\">    //console.info(buf);</span><br><span class=\"line\"></span><br><span class=\"line\">    //将 ArrayBufferView  转换成Blob</span><br><span class=\"line\">    var buf = new Uint8Array(reader.result);</span><br><span class=\"line\">    console.info(buf); //[228, 184, 173, 230, 150, 135, 229, 173, 151, 231, 172, 166, 228, 184, 178]</span><br><span class=\"line\">    reader.readAsText(new Blob([buf]), &apos;utf-8&apos;);</span><br><span class=\"line\">    reader.onload = function () &#123;</span><br><span class=\"line\">        console.info(reader.result); //中文字符串</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将 ArrayBufferView  转换成Blob</span><br><span class=\"line\">    var buf = new DataView(reader.result);</span><br><span class=\"line\">    console.info(buf); //DataView &#123;&#125;</span><br><span class=\"line\">    reader.readAsText(new Blob([buf]), &apos;utf-8&apos;);</span><br><span class=\"line\">    reader.onload = function () &#123;</span><br><span class=\"line\">        console.info(reader.result); //中文字符串</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>目前在一个项目中，WebSocket部分由于后端使用了gzip压缩，前端处理起来废了一点时间，从而发现自己在二进制数据类型这个知识点还存在一定的盲区，因此这里进行总结。</p>\n</blockquote>\n<p>本文主要简单介绍ArrayBuffer对象、TypedArray对象、DataView对象以及Blob原始数据类型，和它们之间的互相转换方法。部分代码参考<a href=\"http://javascript.ruanyifeng.com/stdlib/arraybuffer.html#toc4\" target=\"_blank\" rel=\"noopener\">这里</a>而非本人原创，仅做个人学习使用。</p>\n<p>这些类型化对象，一般会在以下场景中使用：</p>\n<ul>\n<li>WebGL 中，浏览器和显卡之间需要使用二进制数据进行通信。</li>\n<li>在一些 Rest 接口或者 WebSocket 中，采用压缩过的数据进行通信，这个压缩和解压缩的过程可能需要借助二进制对象。</li>\n<li>在 Canvas 中，我们可能需要通过生成 Blob 的方式保存当前内容。</li>\n<li>在 Img 等资源文件中，URL 可以为 Blob 原始数据类型。</li>\n<li>在读取用户上传文件时，可能需要用到二进制数据类型进行中间转换。</li>\n</ul>\n<p>下文分两部分，前一部分概述各个二进制数据类型，后一部分将它们之间的互相转换。</p>\n<h3 id=\"二进制数据类型概述\"><a href=\"#二进制数据类型概述\" class=\"headerlink\" title=\"二进制数据类型概述\"></a>二进制数据类型概述</h3><h4 id=\"ArrayBuffer\"><a href=\"#ArrayBuffer\" class=\"headerlink\" title=\"ArrayBuffer\"></a>ArrayBuffer</h4><p>ArrayBuffer对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（TypedArray视图和DataView视图)来读写，视图的作用是以指定格式解读二进制数据。</p>\n<p>ArrayBuffer也是一个构造函数，可以分配一段可以存放数据的连续内存区域。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf = new ArrayBuffer(32);</span><br></pre></td></tr></table></figure>\n<p>上面代码生成了一段32字节的内存区域，每个字节的值默认都是0。可以看到，ArrayBuffer构造函数的参数是所需要的内存大小（单位字节）。</p>\n<p>为了读写这段内容，需要为它指定视图。DataView视图的创建，需要提供ArrayBuffer对象实例作为参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buf = new ArrayBuffer(32);</span><br><span class=\"line\">var dataView = new DataView(buf);</span><br><span class=\"line\">dataView.getUint8(0) // 0</span><br></pre></td></tr></table></figure>\n<p>上面代码对一段32字节的内存，建立DataView视图，然后以不带符号的8位整数格式，读取第一个元素，结果得到0，因为原始内存的ArrayBuffer对象，默认所有位都是0。</p>\n<p>另外，我们可以将ArrayBuffer生成的结果，传入TypedArray中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(12);</span><br><span class=\"line\"></span><br><span class=\"line\">var x1 = new Int32Array(buffer);</span><br><span class=\"line\">x1[0] = 1;</span><br><span class=\"line\">var x2 = new Uint8Array(buffer);</span><br><span class=\"line\">x2[0]  = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">x1[0] // 2</span><br></pre></td></tr></table></figure>\n<p>ArrayBuffer实例的byteLength属性，返回所分配的内存区域的字节长度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(32);</span><br><span class=\"line\">buffer.byteLength</span><br><span class=\"line\">// 32</span><br></pre></td></tr></table></figure>\n<p>如果要分配的内存区域很大，有可能分配失败（因为没有那么多的连续空余内存），所以有必要检查是否分配成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (buffer.byteLength === n) &#123;</span><br><span class=\"line\">  // 成功</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  // 失败</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ArrayBuffer实例有一个slice方法，允许将内存区域的一部分，拷贝生成一个新的ArrayBuffer对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(8);</span><br><span class=\"line\">var newBuffer = buffer.slice(0, 3);</span><br></pre></td></tr></table></figure>\n<p>上面代码拷贝buffer对象的前3个字节（从0开始，到第3个字节前面结束），生成一个新的ArrayBuffer对象。slice方法其实包含两步，第一步是先分配一段新内存，第二步是将原来那个ArrayBuffer对象拷贝过去。</p>\n<p>slice方法接受两个参数，第一个参数表示拷贝开始的字节序号（含该字节），第二个参数表示拷贝截止的字节序号（不含该字节）。如果省略第二个参数，则默认到原ArrayBuffer对象的结尾。</p>\n<p>除了slice方法，ArrayBuffer对象不提供任何直接读写内存的方法，只允许在其上方建立视图，然后通过视图读写。</p>\n<p>ArrayBuffer有一个静态方法isView，返回一个布尔值，表示参数是否为ArrayBuffer的视图实例。这个方法大致相当于判断参数，是否为TypedArray实例或DataView实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(8);</span><br><span class=\"line\">ArrayBuffer.isView(buffer) // false</span><br><span class=\"line\"></span><br><span class=\"line\">var v = new Int32Array(buffer);</span><br><span class=\"line\">ArrayBuffer.isView(v) // true</span><br></pre></td></tr></table></figure>\n<h4 id=\"TypedArray\"><a href=\"#TypedArray\" class=\"headerlink\" title=\"TypedArray\"></a>TypedArray</h4><p>目前，TypedArray对象一共提供9种类型的视图，每一种视图都是一种构造函数。</p>\n<ul>\n<li>Int8Array：8位有符号整数，长度1个字节。</li>\n<li>Uint8Array：8位无符号整数，长度1个字节。</li>\n<li>Uint8ClampedArray：8位无符号整数，长度1个字节，溢出处理不同。</li>\n<li>Int16Array：16位有符号整数，长度2个字节。</li>\n<li>Uint16Array：16位无符号整数，长度2个字节。</li>\n<li>Int32Array：32位有符号整数，长度4个字节。</li>\n<li>Uint32Array：32位无符号整数，长度4个字节。</li>\n<li>Float32Array：32位浮点数，长度4个字节。</li>\n<li>Float64Array：64位浮点数，长度8个字节。</li>\n</ul>\n<p>这9个构造函数生成的对象，统称为TypedArray对象。它们很像正常数组，都有length属性，都能用方括号运算符（[]）获取单个元素，所有数组的方法，在类型化数组上面都能使用。两者的差异主要在以下方面。</p>\n<ul>\n<li>TypedArray数组的所有成员，都是同一种类型和格式。</li>\n<li>TypedArray数组的成员是连续的，不会有空位。</li>\n<li>Typed化数组成员的默认值为0。比如，new Array(10)返回一个正常数组，里面没有任何成员，只是10个空位；new Uint8Array(10)返回一个类型化数组，里面10个成员都是0。</li>\n<li>TypedArray数组只是一层视图，本身不储存数据，它的数据都储存在底层的ArrayBuffer对象之中，要获取底层对象必须使用buffer属性。</li>\n</ul>\n<h5 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h5><p>TypedArray数组提供9种构造函数，用来生成相应类型的数组实例。</p>\n<p>构造函数有多种用法。</p>\n<ul>\n<li>TypedArray(buffer, byteOffset=0, length?)</li>\n</ul>\n<p>同一个ArrayBuffer对象之上，可以根据不同的数据类型，建立多个视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个8字节的ArrayBuffer</span><br><span class=\"line\">var b = new ArrayBuffer(8);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾</span><br><span class=\"line\">var v1 = new Int32Array(b);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾</span><br><span class=\"line\">var v2 = new Uint8Array(b, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个指向b的Int16视图，开始于字节2，长度为2</span><br><span class=\"line\">var v3 = new Int16Array(b, 2, 2);</span><br></pre></td></tr></table></figure>\n<p>对于以上代码，v1、v2和v3是重叠的：v1[0]是一个32位整数，指向字节0～字节3；v2[0]是一个8位无符号整数，指向字节2；v3[0]是一个16位整数，指向字节2～字节3。只要任何一个视图对内存有所修改，就会在另外两个视图上反应出来。</p>\n<p>注意，byteOffset必须与所要建立的数据类型一致，否则会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(8);</span><br><span class=\"line\">var i16 = new Int16Array(buffer, 1);</span><br><span class=\"line\">// Uncaught RangeError: start offset of Int16Array should be a multiple of 2</span><br></pre></td></tr></table></figure>\n<p>上面代码中，新生成一个8个字节的ArrayBuffer对象，然后在这个对象的第一个字节，建立带符号的16位整数视图，结果报错。因为，带符号的16位整数需要两个字节，所以byteOffset参数必须能够被2整除。</p>\n<p>如果想从任意字节开始解读ArrayBuffer对象，必须使用DataView视图，因为TypedArray视图只提供9种固定的解读格式。</p>\n<ul>\n<li>TypedArray(length)</li>\n</ul>\n<p>视图还可以不通过ArrayBuffer对象，直接分配内存而生成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f64a = new Float64Array(8);</span><br><span class=\"line\">f64a[0] = 10;</span><br><span class=\"line\">f64a[1] = 20;</span><br><span class=\"line\">f64a[2] = f64a[0] + f64a[1];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TypedArray(typedArray)</li>\n</ul>\n<p>类型化数组的构造函数，可以接受另一个视图实例作为参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var typedArray = new Int8Array(new Uint8Array(4));</span><br></pre></td></tr></table></figure>\n<p>上面代码中，Int8Array构造函数接受一个Uint8Array实例作为参数。</p>\n<p>注意，此时生成的新数组，只是复制了参数数组的值，对应的底层内存是不一样的。新数组会开辟一段新的内存储存数据，不会在原数组的内存之上建立视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = new Int8Array([1, 1]);</span><br><span class=\"line\">var y = new Int8Array(x);</span><br><span class=\"line\">x[0] // 1</span><br><span class=\"line\">y[0] // 1</span><br><span class=\"line\"></span><br><span class=\"line\">x[0] = 2;</span><br><span class=\"line\">y[0] // 1</span><br></pre></td></tr></table></figure>\n<p>上面代码中，数组y是以数组x为模板而生成的，当x变动的时候，y并没有变动。</p>\n<p>如果想基于同一段内存，构造不同的视图，可以采用下面的写法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = new Int8Array([1, 1]);</span><br><span class=\"line\">var y = new Int8Array(x.buffer);</span><br><span class=\"line\">x[0] // 1</span><br><span class=\"line\">y[0] // 1</span><br><span class=\"line\"></span><br><span class=\"line\">x[0] = 2;</span><br><span class=\"line\">y[0] // 2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TypedArray(arrayLikeObject)</li>\n</ul>\n<p>构造函数的参数也可以是一个普通数组，然后直接生成TypedArray实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var typedArray = new Uint8Array([1, 2, 3, 4]);</span><br></pre></td></tr></table></figure>\n<p>注意，这时TypedArray视图会重新开辟内存，不会在原数组的内存上建立视图。</p>\n<p>上面代码从一个普通的数组，生成一个8位无符号整数的TypedArray实例。</p>\n<p>TypedArray数组也可以转换回普通数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var normalArray = Array.prototype.slice.call(typedArray);</span><br></pre></td></tr></table></figure>\n<h5 id=\"BYTES-PER-ELEMENT属性\"><a href=\"#BYTES-PER-ELEMENT属性\" class=\"headerlink\" title=\"BYTES_PER_ELEMENT属性\"></a>BYTES_PER_ELEMENT属性</h5><p>每一种视图的构造函数，都有一个BYTES_PER_ELEMENT属性，表示这种数据类型占据的字节数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Int8Array.BYTES_PER_ELEMENT // 1</span><br><span class=\"line\">Uint8Array.BYTES_PER_ELEMENT // 1</span><br><span class=\"line\">Int16Array.BYTES_PER_ELEMENT // 2</span><br><span class=\"line\">Uint16Array.BYTES_PER_ELEMENT // 2</span><br><span class=\"line\">Int32Array.BYTES_PER_ELEMENT // 4</span><br><span class=\"line\">Uint32Array.BYTES_PER_ELEMENT // 4</span><br><span class=\"line\">Float32Array.BYTES_PER_ELEMENT // 4</span><br><span class=\"line\">Float64Array.BYTES_PER_ELEMENT // 8</span><br></pre></td></tr></table></figure>\n<h5 id=\"ArrayBuffer与字符串的互相转换\"><a href=\"#ArrayBuffer与字符串的互相转换\" class=\"headerlink\" title=\"ArrayBuffer与字符串的互相转换\"></a>ArrayBuffer与字符串的互相转换</h5><p>ArrayBuffer转为字符串，或者字符串转为ArrayBuffer，有一个前提，即字符串的编码方法是确定的。假定字符串采用UTF-16编码（JavaScript的内部编码方式），可以自己编写转换函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ArrayBuffer转为字符串，参数为ArrayBuffer对象</span><br><span class=\"line\">function ab2str(buf) &#123;</span><br><span class=\"line\">  return String.fromCharCode.apply(null, new Uint16Array(buf));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 字符串转为ArrayBuffer对象，参数为字符串</span><br><span class=\"line\">function str2ab(str) &#123;</span><br><span class=\"line\">  var buf = new ArrayBuffer(str.length * 2); // 每个字符占用2个字节</span><br><span class=\"line\">  var bufView = new Uint16Array(buf);</span><br><span class=\"line\">  for (var i = 0, strLen = str.length; i &lt; strLen; i++) &#123;</span><br><span class=\"line\">    bufView[i] = str.charCodeAt(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"TypedArray-prototype-set\"><a href=\"#TypedArray-prototype-set\" class=\"headerlink\" title=\"TypedArray.prototype.set()\"></a>TypedArray.prototype.set()</h5><p>TypedArray数组的set方法用于复制数组（正常数组或TypedArray数组），也就是将一段内容完全复制到另一段内存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Uint8Array(8);</span><br><span class=\"line\">var b = new Uint8Array(8);</span><br><span class=\"line\"></span><br><span class=\"line\">b.set(a);</span><br></pre></td></tr></table></figure>\n<p>上面代码复制a数组的内容到b数组，它是整段内存的复制，比一个个拷贝成员的那种复制快得多。set方法还可以接受第二个参数，表示从b对象哪一个成员开始复制a对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Uint16Array(8);</span><br><span class=\"line\">var b = new Uint16Array(10);</span><br><span class=\"line\"></span><br><span class=\"line\">b.set(a, 2)</span><br></pre></td></tr></table></figure>\n<p>上面代码的b数组比a数组多两个成员，所以从b[2]开始复制。</p>\n<h5 id=\"TypedArray-prototype-subarray\"><a href=\"#TypedArray-prototype-subarray\" class=\"headerlink\" title=\"TypedArray.prototype.subarray()\"></a>TypedArray.prototype.subarray()</h5><p>subarray方法是对于TypedArray数组的一部分，再建立一个新的视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Uint16Array(8);</span><br><span class=\"line\">var b = a.subarray(2,3);</span><br><span class=\"line\"></span><br><span class=\"line\">a.byteLength // 16</span><br><span class=\"line\">b.byteLength // 2</span><br></pre></td></tr></table></figure>\n<p>subarray方法的第一个参数是起始的成员序号，第二个参数是结束的成员序号（不含该成员），如果省略则包含剩余的全部成员。所以，上面代码的a.subarray(2,3)，意味着b只包含a[2]一个成员，字节长度为2。</p>\n<h5 id=\"TypedArray-prototype-slice\"><a href=\"#TypedArray-prototype-slice\" class=\"headerlink\" title=\"TypedArray.prototype.slice()\"></a>TypedArray.prototype.slice()</h5><p>TypeArray实例的slice方法，可以返回一个指定位置的新的TypedArray实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ui8 = Uint8Array.of(0, 1, 2);</span><br><span class=\"line\">ui8.slice(-1)</span><br><span class=\"line\">// Uint8Array [ 2 ]</span><br></pre></td></tr></table></figure>\n<p>上面代码中，ui8是8位无符号整数数组视图的一个实例。它的slice方法可以从当前视图之中，返回一个新的视图实例。</p>\n<p>slice方法的参数，表示原数组的具体位置，开始生成新数组。负值表示逆向的位置，即-1为倒数第一个位置，-2表示倒数第二个位置，以此类推。</p>\n<h5 id=\"TypedArray-of\"><a href=\"#TypedArray-of\" class=\"headerlink\" title=\"TypedArray.of()\"></a>TypedArray.of()</h5><p>TypedArray数组的所有构造函数，都有一个静态方法of，用于将参数转为一个TypedArray实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Float32Array.of(0.151, -8, 3.7)</span><br><span class=\"line\">// Float32Array [ 0.151, -8, 3.7 ]</span><br></pre></td></tr></table></figure>\n<h5 id=\"TypedArray-from\"><a href=\"#TypedArray-from\" class=\"headerlink\" title=\"TypedArray.from()\"></a>TypedArray.from()</h5><p>静态方法from接受一个<strong>可遍历的数据结构（比如数组）</strong>作为参数，返回一个基于这个结构的TypedArray实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uint16Array.from([0, 1, 2])</span><br><span class=\"line\">// Uint16Array [ 0, 1, 2 ]</span><br></pre></td></tr></table></figure>\n<p>这个方法还可以将一种TypedArray实例，转为另一种。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ui16 = Uint16Array.from(Uint8Array.of(0, 1, 2));</span><br><span class=\"line\">ui16 instanceof Uint16Array // true</span><br></pre></td></tr></table></figure>\n<p>from方法还可以接受一个函数，作为第二个参数，用来对每个元素进行遍历，功能类似map方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Int8Array.of(127, 126, 125).map(x =&gt; 2 * x)</span><br><span class=\"line\">// Int8Array [ -2, -4, -6 ]</span><br><span class=\"line\"></span><br><span class=\"line\">Int16Array.from(Int8Array.of(127, 126, 125), x =&gt; 2 * x)</span><br><span class=\"line\">// Int16Array [ 254, 252, 250 ]</span><br></pre></td></tr></table></figure>\n<p>上面的例子中，from方法没有发生溢出，这说明遍历是针对新生成的16位整数数组，而不是针对原来的8位整数数组。也就是说，from会将第一个参数指定的TypedArray数组，拷贝到另一段内存之中（占用内存从3字节变为6字节），然后再进行处理。</p>\n<h4 id=\"DataView\"><a href=\"#DataView\" class=\"headerlink\" title=\"DataView\"></a>DataView</h4><p>如果一段数据包括多种类型（比如服务器传来的HTTP数据），这时除了建立ArrayBuffer对象的复合视图以外，还可以通过DataView视图进行操作。</p>\n<p>DataView视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，ArrayBuffer对象的各种TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。</p>\n<p>DataView视图本身也是构造函数，接受一个ArrayBuffer对象作为参数，生成视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataView(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span><br></pre></td></tr></table></figure>\n<p>下面是一个例子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(24);</span><br><span class=\"line\">var dv = new DataView(buffer);</span><br></pre></td></tr></table></figure>\n<p>DataView实例有以下属性，含义与TypedArray实例的同名方法相同。</p>\n<ul>\n<li>DataView.prototype.buffer：返回对应的ArrayBuffer对象</li>\n<li>DataView.prototype.byteLength：返回占据的内存字节长度</li>\n<li>DataView.prototype.byteOffset：返回当前视图从对应的ArrayBuffer对象的哪个字节开始</li>\n</ul>\n<p>DataView实例提供8个方法读取内存。</p>\n<ul>\n<li>getInt8：读取1个字节，返回一个8位整数。</li>\n<li>getUint8：读取1个字节，返回一个无符号的8位整数。</li>\n<li>getInt16：读取2个字节，返回一个16位整数。</li>\n<li>getUint16：读取2个字节，返回一个无符号的16位整数。</li>\n<li>getInt32：读取4个字节，返回一个32位整数。</li>\n<li>getUint32：读取4个字节，返回一个无符号的32位整数。</li>\n<li>getFloat32：读取4个字节，返回一个32位浮点数。</li>\n<li>getFloat64：读取8个字节，返回一个64位浮点数。</li>\n</ul>\n<p>这一系列get方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(24);</span><br><span class=\"line\">var dv = new DataView(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">// 从第1个字节读取一个8位无符号整数</span><br><span class=\"line\">var v1 = dv.getUint8(0);</span><br><span class=\"line\"></span><br><span class=\"line\">// 从第2个字节读取一个16位无符号整数</span><br><span class=\"line\">var v2 = dv.getUint16(1);</span><br><span class=\"line\"></span><br><span class=\"line\">// 从第4个字节读取一个16位无符号整数</span><br><span class=\"line\">var v3 = dv.getUint16(3);</span><br></pre></td></tr></table></figure>\n<p>上面代码读取了ArrayBuffer对象的前5个字节，其中有一个8位整数和两个十六位整数。</p>\n<p>如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。默认情况下，DataView的get方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在get方法的第二个参数指定true。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 小端字节序</span><br><span class=\"line\">var v1 = dv.getUint16(1, true);</span><br><span class=\"line\"></span><br><span class=\"line\">// 大端字节序</span><br><span class=\"line\">var v2 = dv.getUint16(3, false);</span><br><span class=\"line\"></span><br><span class=\"line\">// 大端字节序</span><br><span class=\"line\">var v3 = dv.getUint16(3);</span><br></pre></td></tr></table></figure>\n<p>DataView视图提供8个方法写入内存。</p>\n<ul>\n<li>setInt8：写入1个字节的8位整数。</li>\n<li>setUint8：写入1个字节的8位无符号整数。</li>\n<li>setInt16：写入2个字节的16位整数。</li>\n<li>setUint16：写入2个字节的16位无符号整数。</li>\n<li>setInt32：写入4个字节的32位整数。</li>\n<li>setUint32：写入4个字节的32位无符号整数。</li>\n<li>setFloat32：写入4个字节的32位浮点数。</li>\n<li>setFloat64：写入8个字节的64位浮点数。</li>\n</ul>\n<p>这一系列set方法，接受两个参数，第一个参数是字节序号，表示从哪个字节开始写入，第二个参数为写入的数据。对于那些写入两个或两个以上字节的方法，需要指定第三个参数，false或者undefined表示使用大端字节序写入，true表示使用小端字节序写入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在第1个字节，以大端字节序写入值为25的32位整数</span><br><span class=\"line\">dv.setInt32(0, 25, false);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在第5个字节，以大端字节序写入值为25的32位整数</span><br><span class=\"line\">dv.setInt32(4, 25);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在第9个字节，以小端字节序写入值为2.5的32位浮点数</span><br><span class=\"line\">dv.setFloat32(8, 2.5, true);</span><br></pre></td></tr></table></figure>\n<p>如果不确定正在使用的计算机的字节序，可以采用下面的判断方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var littleEndian = (function() &#123;</span><br><span class=\"line\">  var buffer = new ArrayBuffer(2);</span><br><span class=\"line\">  new DataView(buffer).setInt16(0, 256, true);</span><br><span class=\"line\">  return new Int16Array(buffer)[0] === 256;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h4><p>Blob 对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p>\n<p>要从其他非blob对象和数据构造一个Blob，请使用 Blob() 构造函数。要创建包含另一个blob数据的子集blob，请使用 slice()方法。要获取用户文件系统上的文件对应的Blob对象，请参阅 File文档。</p>\n<p>从Blob中读取内容的唯一方法是使用 FileReader。以下代码将 Blob 的内容作为类型数组读取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reader = new FileReader();</span><br><span class=\"line\">reader.addEventListener(&quot;loadend&quot;, function() &#123;</span><br><span class=\"line\">   // reader.result 包含转化为类型数组的blob</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">reader.readAsArrayBuffer(blob);</span><br></pre></td></tr></table></figure>\n<p>更多关于Blob的内容，请直接查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"数据格式转换\"><a href=\"#数据格式转换\" class=\"headerlink\" title=\"数据格式转换\"></a>数据格式转换</h3><h4 id=\"String转Blob\"><a href=\"#String转Blob\" class=\"headerlink\" title=\"String转Blob\"></a>String转Blob</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将字符串 转换成 Blob 对象</span><br><span class=\"line\">var blob = new Blob([&quot;Hello World!&quot;], &#123;</span><br><span class=\"line\">    type: &apos;text/plain&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.info(blob);</span><br><span class=\"line\">console.info(blob.slice(1, 3, &apos;text/plain&apos;));</span><br></pre></td></tr></table></figure>\n<h4 id=\"TypeArray转Blob\"><a href=\"#TypeArray转Blob\" class=\"headerlink\" title=\"TypeArray转Blob\"></a>TypeArray转Blob</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将 TypeArray  转换成 Blob 对象</span><br><span class=\"line\">var array = new Uint16Array([97, 32, 72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]);</span><br><span class=\"line\">//测试成功</span><br><span class=\"line\">//var blob = new Blob([array], &#123; type: &quot;application/octet-binary&quot; &#125;);</span><br><span class=\"line\">//测试成功， 注意必须[]的包裹</span><br><span class=\"line\">var blob = new Blob([array]);</span><br><span class=\"line\">//将 Blob对象 读成字符串</span><br><span class=\"line\">var reader = new FileReader();</span><br><span class=\"line\">reader.readAsText(blob, &apos;utf-8&apos;);</span><br><span class=\"line\">reader.onload = function (e) &#123;</span><br><span class=\"line\">    console.info(reader.result); //a Hello world!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ArrayBuffer转Blob\"><a href=\"#ArrayBuffer转Blob\" class=\"headerlink\" title=\"ArrayBuffer转Blob\"></a>ArrayBuffer转Blob</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var buffer = new ArrayBuffer(32);</span><br><span class=\"line\">var blob = new Blob([buffer]);       // 注意必须包裹[]</span><br></pre></td></tr></table></figure>\n<h4 id=\"Blob转String\"><a href=\"#Blob转String\" class=\"headerlink\" title=\"Blob转String\"></a>Blob转String</h4><p>这里需要注意的是readAsText方法的使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将字符串转换成 Blob对象</span><br><span class=\"line\">var blob = new Blob([&apos;中文字符串&apos;], &#123;</span><br><span class=\"line\">    type: &apos;text/plain&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//将Blob 对象转换成字符串</span><br><span class=\"line\">var reader = new FileReader();</span><br><span class=\"line\">reader.readAsText(blob, &apos;utf-8&apos;);</span><br><span class=\"line\">reader.onload = function (e) &#123;</span><br><span class=\"line\">    console.info(reader.result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Blob转ArrayBuffer\"><a href=\"#Blob转ArrayBuffer\" class=\"headerlink\" title=\"Blob转ArrayBuffer\"></a>Blob转ArrayBuffer</h4><p>这里需要注意的是readAsArrayBuffer方法的使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将字符串转换成 Blob对象</span><br><span class=\"line\">var blob = new Blob([&apos;中文字符串&apos;], &#123;</span><br><span class=\"line\">    type: &apos;text/plain&apos;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//将Blob 对象转换成 ArrayBuffer</span><br><span class=\"line\">var reader = new FileReader();</span><br><span class=\"line\">reader.readAsArrayBuffer(blob);</span><br><span class=\"line\">reader.onload = function (e) &#123;</span><br><span class=\"line\">    console.info(reader.result); //ArrayBuffer &#123;&#125;</span><br><span class=\"line\">    //经常会遇到的异常 Uncaught RangeError: byte length of Int16Array should be a multiple of 2</span><br><span class=\"line\">    //var buf = new int16array(reader.result);</span><br><span class=\"line\">    //console.info(buf);</span><br><span class=\"line\"></span><br><span class=\"line\">    //将 ArrayBufferView  转换成Blob</span><br><span class=\"line\">    var buf = new Uint8Array(reader.result);</span><br><span class=\"line\">    console.info(buf); //[228, 184, 173, 230, 150, 135, 229, 173, 151, 231, 172, 166, 228, 184, 178]</span><br><span class=\"line\">    reader.readAsText(new Blob([buf]), &apos;utf-8&apos;);</span><br><span class=\"line\">    reader.onload = function () &#123;</span><br><span class=\"line\">        console.info(reader.result); //中文字符串</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将 ArrayBufferView  转换成Blob</span><br><span class=\"line\">    var buf = new DataView(reader.result);</span><br><span class=\"line\">    console.info(buf); //DataView &#123;&#125;</span><br><span class=\"line\">    reader.readAsText(new Blob([buf]), &apos;utf-8&apos;);</span><br><span class=\"line\">    reader.onload = function () &#123;</span><br><span class=\"line\">        console.info(reader.result); //中文字符串</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"dva源码解读","date":"2018-04-11T06:07:20.000Z","_content":"\n### 声明\n\n本文章用于个人学习研究，并不代表 dva 团队的任何观点。\n\n原文以及包含一定注释的代码见[这里](https://github.com/aircloud/dva-analysis)，若有问题也可以在[这里](https://github.com/aircloud/dva-analysis/issues)进行讨论\n\n### 起步\n\n#### 为什么是dva?\n\n笔者对 dva 的源代码进行解读，主要考虑到 dva 并不是一个和我们熟知的主流技术无关的从0到1的框架，相反，它是对主流技术进行整合，提炼，从而形成一种最佳实践，分析 dva，意味着我们可以对自己掌握的很多相关技术进行回顾，另外，dva 的代码量并不多，也不至于晦涩难懂，可以给我们平时的业务开发以启发。\n\n本文章作为 dva 的源码解读文章，并不面向新手用户，读者应当有一定的 react 使用经验和 ECMAscript 2015+ 的使用经验，并且应当了解 redux 和 redux-saga，以及对 dva 的使用有所了解(可以从[这里](https://github.com/dvajs/dva/blob/master/README_zh-CN.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8-dva-)了解为什么需要使用 dva)\n\n重点推荐:\n\n* 通过[这里](https://github.com/dvajs/dva-knowledgemap)的内容了解使用dva的最小知识集\n* 通过[这里](https://redux-saga-in-chinese.js.org/docs/introduction/index.html)学习 redux-saga\n\n其他推荐：\n\n* [dva的概念](https://github.com/dvajs/dva/blob/master/docs/Concepts_zh-CN.md)\n* [dva的全部API](https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md)\n* [React+Redux 最佳实践](https://github.com/sorrycc/blog/issues/1)\n* [React在蚂蚁金服的实践](http://slides.com/sorrycc/dva#/)\n* [dva 2.0的改进](https://github.com/sorrycc/blog/issues/48)\n* [ReSelect介绍](http://cn.redux.js.org/docs/recipes/ComputingDerivedData.html)\n* [浅析Redux 的 store enhancer](https://www.jianshu.com/p/04d3fefea8d7)\n\n\n几个 dva 版本之间的关系:\n\n* dva@2.0：基于 react 和 react-router@4\n* dva-react-router-3@1.0：基于 react 和 react-router@3\n* dva-no-router@1.0：无路由版本，适用于多页面场景，可以和 next.js 组合使用\n* dva-core@1.0：仅封装了 redux 和 redux-saga\n\n我们本次主要分析目标为 dva@2.0 和 dva-core@1.0\n\n\n### 我们为什么需要 redux-saga\n\n目前，在大多数项目开发中，我们现在依然采用的是redux-thunk + async/await (或 Promise)。\n\n实际上这个十几行的插件已经完全可以解决大多是场景下的问题了，如果你在目前的工作中正在使用这一套方案并且能够完全将当下的需求应付自如并且没有什么凌乱的地方，其实也是没有必要换成redux-saga的。\n\n接下来我们讲 redux-saga，先看名字：saga，这个术语常用于CQRS架构，代表查询与责任分离。\n\n相比于 redux-thunk，前者通常是把数据查询等请求放在 actions 中(不纯净的 actions)，并且这些 actions 可以继续回调调用其他 actions(纯净的 actions)，从而完成数据的更新；而 redux-saga，则保持了 actions 的纯粹性，单独抽出一层专门来处理数据请求等操作(saga函数)。\n\n这样做还有另外一些好处：\n\n* 由于我们已经将数据处理数据请求等异步操作抽离出来了，并且通过 generator 来处理，我们便可以方便地进行多种异步管理：比如同时按顺序执行多个任务、在多个异步任务中启动race等。\n* 这样做可以延长任务的生命周期，我们的一次调用可以不再是一个\"调完即走\"的过程，还可以是一个LLT（Long Lived Transaction)的事物处理过程，比如我们可以将用户的登入、登出的管理放在一个saga函数中处理。\n\n当然，redux-saga还有比如拥有有诸多常用并且声明式易测的 Effects、可以无阻塞的fork等一些更复杂的异步操作和管理方法，如果应用中有较多复杂的异步操作流程，使用redux-saga无疑会让条理更加清楚。\n\n当然，本文的目的不是介绍或者安利redux-saga，只是因为redux-saga是 dva 的一个基础，相关概念点到为止，如需了解更多请自行参考资料。\n\n### dva 源码解读\n\n我们的源码分析流程是这样的：通过一个使用 dva 开发的例子，随着其对 dva 函数的逐步调用，来分析内部 dva 相关函数的实现原理。\n\n我们分析采用的例子是 dva 官方提供的一个增删改查的应用，可以在[这里](https://github.com/dvajs/dva/tree/rewrite-dynamic)找到它的源代码。\n\n我们先看该例子的入口文件：\n\n```\nimport dva from 'dva';\nimport createHistory from 'history/createBrowserHistory';\nimport createLoading from 'dva-loading';\nimport { message } from 'antd';\nimport './index.css';\n\nconst ERROR_MSG_DURATION = 3; // 3 秒\n\n// 1. Initialize\nconst app = dva({\n  history: createHistory(),\n  onError(e) {\n    message.error(e.message, ERROR_MSG_DURATION);\n  },\n});\n\n// 2. Plugins\napp.use(createLoading());\n\n// 3. Model\n// Moved to router.js\n// 这里的 Model 被转移到了动态加载的 router 里面，我们也可以如下写：\n// app.model(require('./models/users'));\n\n// 4. Router\napp.router(require('./router'));\n\n// 5. Start\napp.start('#root');\n```\n\n我们发现dva从初始化配置到最后的start(现在的dva start函数在不传入container的情况下可以返回React Component，便于服务端渲染等，但这里我们还是按照例子的写法来)。\n\n这里我们先有必要解释一下，dva 在当前依据能力和依赖版本的不同，有多个可引入的版本，我们的例子和所要分析的源代码都是基于 react-router V4 的 dva 版本。\n\n在源代码中，相关目录主要为 dva 目录(packages/dva) 和 dva-core(packages/dva-core)目录，前者主要拥有history管理、router、动态加载等功能，而后者是不依赖这些内容的基础模块部分，为前者所引用\n\n#### 第一步\n\n第一步这里传入了两个内容：(dva构造函数总共可以传入那些 opts，会在下文中进行说明)\n\n```\nconst app = dva({\n  history: createHistory(),\n  onError(e) {\n    message.error(e.message, ERROR_MSG_DURATION);\n  },\n});\n```\n\n这一步的相关核心代码如下:\n\n```\nexport default function (opts = {}) {\n  const history = opts.history || createHashHistory(); // 默认为 HashHistory\n  const createOpts = {\n    initialReducer: {\n      routing, // 来自 react-router-redux 的 routerReducer\n    },\n    setupMiddlewares(middlewares) {\n      return [\n        routerMiddleware(history), // 来自 react-router-redux 的 routerMiddleware\n        ...middlewares,\n      ];\n    },\n    setupApp(app) {\n      app._history = patchHistory(history); \n    },\n  };\n\n  const app = core.create(opts, createOpts);\n  const oldAppStart = app.start;\n  app.router = router;\n  app.start = start;\n  return app;\n  \n  // 一些用到的函数的定义...\n  \n}  \n```\n\n这里面大多数内容都比较简单，这里面提两个地方：\n\n1. patchHistory：\n\n```\nfunction patchHistory(history) {\n  const oldListen = history.listen;\n  history.listen = (callback) => {\n    callback(history.location);\n    return oldListen.call(history, callback);\n  };\n  return history;\n}\n```\n\n显然，这里的意思是让第一次被绑定 listener 的时候执行一遍 callback，可以用于初始化相关操作。\n\n我们可以在`router.js`中添加如下代码来验证：\n\n```\n  history.listen((location, action)=>{\n    console.log('history listen:', location, action)\n  })\n```\n\n2. 在完成可选项的构造之后，调用了 dva-core 中暴露的 create 函数。\n\ncreate 函数本身也并不复杂，核心代码如下：\n\n```javascript\nexport function create(hooksAndOpts = {}, createOpts = {}) {\n  const {\n    initialReducer,\n    setupApp = noop,\n  } = createOpts;\n\n  const plugin = new Plugin(); // 实例化钩子函数管理类\n  plugin.use(filterHooks(hooksAndOpts)); // 这个时候先对 obj 进行清理，清理出在我们定义的类型之外的 hooks，之后进行统一绑定\n\n  const app = {\n    _models: [\n      prefixNamespace({ ...dvaModel }), // 前缀处理\n    ],\n    _store: null,\n    _plugin: plugin,\n    use: plugin.use.bind(plugin),\n    model, // 下文定义\n    start, // 下文定义\n  };\n  return app;\n \n  //一些函数的定义\n  \n}  \n```\n\n这里面我们可以看到，这里的 `hooksAndOpts` 实际上就是一开始我们构造 dva 的时候传入的 opts 对象经过处理之后的结果。\n\n我们可以传入的可选项，实际上都在 `Plugin.js` 中写明了:\n\n```\nconst hooks = [\n  'onError',\n  'onStateChange',\n  'onAction',\n  'onHmr',\n  'onReducer',\n  'onEffect',\n  'extraReducers',\n  'extraEnhancers',\n];\n```\n\n具体 [hooks的作用可以在这里进行查阅](https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md#appusehooks)。\n\nPlugin 插件管理类(实际上我认为称其为钩子函数管理类比较合适)除了定义了上文的使用到的use方法(挂载插件)、还有apply方法(执行某一个钩子下挂载的所有回调)、get方法(获取某一个钩子下的所有回调，返回数组)\n\n\n#### 第二步\n\n\n这里的第二步比较简洁：我们知道实际上这里就是使用了`plugin.use`方法挂载了一个插件\n\n```javascript\napp.use(createLoading()); // 需要注意，插件挂载需要在 app.start 之前\n```\n\ncreateLoading 这个插件实际上是官方提供的 Loading 插件，通过这个插件我们可以非常方便地进行 Loading 的管理，无需进行手动管理，我们可以先[看一篇文章](https://www.jianshu.com/p/61fe7a57fad4)来简单了解一下。\n\n这个插件看似神奇，实际上原理也比较简单，主要用了`onEffect`钩子函数(装饰器)：\n\n```javascript\nfunction onEffect(effect, { put }, model, actionType) {\n    const { namespace } = model;\n    if (\n        (only.length === 0 && except.length === 0)\n        || (only.length > 0 && only.indexOf(actionType) !== -1)\n        || (except.length > 0 && except.indexOf(actionType) === -1)\n    ) {\n        return function*(...args) {\n            yield put({ type: SHOW, payload: { namespace, actionType } });\n            yield effect(...args);\n            yield put({ type: HIDE, payload: { namespace, actionType } });\n        };\n    } else {\n        return effect;\n    }\n  }\n```\n\n结合基于的redux-saga，在目标异步调用开始的时候`yield put({ type: SHOW, payload: { namespace, actionType } });`，在异步调用结束的时候`yield put({ type: HIDE, payload: { namespace, actionType } });`，这样就可以管理异步调用开始和结束的Loading状态了。\n\n\n#### 第三步\n\n第三步这里其实省略了，因为使用了动态加载，将 Models 定义的内容和 React Component 进行了动态加载，实际上也可以按照注释的方法来写。\n\n但是没有关系，我们还是可以分析 models 引入的文件中做了哪些事情(下面列出的代码在原基础上进行了一些简化):\n\n```javascript\nimport queryString from 'query-string';\nimport * as usersService from '../services/users';\n\nexport default {\n  namespace: 'users',\n  state: {\n    list: [],\n    total: null,\n    page: null,\n  },\n  reducers: {\n    save(state, { payload: { data: list, total, page } }) {\n      return { ...state, list, total, page };\n    },\n  },\n  effects: {\n    *fetch({ payload: { page = 1 } }, { call, put }) {\n      const { data, headers } = yield call(usersService.fetch, { page });\n      yield put({\n        type: 'save',\n        payload: {\n          data,\n          total: parseInt(headers['x-total-count'], 10),\n          page: parseInt(page, 10),\n        },\n      });\n    },\n    //...\n    *reload(action, { put, select }) {\n      const page = yield select(state => state.users.page);\n      yield put({ type: 'fetch', payload: { page } });\n    },\n  },\n  subscriptions: {\n    setup({ dispatch, history }) {\n      return history.listen(({ pathname, search }) => {\n        const query = queryString.parse(search);\n        if (pathname === '/users') {\n          dispatch({ type: 'fetch', payload: query });\n        }\n      });\n    },\n  },\n};\n```\n\n这些内容，我们通过`app.model(require('./models/users'));`就可以引入。\n\n实际上，model 函数本身还是比较简单的，但由于 dva 拥有 model 动态加载的能力，实际上调用 app.start 前和 app.start 后model函数是不一样的。\n\n调用 start 函数前，我们直接挂载即可(因为start函数中会对所有model进行遍历性统一处理，所以无需过多处理)：\n\n```javascript\nfunction model(m) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkModel(m, app._models);\n    }\n    app._models.push(prefixNamespace(m));\n    // 把 model 注册到 app 的 _models 里面，但是当 app start 之后，就不能仅仅用这种方法了，需要 injectModel\n  }\n```\n\n调用了 start 函数之后，model函数被替换成如下:\n\n```javascript\nfunction injectModel(createReducer, onError, unlisteners, m) {\n    model(m);\n\n    const store = app._store;\n    if (m.reducers) {\n      store.asyncReducers[m.namespace] = getReducer(m.reducers, m.state);\n      store.replaceReducer(createReducer(store.asyncReducers));\n    }\n    if (m.effects) {\n      store.runSaga(app._getSaga(m.effects, m, onError, plugin.get('onEffect')));\n    }\n    if (m.subscriptions) {\n      unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);\n    }\n  }\n```\n\n**我们首先分析第一个 if 中的内容**：首先通过getReducer函数将转换好的 reducers 挂载(或替换)到 store.asyncReducers[m.namespace] 中，然后通过 redux 本身提供的能力 replaceReducer 完成 reducer 的替换。\n\n这里我们需要注意 getReducer 函数，实际上，dva 里面 reducers 写法和我们之前直接使用 redux 的写法略有不同：\n\n我们这里的 reducers，实际上要和 action 中的 actionType 同名的 reducer，所以这里我们没有必要去写 switch case 了，对于某一个 reducer 来说其行为应该是确定的，这给 reducers 的写法带来了一定的简化，当然，我们可以使用 extraReducers 定义我们之前习惯的那种比较复杂的 reducers。\n\n**接下来我们分析第二个 if 中的内容**：第二个函数首先获取到了我们定义的 effects 并通过 _getSaga 进行处理，然后使用 `runSaga`(实际上就是createSagaMiddleware().run，来自于redux-saga) 进行执行。\n\n实际上，这里的 `_getSaga` 函数比较复杂，我们接下来重点介绍这个函数。\n\n`_getSaga` 函数由 `getSaga.js` 暴露，其定义如下：\n\n```javascript\nexport default function getSaga(resolve, reject, effects, model, onError, onEffect) {\n  return function *() {  // 返回一个函数\n    for (const key in effects) {  // 这个函数对 effects 里面的所有键\n      if (Object.prototype.hasOwnProperty.call(effects, key)) { // 先判断一下键是属于自己的\n        const watcher = getWatcher(resolve, reject, key, effects[key], model, onError, onEffect);\n        // 然后调用getWatch获取watcher\n        const task = yield sagaEffects.fork(watcher); // 利用 fork 开启一个 task\n        yield sagaEffects.fork(function *() { // 这样写的目的是，如果我们移除了这个 model 要及时结束掉\n          yield sagaEffects.take(`${model.namespace}/@@CANCEL_EFFECTS`);\n          yield sagaEffects.cancel(task);\n        });\n      }\n    }\n  };\n}\n```\n\ngetWatcher 的一些核心代码如下:\n\n```javascript\n\nfunction getWatcher(resolve, reject, key, _effect, model, onError, onEffect) {\n  let effect = _effect;\n  let type = 'takeEvery';\n  let ms;\n\n  if (Array.isArray(_effect)) {\n    effect = _effect[0];\n    const opts = _effect[1];\n    // 对 opts 进行一定的校验\n    //...\n  }\n\n  function *sagaWithCatch(...args) { // 都会调用这个过程\n    try {\n      yield sagaEffects.put({ type: `${key}${NAMESPACE_SEP}@@start` });\n      const ret = yield effect(...args.concat(createEffects(model)));\n      yield sagaEffects.put({ type: `${key}${NAMESPACE_SEP}@@end` });\n      resolve(key, ret);\n    } catch (e) {\n      onError(e);\n      if (!e._dontReject) {\n        reject(key, e);\n      }\n    }\n  }\n\n  const sagaWithOnEffect = applyOnEffect(onEffect, sagaWithCatch, model, key); \n  // 挂载 onEffect 钩子\n\n  switch (type) {\n    case 'watcher':\n      return sagaWithCatch;\n    case 'takeLatest':\n      return function*() {\n        yield takeLatest(key, sagaWithOnEffect);\n      };\n    case 'throttle': // 起到节流的效果，在 ms 时间内仅仅会被触发一次\n      return function*() {\n        yield throttle(ms, key, sagaWithOnEffect);\n      };\n    default:\n      return function*() {\n        yield takeEvery(key, sagaWithOnEffect);\n      };\n  }\n}\n```\n\n这个函数的工作，可以主要分为以下三个部分：\n\n1.将 effect 包裹成 sagaWithCatch，除了便于错误处理和增加前后钩子，值得我们注意的是 resolve 和 reject，\n\n这个 resolve 和 reject，实际上是来自`createPromiseMiddleware.js`\n\n我们知道，我们在使用redux-saga的过程中，实际上是监听未来的action，并执行 effects，所以我们在一个 effects 函数中执行一些异步操作，然后 put(dispatch) 一个 action，还是会被监听这个 action 的其他 saga 监听到。\n\n所以就有如下场景：我们 dispatch 一个 action，这个时候如果我们想获取到什么时候监听这个 action 的 saga 中的异步操作执行结束，是办不到的(因为不是所有的时候我们都把所有处理逻辑写在 saga 中)，所以我们的 dispatch 有的时候需要返回一个 Promise 从而我们可以进行异步结束后的回调(这个 Promise 在监听者 saga 异步执行完后被决议，见上文`sagaWithCatch`函数源代码)。\n\n如果我讲的还是比较混乱，也可以参考[这个issue](https://github.com/dvajs/dva/issues/175)\n\n对于这个情况，我认为这是 dva 代码最精彩的地方之一，作者通过定义如下的middleware:\n\n```javascript\n const middleware = () => next => (action) => {\n    const { type } = action;\n    if (isEffect(type)) {\n      return new Promise((resolve, reject) => {\n        map[type] = {\n          resolve: wrapped.bind(null, type, resolve),\n          reject: wrapped.bind(null, type, reject),\n        };\n      });\n    } else {\n      return next(action);\n    }\n  };\n\n  function wrapped(type, fn, args) {\n    if (map[type]) delete map[type];\n    fn(args);\n  }\n\n  function resolve(type, args) {\n    if (map[type]) {\n      map[type].resolve(args);\n    }\n  }\n\n  function reject(type, args) {\n    if (map[type]) {\n      map[type].reject(args);\n    }\n  }\n```\n\n并且在上文的`sagaWithCatch`相关effect执行结束的时候调用 resolve，让 dispatch 返回了一个 Promise。\n\n当然，上面这段代码还是有点问题的，这样会导致同名 reducer 和 effect 不会 fallthrough（即两者都执行），因为都已经返回了，action 便不会再进一步传递，关于这样设计的好坏，在[这里](https://github.com/sorrycc/blog/issues/48)有过一些讨论，笔者不进行展开表述。\n\n2.在上面冗长的第一步之后，又通过`applyOnEffect`函数包裹了`OnEffect`的钩子函数，这相当于是一种`compose`，(上文的 dva-loading 中间件实际上就是在这里被处理的)其实现对于熟悉 redux 的同学来说应该不难理解：\n\n```javascript\nfunction applyOnEffect(fns, effect, model, key) {\n  for (const fn of fns) {\n    effect = fn(effect, sagaEffects, model, key);\n  }\n  return effect;\n}\n```\n\n3.最后，根据我们定义的type(默认是`takeEvery`，也就是都执行)，来选择不同的 saga，takeLatest 即为只是执行最近的一个，throttle则起到节流的效果，一定时间内仅仅允许被触发一次，这些都是 redux-saga 的内部实现，dva 也是基本直接引用，因此在这里不进行展开。\n\n**最后我们分析`injectModel`第三个`if`中的内容**:处理`subscriptions`:\n\n```javascript\nif (m.subscriptions) {\n  unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);\n}\n```\n\n`subscriptions`可以理解为和这个model有关的全局监听，但是相对独立。这一个步骤首先调用`runSubscription`来一个一个调用我们的`subscriptions`:\n\n```javascript\nexport function run(subs, model, app, onError) { // 在index.js中被重命名为 runSubscription\n  const funcs = [];\n  const nonFuncs = [];\n  for (const key in subs) {\n    if (Object.prototype.hasOwnProperty.call(subs, key)) {\n      const sub = subs[key];\n      const unlistener = sub({\n        dispatch: prefixedDispatch(app._store.dispatch, model),\n        history: app._history,\n      }, onError);\n      if (isFunction(unlistener)) {\n        funcs.push(unlistener);\n      } else {\n        nonFuncs.push(key);\n      }\n    }\n  }\n  return { funcs, nonFuncs };\n}\n```\n\n正如我们所期待的，`run`函数就是一个一个执行`subscriptions`，但是这里有一点需要我们注意的，我们定义的`subscriptions`应该是需要返回一个`unlistener`来返回接触函数，这样当整个 model 被卸载的时候 dva 会自动调用这个接解除函数(也就是为什么这里的返回函数被命名为`unlistener`)\n\n#### 第四步\n\n源代码中的第四步，是对 router 的挂载：\n\n```javascript\napp.router(require('./router'));\n```\n\n`require('./router')`返回的内容在源代码中经过一系列引用传递最后直接被构造成 React Component 并且最终调用 ReactDom.render 进行渲染，这里没有什么好说的，值得一提的就是 router 的动态加载。\n\n动态加载在该样例中是这样使用的：\n\n```javascript\nimport React from 'react';\nimport { Router, Switch, Route } from 'dva/router';\nimport dynamic from 'dva/dynamic';\n\nfunction RouterConfig({ history, app }) {\n  const IndexPage = dynamic({\n    app,\n    component: () => import('./routes/IndexPage'),\n  });\n\n  const Users = dynamic({\n    app,\n    models: () => [\n      import('./models/users'),\n    ],\n    component: () => import('./routes/Users'),\n  });\n\n  history.listen((location, action)=>{\n    console.log('history listen:', location, action)\n  })\n\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={IndexPage} />\n        <Route exact path=\"/users\" component={Users} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\n我们可以看出，主要就是利用`dva/dynamic.js`暴露的 dynamic 函数进行动态加载，接下来我们简单看一下 dynamic 函数做了什么:\n\n```javascript\nexport default function dynamic(config) {\n  const { app, models: resolveModels, component: resolveComponent } = config;\n  return asyncComponent({\n    resolve: config.resolve || function () {\n      const models = typeof resolveModels === 'function' ? resolveModels() : [];\n      const component = resolveComponent();\n      return new Promise((resolve) => {\n        Promise.all([...models, component]).then((ret) => {\n          if (!models || !models.length) {\n            return resolve(ret[0]);\n          } else {\n            const len = models.length;\n            ret.slice(0, len).forEach((m) => {\n              m = m.default || m;\n              if (!Array.isArray(m)) {\n                m = [m];\n              }\n              m.map(_ => registerModel(app, _)); // 注册所有的 model\n            });\n            resolve(ret[len]);\n          }\n        });\n      });\n    },\n    ...config,\n  });\n}\n```\n\n这里主要调用了 asyncComponent 函数，接下来我们再看一下这个函数：\n\n```javascript\nfunction asyncComponent(config) {\n  const { resolve } = config;\n\n  return class DynamicComponent extends Component {\n    constructor(...args) {\n      super(...args);\n      this.LoadingComponent =\n        config.LoadingComponent || defaultLoadingComponent;\n      this.state = {\n        AsyncComponent: null,\n      };\n      this.load();\n    }\n\n    componentDidMount() {\n      this.mounted = true;\n    }\n\n    componentWillUnmount() {\n      this.mounted = false;\n    }\n\n    load() {\n      resolve().then((m) => {\n        const AsyncComponent = m.default || m;\n        if (this.mounted) {\n          this.setState({ AsyncComponent });\n        } else {\n          this.state.AsyncComponent = AsyncComponent; // eslint-disable-line\n        }\n      });\n    }\n\n    render() {\n      const { AsyncComponent } = this.state;\n      const { LoadingComponent } = this;\n      if (AsyncComponent) return <AsyncComponent {...this.props} />;\n\n      return <LoadingComponent {...this.props} />;\n    }\n  };\n}\n```\n\n这个函数逻辑比较简洁，我们分析一下动态加载流程；\n\n* 在 constructor 里面调用 `this.load();` ( LoadingComponent 为占位 component)\n* 在 `this.load();` 函数里面调用 `dynamic` 函数返回的 resolve 方法\n* resolve 方法实际上是一个 Promise，把相关 models 和 component 加载完之后 resolve (区分这两个 resolve)\n* 加载完成之后返回 AsyncComponent (即加载的 Component)\n\n动态加载主流程结束，至于动态加载的代码分割工作，可以使用 webpack3 的 `import()` 动态加载能力(例子中也是这样使用的)。\n\n\n#### 第五步\n\n第五步骤就是 start 了：\n\n```javascript\napp.start('#root');\n```\n\n这个时候如果我们在 start 函数中传入 DomElement 或者 DomQueryString，就会直接启动应用了，如果我们这个时候不传入任何内容，实际上返回的是一个`<Provider />` (React Component)，便于服务端渲染。 相关判断逻辑如下：\n\n```javascript\n if (container) {\n      render(container, store, app, app._router);\n      app._plugin.apply('onHmr')(render.bind(null, container, store, app));\n    } else {\n      return getProvider(store, this, this._router);\n    }\n```\n\n至此，主要流程结束，以上几个步骤也包括了 dva 源码做的主要工作。\n\n当然 dva 源码中还有一些比如前缀处理等工作，但是相比于以上内容非常简单，所以在这里不进行分析了。\n\n\n### dva-core 文件目录\n\ndva-core中的源码文件目录以及其功能:\n\n* checkModel 对我们定义的 Model 进行检查是否符合要求\n* constants 非常简单的常量文件，目前只定义了一个常量：NAMESPACE_SEP(/)\n* cratePromiseMiddleware 笔者自己定义的 redux 插件\n* createStore 封装了 redux 原生的 createStore\n* getReducer 这里面的函数其实主要就是调用了 handleActions 文件导出的函数\n* getSaga 将用户输入的 effects 部分的键值对函数进行管理\n* handleActions 是将 dva 风格的 reducer 和 state 转化成 redux 本来接受的那种方式\n* index 主入口文件\n* Plugin 插件类：可以管理不同钩子事件的回调函数，拥有增加、获取、执行钩子函数的功能\n* perfixedDispatch 该文件提供了对 Dispatch 增加前缀的工具性函数 prefixedDispatch\n* prefixNamespace 该文件提供了对 reducer 和 effects 增加前缀的工具性函数 prefixNamespace\n* prefixType 判断是 reducer 还是 effects\n* subscriptions 该文件提供了运行 subscriptions 和调用用户返回的 unlisten 函数以及删除缓存的功能\n* utils 提供一些非常基础的工具函数\n\n\n### 优势总结\n\n* 动态 model，已经封装好了整套调用，动态添加/删除 model 变得非常简单\n* 默认封装好了管理 effects 的方式，有限可选可配置，降低学习成本的同时代码更利于维护\n* 易于上手，集成redux、redux-saga、react-router等常用功能\n\n\n### 劣势总结\n\n* 版本区隔不明显，dva 有 1.x 和 2.x 两种版本，之间API有些差异，但是官网提供的一些样例等中没有说明基于的版本，并且有的还是基于旧版本的，会给新手带来很多疑惑。\n* 内容繁杂，但是却没有一个整合性质的官方网站，大都是通过 list 的形式列下来写在README的。\n* 目前比如动态加载等还存在着一些问题，和直接采用react配套工具写的效果有所区别。\n* 很多 issues 不知道为什么就被关闭了，作者在最后也并未给出合理的解释。\n* dva2 之后有点将 effects 和 actions 混淆，这一点我也并不是非常认同，当然原作者可能有自己的考虑，这里不过多评议。\n\n总之，作为一个个人主力的项目(主要开发者贡献了99%以上的代码)，可以看出作者的功底深厚，经验丰富，但是由于这样一个体系化的东西牵扯内容较多，并且非常受制于react、redux、react-router、redux-saga等的版本影响，**不建议具备一定规模的非阿里系团队在生产环境中使用**，但是如果是快速成型的中小型项目或者个人应用，使用起来还是有很大帮助的。\n\n### TODOS\n\n笔者也在准备做一个和 dva 处于同一性质，但是设计、实现和使用有所区别的框架，希望能够尽快落成。\n","source":"_posts/dva源码解读.md","raw":"---\ntitle: dva源码解读\ndate: 2018-04-11 15:07:20\ntags:\n    - 前端框架\n---\n\n### 声明\n\n本文章用于个人学习研究，并不代表 dva 团队的任何观点。\n\n原文以及包含一定注释的代码见[这里](https://github.com/aircloud/dva-analysis)，若有问题也可以在[这里](https://github.com/aircloud/dva-analysis/issues)进行讨论\n\n### 起步\n\n#### 为什么是dva?\n\n笔者对 dva 的源代码进行解读，主要考虑到 dva 并不是一个和我们熟知的主流技术无关的从0到1的框架，相反，它是对主流技术进行整合，提炼，从而形成一种最佳实践，分析 dva，意味着我们可以对自己掌握的很多相关技术进行回顾，另外，dva 的代码量并不多，也不至于晦涩难懂，可以给我们平时的业务开发以启发。\n\n本文章作为 dva 的源码解读文章，并不面向新手用户，读者应当有一定的 react 使用经验和 ECMAscript 2015+ 的使用经验，并且应当了解 redux 和 redux-saga，以及对 dva 的使用有所了解(可以从[这里](https://github.com/dvajs/dva/blob/master/README_zh-CN.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8-dva-)了解为什么需要使用 dva)\n\n重点推荐:\n\n* 通过[这里](https://github.com/dvajs/dva-knowledgemap)的内容了解使用dva的最小知识集\n* 通过[这里](https://redux-saga-in-chinese.js.org/docs/introduction/index.html)学习 redux-saga\n\n其他推荐：\n\n* [dva的概念](https://github.com/dvajs/dva/blob/master/docs/Concepts_zh-CN.md)\n* [dva的全部API](https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md)\n* [React+Redux 最佳实践](https://github.com/sorrycc/blog/issues/1)\n* [React在蚂蚁金服的实践](http://slides.com/sorrycc/dva#/)\n* [dva 2.0的改进](https://github.com/sorrycc/blog/issues/48)\n* [ReSelect介绍](http://cn.redux.js.org/docs/recipes/ComputingDerivedData.html)\n* [浅析Redux 的 store enhancer](https://www.jianshu.com/p/04d3fefea8d7)\n\n\n几个 dva 版本之间的关系:\n\n* dva@2.0：基于 react 和 react-router@4\n* dva-react-router-3@1.0：基于 react 和 react-router@3\n* dva-no-router@1.0：无路由版本，适用于多页面场景，可以和 next.js 组合使用\n* dva-core@1.0：仅封装了 redux 和 redux-saga\n\n我们本次主要分析目标为 dva@2.0 和 dva-core@1.0\n\n\n### 我们为什么需要 redux-saga\n\n目前，在大多数项目开发中，我们现在依然采用的是redux-thunk + async/await (或 Promise)。\n\n实际上这个十几行的插件已经完全可以解决大多是场景下的问题了，如果你在目前的工作中正在使用这一套方案并且能够完全将当下的需求应付自如并且没有什么凌乱的地方，其实也是没有必要换成redux-saga的。\n\n接下来我们讲 redux-saga，先看名字：saga，这个术语常用于CQRS架构，代表查询与责任分离。\n\n相比于 redux-thunk，前者通常是把数据查询等请求放在 actions 中(不纯净的 actions)，并且这些 actions 可以继续回调调用其他 actions(纯净的 actions)，从而完成数据的更新；而 redux-saga，则保持了 actions 的纯粹性，单独抽出一层专门来处理数据请求等操作(saga函数)。\n\n这样做还有另外一些好处：\n\n* 由于我们已经将数据处理数据请求等异步操作抽离出来了，并且通过 generator 来处理，我们便可以方便地进行多种异步管理：比如同时按顺序执行多个任务、在多个异步任务中启动race等。\n* 这样做可以延长任务的生命周期，我们的一次调用可以不再是一个\"调完即走\"的过程，还可以是一个LLT（Long Lived Transaction)的事物处理过程，比如我们可以将用户的登入、登出的管理放在一个saga函数中处理。\n\n当然，redux-saga还有比如拥有有诸多常用并且声明式易测的 Effects、可以无阻塞的fork等一些更复杂的异步操作和管理方法，如果应用中有较多复杂的异步操作流程，使用redux-saga无疑会让条理更加清楚。\n\n当然，本文的目的不是介绍或者安利redux-saga，只是因为redux-saga是 dva 的一个基础，相关概念点到为止，如需了解更多请自行参考资料。\n\n### dva 源码解读\n\n我们的源码分析流程是这样的：通过一个使用 dva 开发的例子，随着其对 dva 函数的逐步调用，来分析内部 dva 相关函数的实现原理。\n\n我们分析采用的例子是 dva 官方提供的一个增删改查的应用，可以在[这里](https://github.com/dvajs/dva/tree/rewrite-dynamic)找到它的源代码。\n\n我们先看该例子的入口文件：\n\n```\nimport dva from 'dva';\nimport createHistory from 'history/createBrowserHistory';\nimport createLoading from 'dva-loading';\nimport { message } from 'antd';\nimport './index.css';\n\nconst ERROR_MSG_DURATION = 3; // 3 秒\n\n// 1. Initialize\nconst app = dva({\n  history: createHistory(),\n  onError(e) {\n    message.error(e.message, ERROR_MSG_DURATION);\n  },\n});\n\n// 2. Plugins\napp.use(createLoading());\n\n// 3. Model\n// Moved to router.js\n// 这里的 Model 被转移到了动态加载的 router 里面，我们也可以如下写：\n// app.model(require('./models/users'));\n\n// 4. Router\napp.router(require('./router'));\n\n// 5. Start\napp.start('#root');\n```\n\n我们发现dva从初始化配置到最后的start(现在的dva start函数在不传入container的情况下可以返回React Component，便于服务端渲染等，但这里我们还是按照例子的写法来)。\n\n这里我们先有必要解释一下，dva 在当前依据能力和依赖版本的不同，有多个可引入的版本，我们的例子和所要分析的源代码都是基于 react-router V4 的 dva 版本。\n\n在源代码中，相关目录主要为 dva 目录(packages/dva) 和 dva-core(packages/dva-core)目录，前者主要拥有history管理、router、动态加载等功能，而后者是不依赖这些内容的基础模块部分，为前者所引用\n\n#### 第一步\n\n第一步这里传入了两个内容：(dva构造函数总共可以传入那些 opts，会在下文中进行说明)\n\n```\nconst app = dva({\n  history: createHistory(),\n  onError(e) {\n    message.error(e.message, ERROR_MSG_DURATION);\n  },\n});\n```\n\n这一步的相关核心代码如下:\n\n```\nexport default function (opts = {}) {\n  const history = opts.history || createHashHistory(); // 默认为 HashHistory\n  const createOpts = {\n    initialReducer: {\n      routing, // 来自 react-router-redux 的 routerReducer\n    },\n    setupMiddlewares(middlewares) {\n      return [\n        routerMiddleware(history), // 来自 react-router-redux 的 routerMiddleware\n        ...middlewares,\n      ];\n    },\n    setupApp(app) {\n      app._history = patchHistory(history); \n    },\n  };\n\n  const app = core.create(opts, createOpts);\n  const oldAppStart = app.start;\n  app.router = router;\n  app.start = start;\n  return app;\n  \n  // 一些用到的函数的定义...\n  \n}  \n```\n\n这里面大多数内容都比较简单，这里面提两个地方：\n\n1. patchHistory：\n\n```\nfunction patchHistory(history) {\n  const oldListen = history.listen;\n  history.listen = (callback) => {\n    callback(history.location);\n    return oldListen.call(history, callback);\n  };\n  return history;\n}\n```\n\n显然，这里的意思是让第一次被绑定 listener 的时候执行一遍 callback，可以用于初始化相关操作。\n\n我们可以在`router.js`中添加如下代码来验证：\n\n```\n  history.listen((location, action)=>{\n    console.log('history listen:', location, action)\n  })\n```\n\n2. 在完成可选项的构造之后，调用了 dva-core 中暴露的 create 函数。\n\ncreate 函数本身也并不复杂，核心代码如下：\n\n```javascript\nexport function create(hooksAndOpts = {}, createOpts = {}) {\n  const {\n    initialReducer,\n    setupApp = noop,\n  } = createOpts;\n\n  const plugin = new Plugin(); // 实例化钩子函数管理类\n  plugin.use(filterHooks(hooksAndOpts)); // 这个时候先对 obj 进行清理，清理出在我们定义的类型之外的 hooks，之后进行统一绑定\n\n  const app = {\n    _models: [\n      prefixNamespace({ ...dvaModel }), // 前缀处理\n    ],\n    _store: null,\n    _plugin: plugin,\n    use: plugin.use.bind(plugin),\n    model, // 下文定义\n    start, // 下文定义\n  };\n  return app;\n \n  //一些函数的定义\n  \n}  \n```\n\n这里面我们可以看到，这里的 `hooksAndOpts` 实际上就是一开始我们构造 dva 的时候传入的 opts 对象经过处理之后的结果。\n\n我们可以传入的可选项，实际上都在 `Plugin.js` 中写明了:\n\n```\nconst hooks = [\n  'onError',\n  'onStateChange',\n  'onAction',\n  'onHmr',\n  'onReducer',\n  'onEffect',\n  'extraReducers',\n  'extraEnhancers',\n];\n```\n\n具体 [hooks的作用可以在这里进行查阅](https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md#appusehooks)。\n\nPlugin 插件管理类(实际上我认为称其为钩子函数管理类比较合适)除了定义了上文的使用到的use方法(挂载插件)、还有apply方法(执行某一个钩子下挂载的所有回调)、get方法(获取某一个钩子下的所有回调，返回数组)\n\n\n#### 第二步\n\n\n这里的第二步比较简洁：我们知道实际上这里就是使用了`plugin.use`方法挂载了一个插件\n\n```javascript\napp.use(createLoading()); // 需要注意，插件挂载需要在 app.start 之前\n```\n\ncreateLoading 这个插件实际上是官方提供的 Loading 插件，通过这个插件我们可以非常方便地进行 Loading 的管理，无需进行手动管理，我们可以先[看一篇文章](https://www.jianshu.com/p/61fe7a57fad4)来简单了解一下。\n\n这个插件看似神奇，实际上原理也比较简单，主要用了`onEffect`钩子函数(装饰器)：\n\n```javascript\nfunction onEffect(effect, { put }, model, actionType) {\n    const { namespace } = model;\n    if (\n        (only.length === 0 && except.length === 0)\n        || (only.length > 0 && only.indexOf(actionType) !== -1)\n        || (except.length > 0 && except.indexOf(actionType) === -1)\n    ) {\n        return function*(...args) {\n            yield put({ type: SHOW, payload: { namespace, actionType } });\n            yield effect(...args);\n            yield put({ type: HIDE, payload: { namespace, actionType } });\n        };\n    } else {\n        return effect;\n    }\n  }\n```\n\n结合基于的redux-saga，在目标异步调用开始的时候`yield put({ type: SHOW, payload: { namespace, actionType } });`，在异步调用结束的时候`yield put({ type: HIDE, payload: { namespace, actionType } });`，这样就可以管理异步调用开始和结束的Loading状态了。\n\n\n#### 第三步\n\n第三步这里其实省略了，因为使用了动态加载，将 Models 定义的内容和 React Component 进行了动态加载，实际上也可以按照注释的方法来写。\n\n但是没有关系，我们还是可以分析 models 引入的文件中做了哪些事情(下面列出的代码在原基础上进行了一些简化):\n\n```javascript\nimport queryString from 'query-string';\nimport * as usersService from '../services/users';\n\nexport default {\n  namespace: 'users',\n  state: {\n    list: [],\n    total: null,\n    page: null,\n  },\n  reducers: {\n    save(state, { payload: { data: list, total, page } }) {\n      return { ...state, list, total, page };\n    },\n  },\n  effects: {\n    *fetch({ payload: { page = 1 } }, { call, put }) {\n      const { data, headers } = yield call(usersService.fetch, { page });\n      yield put({\n        type: 'save',\n        payload: {\n          data,\n          total: parseInt(headers['x-total-count'], 10),\n          page: parseInt(page, 10),\n        },\n      });\n    },\n    //...\n    *reload(action, { put, select }) {\n      const page = yield select(state => state.users.page);\n      yield put({ type: 'fetch', payload: { page } });\n    },\n  },\n  subscriptions: {\n    setup({ dispatch, history }) {\n      return history.listen(({ pathname, search }) => {\n        const query = queryString.parse(search);\n        if (pathname === '/users') {\n          dispatch({ type: 'fetch', payload: query });\n        }\n      });\n    },\n  },\n};\n```\n\n这些内容，我们通过`app.model(require('./models/users'));`就可以引入。\n\n实际上，model 函数本身还是比较简单的，但由于 dva 拥有 model 动态加载的能力，实际上调用 app.start 前和 app.start 后model函数是不一样的。\n\n调用 start 函数前，我们直接挂载即可(因为start函数中会对所有model进行遍历性统一处理，所以无需过多处理)：\n\n```javascript\nfunction model(m) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkModel(m, app._models);\n    }\n    app._models.push(prefixNamespace(m));\n    // 把 model 注册到 app 的 _models 里面，但是当 app start 之后，就不能仅仅用这种方法了，需要 injectModel\n  }\n```\n\n调用了 start 函数之后，model函数被替换成如下:\n\n```javascript\nfunction injectModel(createReducer, onError, unlisteners, m) {\n    model(m);\n\n    const store = app._store;\n    if (m.reducers) {\n      store.asyncReducers[m.namespace] = getReducer(m.reducers, m.state);\n      store.replaceReducer(createReducer(store.asyncReducers));\n    }\n    if (m.effects) {\n      store.runSaga(app._getSaga(m.effects, m, onError, plugin.get('onEffect')));\n    }\n    if (m.subscriptions) {\n      unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);\n    }\n  }\n```\n\n**我们首先分析第一个 if 中的内容**：首先通过getReducer函数将转换好的 reducers 挂载(或替换)到 store.asyncReducers[m.namespace] 中，然后通过 redux 本身提供的能力 replaceReducer 完成 reducer 的替换。\n\n这里我们需要注意 getReducer 函数，实际上，dva 里面 reducers 写法和我们之前直接使用 redux 的写法略有不同：\n\n我们这里的 reducers，实际上要和 action 中的 actionType 同名的 reducer，所以这里我们没有必要去写 switch case 了，对于某一个 reducer 来说其行为应该是确定的，这给 reducers 的写法带来了一定的简化，当然，我们可以使用 extraReducers 定义我们之前习惯的那种比较复杂的 reducers。\n\n**接下来我们分析第二个 if 中的内容**：第二个函数首先获取到了我们定义的 effects 并通过 _getSaga 进行处理，然后使用 `runSaga`(实际上就是createSagaMiddleware().run，来自于redux-saga) 进行执行。\n\n实际上，这里的 `_getSaga` 函数比较复杂，我们接下来重点介绍这个函数。\n\n`_getSaga` 函数由 `getSaga.js` 暴露，其定义如下：\n\n```javascript\nexport default function getSaga(resolve, reject, effects, model, onError, onEffect) {\n  return function *() {  // 返回一个函数\n    for (const key in effects) {  // 这个函数对 effects 里面的所有键\n      if (Object.prototype.hasOwnProperty.call(effects, key)) { // 先判断一下键是属于自己的\n        const watcher = getWatcher(resolve, reject, key, effects[key], model, onError, onEffect);\n        // 然后调用getWatch获取watcher\n        const task = yield sagaEffects.fork(watcher); // 利用 fork 开启一个 task\n        yield sagaEffects.fork(function *() { // 这样写的目的是，如果我们移除了这个 model 要及时结束掉\n          yield sagaEffects.take(`${model.namespace}/@@CANCEL_EFFECTS`);\n          yield sagaEffects.cancel(task);\n        });\n      }\n    }\n  };\n}\n```\n\ngetWatcher 的一些核心代码如下:\n\n```javascript\n\nfunction getWatcher(resolve, reject, key, _effect, model, onError, onEffect) {\n  let effect = _effect;\n  let type = 'takeEvery';\n  let ms;\n\n  if (Array.isArray(_effect)) {\n    effect = _effect[0];\n    const opts = _effect[1];\n    // 对 opts 进行一定的校验\n    //...\n  }\n\n  function *sagaWithCatch(...args) { // 都会调用这个过程\n    try {\n      yield sagaEffects.put({ type: `${key}${NAMESPACE_SEP}@@start` });\n      const ret = yield effect(...args.concat(createEffects(model)));\n      yield sagaEffects.put({ type: `${key}${NAMESPACE_SEP}@@end` });\n      resolve(key, ret);\n    } catch (e) {\n      onError(e);\n      if (!e._dontReject) {\n        reject(key, e);\n      }\n    }\n  }\n\n  const sagaWithOnEffect = applyOnEffect(onEffect, sagaWithCatch, model, key); \n  // 挂载 onEffect 钩子\n\n  switch (type) {\n    case 'watcher':\n      return sagaWithCatch;\n    case 'takeLatest':\n      return function*() {\n        yield takeLatest(key, sagaWithOnEffect);\n      };\n    case 'throttle': // 起到节流的效果，在 ms 时间内仅仅会被触发一次\n      return function*() {\n        yield throttle(ms, key, sagaWithOnEffect);\n      };\n    default:\n      return function*() {\n        yield takeEvery(key, sagaWithOnEffect);\n      };\n  }\n}\n```\n\n这个函数的工作，可以主要分为以下三个部分：\n\n1.将 effect 包裹成 sagaWithCatch，除了便于错误处理和增加前后钩子，值得我们注意的是 resolve 和 reject，\n\n这个 resolve 和 reject，实际上是来自`createPromiseMiddleware.js`\n\n我们知道，我们在使用redux-saga的过程中，实际上是监听未来的action，并执行 effects，所以我们在一个 effects 函数中执行一些异步操作，然后 put(dispatch) 一个 action，还是会被监听这个 action 的其他 saga 监听到。\n\n所以就有如下场景：我们 dispatch 一个 action，这个时候如果我们想获取到什么时候监听这个 action 的 saga 中的异步操作执行结束，是办不到的(因为不是所有的时候我们都把所有处理逻辑写在 saga 中)，所以我们的 dispatch 有的时候需要返回一个 Promise 从而我们可以进行异步结束后的回调(这个 Promise 在监听者 saga 异步执行完后被决议，见上文`sagaWithCatch`函数源代码)。\n\n如果我讲的还是比较混乱，也可以参考[这个issue](https://github.com/dvajs/dva/issues/175)\n\n对于这个情况，我认为这是 dva 代码最精彩的地方之一，作者通过定义如下的middleware:\n\n```javascript\n const middleware = () => next => (action) => {\n    const { type } = action;\n    if (isEffect(type)) {\n      return new Promise((resolve, reject) => {\n        map[type] = {\n          resolve: wrapped.bind(null, type, resolve),\n          reject: wrapped.bind(null, type, reject),\n        };\n      });\n    } else {\n      return next(action);\n    }\n  };\n\n  function wrapped(type, fn, args) {\n    if (map[type]) delete map[type];\n    fn(args);\n  }\n\n  function resolve(type, args) {\n    if (map[type]) {\n      map[type].resolve(args);\n    }\n  }\n\n  function reject(type, args) {\n    if (map[type]) {\n      map[type].reject(args);\n    }\n  }\n```\n\n并且在上文的`sagaWithCatch`相关effect执行结束的时候调用 resolve，让 dispatch 返回了一个 Promise。\n\n当然，上面这段代码还是有点问题的，这样会导致同名 reducer 和 effect 不会 fallthrough（即两者都执行），因为都已经返回了，action 便不会再进一步传递，关于这样设计的好坏，在[这里](https://github.com/sorrycc/blog/issues/48)有过一些讨论，笔者不进行展开表述。\n\n2.在上面冗长的第一步之后，又通过`applyOnEffect`函数包裹了`OnEffect`的钩子函数，这相当于是一种`compose`，(上文的 dva-loading 中间件实际上就是在这里被处理的)其实现对于熟悉 redux 的同学来说应该不难理解：\n\n```javascript\nfunction applyOnEffect(fns, effect, model, key) {\n  for (const fn of fns) {\n    effect = fn(effect, sagaEffects, model, key);\n  }\n  return effect;\n}\n```\n\n3.最后，根据我们定义的type(默认是`takeEvery`，也就是都执行)，来选择不同的 saga，takeLatest 即为只是执行最近的一个，throttle则起到节流的效果，一定时间内仅仅允许被触发一次，这些都是 redux-saga 的内部实现，dva 也是基本直接引用，因此在这里不进行展开。\n\n**最后我们分析`injectModel`第三个`if`中的内容**:处理`subscriptions`:\n\n```javascript\nif (m.subscriptions) {\n  unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);\n}\n```\n\n`subscriptions`可以理解为和这个model有关的全局监听，但是相对独立。这一个步骤首先调用`runSubscription`来一个一个调用我们的`subscriptions`:\n\n```javascript\nexport function run(subs, model, app, onError) { // 在index.js中被重命名为 runSubscription\n  const funcs = [];\n  const nonFuncs = [];\n  for (const key in subs) {\n    if (Object.prototype.hasOwnProperty.call(subs, key)) {\n      const sub = subs[key];\n      const unlistener = sub({\n        dispatch: prefixedDispatch(app._store.dispatch, model),\n        history: app._history,\n      }, onError);\n      if (isFunction(unlistener)) {\n        funcs.push(unlistener);\n      } else {\n        nonFuncs.push(key);\n      }\n    }\n  }\n  return { funcs, nonFuncs };\n}\n```\n\n正如我们所期待的，`run`函数就是一个一个执行`subscriptions`，但是这里有一点需要我们注意的，我们定义的`subscriptions`应该是需要返回一个`unlistener`来返回接触函数，这样当整个 model 被卸载的时候 dva 会自动调用这个接解除函数(也就是为什么这里的返回函数被命名为`unlistener`)\n\n#### 第四步\n\n源代码中的第四步，是对 router 的挂载：\n\n```javascript\napp.router(require('./router'));\n```\n\n`require('./router')`返回的内容在源代码中经过一系列引用传递最后直接被构造成 React Component 并且最终调用 ReactDom.render 进行渲染，这里没有什么好说的，值得一提的就是 router 的动态加载。\n\n动态加载在该样例中是这样使用的：\n\n```javascript\nimport React from 'react';\nimport { Router, Switch, Route } from 'dva/router';\nimport dynamic from 'dva/dynamic';\n\nfunction RouterConfig({ history, app }) {\n  const IndexPage = dynamic({\n    app,\n    component: () => import('./routes/IndexPage'),\n  });\n\n  const Users = dynamic({\n    app,\n    models: () => [\n      import('./models/users'),\n    ],\n    component: () => import('./routes/Users'),\n  });\n\n  history.listen((location, action)=>{\n    console.log('history listen:', location, action)\n  })\n\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={IndexPage} />\n        <Route exact path=\"/users\" component={Users} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\n我们可以看出，主要就是利用`dva/dynamic.js`暴露的 dynamic 函数进行动态加载，接下来我们简单看一下 dynamic 函数做了什么:\n\n```javascript\nexport default function dynamic(config) {\n  const { app, models: resolveModels, component: resolveComponent } = config;\n  return asyncComponent({\n    resolve: config.resolve || function () {\n      const models = typeof resolveModels === 'function' ? resolveModels() : [];\n      const component = resolveComponent();\n      return new Promise((resolve) => {\n        Promise.all([...models, component]).then((ret) => {\n          if (!models || !models.length) {\n            return resolve(ret[0]);\n          } else {\n            const len = models.length;\n            ret.slice(0, len).forEach((m) => {\n              m = m.default || m;\n              if (!Array.isArray(m)) {\n                m = [m];\n              }\n              m.map(_ => registerModel(app, _)); // 注册所有的 model\n            });\n            resolve(ret[len]);\n          }\n        });\n      });\n    },\n    ...config,\n  });\n}\n```\n\n这里主要调用了 asyncComponent 函数，接下来我们再看一下这个函数：\n\n```javascript\nfunction asyncComponent(config) {\n  const { resolve } = config;\n\n  return class DynamicComponent extends Component {\n    constructor(...args) {\n      super(...args);\n      this.LoadingComponent =\n        config.LoadingComponent || defaultLoadingComponent;\n      this.state = {\n        AsyncComponent: null,\n      };\n      this.load();\n    }\n\n    componentDidMount() {\n      this.mounted = true;\n    }\n\n    componentWillUnmount() {\n      this.mounted = false;\n    }\n\n    load() {\n      resolve().then((m) => {\n        const AsyncComponent = m.default || m;\n        if (this.mounted) {\n          this.setState({ AsyncComponent });\n        } else {\n          this.state.AsyncComponent = AsyncComponent; // eslint-disable-line\n        }\n      });\n    }\n\n    render() {\n      const { AsyncComponent } = this.state;\n      const { LoadingComponent } = this;\n      if (AsyncComponent) return <AsyncComponent {...this.props} />;\n\n      return <LoadingComponent {...this.props} />;\n    }\n  };\n}\n```\n\n这个函数逻辑比较简洁，我们分析一下动态加载流程；\n\n* 在 constructor 里面调用 `this.load();` ( LoadingComponent 为占位 component)\n* 在 `this.load();` 函数里面调用 `dynamic` 函数返回的 resolve 方法\n* resolve 方法实际上是一个 Promise，把相关 models 和 component 加载完之后 resolve (区分这两个 resolve)\n* 加载完成之后返回 AsyncComponent (即加载的 Component)\n\n动态加载主流程结束，至于动态加载的代码分割工作，可以使用 webpack3 的 `import()` 动态加载能力(例子中也是这样使用的)。\n\n\n#### 第五步\n\n第五步骤就是 start 了：\n\n```javascript\napp.start('#root');\n```\n\n这个时候如果我们在 start 函数中传入 DomElement 或者 DomQueryString，就会直接启动应用了，如果我们这个时候不传入任何内容，实际上返回的是一个`<Provider />` (React Component)，便于服务端渲染。 相关判断逻辑如下：\n\n```javascript\n if (container) {\n      render(container, store, app, app._router);\n      app._plugin.apply('onHmr')(render.bind(null, container, store, app));\n    } else {\n      return getProvider(store, this, this._router);\n    }\n```\n\n至此，主要流程结束，以上几个步骤也包括了 dva 源码做的主要工作。\n\n当然 dva 源码中还有一些比如前缀处理等工作，但是相比于以上内容非常简单，所以在这里不进行分析了。\n\n\n### dva-core 文件目录\n\ndva-core中的源码文件目录以及其功能:\n\n* checkModel 对我们定义的 Model 进行检查是否符合要求\n* constants 非常简单的常量文件，目前只定义了一个常量：NAMESPACE_SEP(/)\n* cratePromiseMiddleware 笔者自己定义的 redux 插件\n* createStore 封装了 redux 原生的 createStore\n* getReducer 这里面的函数其实主要就是调用了 handleActions 文件导出的函数\n* getSaga 将用户输入的 effects 部分的键值对函数进行管理\n* handleActions 是将 dva 风格的 reducer 和 state 转化成 redux 本来接受的那种方式\n* index 主入口文件\n* Plugin 插件类：可以管理不同钩子事件的回调函数，拥有增加、获取、执行钩子函数的功能\n* perfixedDispatch 该文件提供了对 Dispatch 增加前缀的工具性函数 prefixedDispatch\n* prefixNamespace 该文件提供了对 reducer 和 effects 增加前缀的工具性函数 prefixNamespace\n* prefixType 判断是 reducer 还是 effects\n* subscriptions 该文件提供了运行 subscriptions 和调用用户返回的 unlisten 函数以及删除缓存的功能\n* utils 提供一些非常基础的工具函数\n\n\n### 优势总结\n\n* 动态 model，已经封装好了整套调用，动态添加/删除 model 变得非常简单\n* 默认封装好了管理 effects 的方式，有限可选可配置，降低学习成本的同时代码更利于维护\n* 易于上手，集成redux、redux-saga、react-router等常用功能\n\n\n### 劣势总结\n\n* 版本区隔不明显，dva 有 1.x 和 2.x 两种版本，之间API有些差异，但是官网提供的一些样例等中没有说明基于的版本，并且有的还是基于旧版本的，会给新手带来很多疑惑。\n* 内容繁杂，但是却没有一个整合性质的官方网站，大都是通过 list 的形式列下来写在README的。\n* 目前比如动态加载等还存在着一些问题，和直接采用react配套工具写的效果有所区别。\n* 很多 issues 不知道为什么就被关闭了，作者在最后也并未给出合理的解释。\n* dva2 之后有点将 effects 和 actions 混淆，这一点我也并不是非常认同，当然原作者可能有自己的考虑，这里不过多评议。\n\n总之，作为一个个人主力的项目(主要开发者贡献了99%以上的代码)，可以看出作者的功底深厚，经验丰富，但是由于这样一个体系化的东西牵扯内容较多，并且非常受制于react、redux、react-router、redux-saga等的版本影响，**不建议具备一定规模的非阿里系团队在生产环境中使用**，但是如果是快速成型的中小型项目或者个人应用，使用起来还是有很大帮助的。\n\n### TODOS\n\n笔者也在准备做一个和 dva 处于同一性质，但是设计、实现和使用有所区别的框架，希望能够尽快落成。\n","slug":"dva源码解读","published":1,"updated":"2019-01-15T08:40:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtyzds1p002ggxy0ysnqgl1b","content":"<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><p>本文章用于个人学习研究，并不代表 dva 团队的任何观点。</p>\n<p>原文以及包含一定注释的代码见<a href=\"https://github.com/aircloud/dva-analysis\" target=\"_blank\" rel=\"noopener\">这里</a>，若有问题也可以在<a href=\"https://github.com/aircloud/dva-analysis/issues\" target=\"_blank\" rel=\"noopener\">这里</a>进行讨论</p>\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><h4 id=\"为什么是dva\"><a href=\"#为什么是dva\" class=\"headerlink\" title=\"为什么是dva?\"></a>为什么是dva?</h4><p>笔者对 dva 的源代码进行解读，主要考虑到 dva 并不是一个和我们熟知的主流技术无关的从0到1的框架，相反，它是对主流技术进行整合，提炼，从而形成一种最佳实践，分析 dva，意味着我们可以对自己掌握的很多相关技术进行回顾，另外，dva 的代码量并不多，也不至于晦涩难懂，可以给我们平时的业务开发以启发。</p>\n<p>本文章作为 dva 的源码解读文章，并不面向新手用户，读者应当有一定的 react 使用经验和 ECMAscript 2015+ 的使用经验，并且应当了解 redux 和 redux-saga，以及对 dva 的使用有所了解(可以从<a href=\"https://github.com/dvajs/dva/blob/master/README_zh-CN.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8-dva-\" target=\"_blank\" rel=\"noopener\">这里</a>了解为什么需要使用 dva)</p>\n<p>重点推荐:</p>\n<ul>\n<li>通过<a href=\"https://github.com/dvajs/dva-knowledgemap\" target=\"_blank\" rel=\"noopener\">这里</a>的内容了解使用dva的最小知识集</li>\n<li>通过<a href=\"https://redux-saga-in-chinese.js.org/docs/introduction/index.html\" target=\"_blank\" rel=\"noopener\">这里</a>学习 redux-saga</li>\n</ul>\n<p>其他推荐：</p>\n<ul>\n<li><a href=\"https://github.com/dvajs/dva/blob/master/docs/Concepts_zh-CN.md\" target=\"_blank\" rel=\"noopener\">dva的概念</a></li>\n<li><a href=\"https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md\" target=\"_blank\" rel=\"noopener\">dva的全部API</a></li>\n<li><a href=\"https://github.com/sorrycc/blog/issues/1\" target=\"_blank\" rel=\"noopener\">React+Redux 最佳实践</a></li>\n<li><a href=\"http://slides.com/sorrycc/dva#/\" target=\"_blank\" rel=\"noopener\">React在蚂蚁金服的实践</a></li>\n<li><a href=\"https://github.com/sorrycc/blog/issues/48\" target=\"_blank\" rel=\"noopener\">dva 2.0的改进</a></li>\n<li><a href=\"http://cn.redux.js.org/docs/recipes/ComputingDerivedData.html\" target=\"_blank\" rel=\"noopener\">ReSelect介绍</a></li>\n<li><a href=\"https://www.jianshu.com/p/04d3fefea8d7\" target=\"_blank\" rel=\"noopener\">浅析Redux 的 store enhancer</a></li>\n</ul>\n<p>几个 dva 版本之间的关系:</p>\n<ul>\n<li><a href=\"mailto:dva@2.0\" target=\"_blank\" rel=\"noopener\">dva@2.0</a>：基于 react 和 react-router@4</li>\n<li><a href=\"mailto:dva-react-router-3@1.0\" target=\"_blank\" rel=\"noopener\">dva-react-router-3@1.0</a>：基于 react 和 react-router@3</li>\n<li><a href=\"mailto:dva-no-router@1.0\" target=\"_blank\" rel=\"noopener\">dva-no-router@1.0</a>：无路由版本，适用于多页面场景，可以和 next.js 组合使用</li>\n<li><a href=\"mailto:dva-core@1.0\" target=\"_blank\" rel=\"noopener\">dva-core@1.0</a>：仅封装了 redux 和 redux-saga</li>\n</ul>\n<p>我们本次主要分析目标为 <a href=\"mailto:dva@2.0\" target=\"_blank\" rel=\"noopener\">dva@2.0</a> 和 <a href=\"mailto:dva-core@1.0\" target=\"_blank\" rel=\"noopener\">dva-core@1.0</a></p>\n<h3 id=\"我们为什么需要-redux-saga\"><a href=\"#我们为什么需要-redux-saga\" class=\"headerlink\" title=\"我们为什么需要 redux-saga\"></a>我们为什么需要 redux-saga</h3><p>目前，在大多数项目开发中，我们现在依然采用的是redux-thunk + async/await (或 Promise)。</p>\n<p>实际上这个十几行的插件已经完全可以解决大多是场景下的问题了，如果你在目前的工作中正在使用这一套方案并且能够完全将当下的需求应付自如并且没有什么凌乱的地方，其实也是没有必要换成redux-saga的。</p>\n<p>接下来我们讲 redux-saga，先看名字：saga，这个术语常用于CQRS架构，代表查询与责任分离。</p>\n<p>相比于 redux-thunk，前者通常是把数据查询等请求放在 actions 中(不纯净的 actions)，并且这些 actions 可以继续回调调用其他 actions(纯净的 actions)，从而完成数据的更新；而 redux-saga，则保持了 actions 的纯粹性，单独抽出一层专门来处理数据请求等操作(saga函数)。</p>\n<p>这样做还有另外一些好处：</p>\n<ul>\n<li>由于我们已经将数据处理数据请求等异步操作抽离出来了，并且通过 generator 来处理，我们便可以方便地进行多种异步管理：比如同时按顺序执行多个任务、在多个异步任务中启动race等。</li>\n<li>这样做可以延长任务的生命周期，我们的一次调用可以不再是一个”调完即走”的过程，还可以是一个LLT（Long Lived Transaction)的事物处理过程，比如我们可以将用户的登入、登出的管理放在一个saga函数中处理。</li>\n</ul>\n<p>当然，redux-saga还有比如拥有有诸多常用并且声明式易测的 Effects、可以无阻塞的fork等一些更复杂的异步操作和管理方法，如果应用中有较多复杂的异步操作流程，使用redux-saga无疑会让条理更加清楚。</p>\n<p>当然，本文的目的不是介绍或者安利redux-saga，只是因为redux-saga是 dva 的一个基础，相关概念点到为止，如需了解更多请自行参考资料。</p>\n<h3 id=\"dva-源码解读\"><a href=\"#dva-源码解读\" class=\"headerlink\" title=\"dva 源码解读\"></a>dva 源码解读</h3><p>我们的源码分析流程是这样的：通过一个使用 dva 开发的例子，随着其对 dva 函数的逐步调用，来分析内部 dva 相关函数的实现原理。</p>\n<p>我们分析采用的例子是 dva 官方提供的一个增删改查的应用，可以在<a href=\"https://github.com/dvajs/dva/tree/rewrite-dynamic\" target=\"_blank\" rel=\"noopener\">这里</a>找到它的源代码。</p>\n<p>我们先看该例子的入口文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dva from &apos;dva&apos;;</span><br><span class=\"line\">import createHistory from &apos;history/createBrowserHistory&apos;;</span><br><span class=\"line\">import createLoading from &apos;dva-loading&apos;;</span><br><span class=\"line\">import &#123; message &#125; from &apos;antd&apos;;</span><br><span class=\"line\">import &apos;./index.css&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const ERROR_MSG_DURATION = 3; // 3 秒</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. Initialize</span><br><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  history: createHistory(),</span><br><span class=\"line\">  onError(e) &#123;</span><br><span class=\"line\">    message.error(e.message, ERROR_MSG_DURATION);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. Plugins</span><br><span class=\"line\">app.use(createLoading());</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. Model</span><br><span class=\"line\">// Moved to router.js</span><br><span class=\"line\">// 这里的 Model 被转移到了动态加载的 router 里面，我们也可以如下写：</span><br><span class=\"line\">// app.model(require(&apos;./models/users&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. Router</span><br><span class=\"line\">app.router(require(&apos;./router&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 5. Start</span><br><span class=\"line\">app.start(&apos;#root&apos;);</span><br></pre></td></tr></table></figure>\n<p>我们发现dva从初始化配置到最后的start(现在的dva start函数在不传入container的情况下可以返回React Component，便于服务端渲染等，但这里我们还是按照例子的写法来)。</p>\n<p>这里我们先有必要解释一下，dva 在当前依据能力和依赖版本的不同，有多个可引入的版本，我们的例子和所要分析的源代码都是基于 react-router V4 的 dva 版本。</p>\n<p>在源代码中，相关目录主要为 dva 目录(packages/dva) 和 dva-core(packages/dva-core)目录，前者主要拥有history管理、router、动态加载等功能，而后者是不依赖这些内容的基础模块部分，为前者所引用</p>\n<h4 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h4><p>第一步这里传入了两个内容：(dva构造函数总共可以传入那些 opts，会在下文中进行说明)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  history: createHistory(),</span><br><span class=\"line\">  onError(e) &#123;</span><br><span class=\"line\">    message.error(e.message, ERROR_MSG_DURATION);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这一步的相关核心代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function (opts = &#123;&#125;) &#123;</span><br><span class=\"line\">  const history = opts.history || createHashHistory(); // 默认为 HashHistory</span><br><span class=\"line\">  const createOpts = &#123;</span><br><span class=\"line\">    initialReducer: &#123;</span><br><span class=\"line\">      routing, // 来自 react-router-redux 的 routerReducer</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setupMiddlewares(middlewares) &#123;</span><br><span class=\"line\">      return [</span><br><span class=\"line\">        routerMiddleware(history), // 来自 react-router-redux 的 routerMiddleware</span><br><span class=\"line\">        ...middlewares,</span><br><span class=\"line\">      ];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setupApp(app) &#123;</span><br><span class=\"line\">      app._history = patchHistory(history); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const app = core.create(opts, createOpts);</span><br><span class=\"line\">  const oldAppStart = app.start;</span><br><span class=\"line\">  app.router = router;</span><br><span class=\"line\">  app.start = start;</span><br><span class=\"line\">  return app;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 一些用到的函数的定义...</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面大多数内容都比较简单，这里面提两个地方：</p>\n<ol>\n<li>patchHistory：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function patchHistory(history) &#123;</span><br><span class=\"line\">  const oldListen = history.listen;</span><br><span class=\"line\">  history.listen = (callback) =&gt; &#123;</span><br><span class=\"line\">    callback(history.location);</span><br><span class=\"line\">    return oldListen.call(history, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return history;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然，这里的意思是让第一次被绑定 listener 的时候执行一遍 callback，可以用于初始化相关操作。</p>\n<p>我们可以在<code>router.js</code>中添加如下代码来验证：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.listen((location, action)=&gt;&#123;</span><br><span class=\"line\">  console.log(&apos;history listen:&apos;, location, action)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在完成可选项的构造之后，调用了 dva-core 中暴露的 create 函数。</li>\n</ol>\n<p>create 函数本身也并不复杂，核心代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">hooksAndOpts = &#123;&#125;, createOpts = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    initialReducer,</span><br><span class=\"line\">    setupApp = noop,</span><br><span class=\"line\">  &#125; = createOpts;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> plugin = <span class=\"keyword\">new</span> Plugin(); <span class=\"comment\">// 实例化钩子函数管理类</span></span><br><span class=\"line\">  plugin.use(filterHooks(hooksAndOpts)); <span class=\"comment\">// 这个时候先对 obj 进行清理，清理出在我们定义的类型之外的 hooks，之后进行统一绑定</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = &#123;</span><br><span class=\"line\">    _models: [</span><br><span class=\"line\">      prefixNamespace(&#123; ...dvaModel &#125;), <span class=\"comment\">// 前缀处理</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    _store: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    _plugin: plugin,</span><br><span class=\"line\">    use: plugin.use.bind(plugin),</span><br><span class=\"line\">    model, <span class=\"comment\">// 下文定义</span></span><br><span class=\"line\">    start, <span class=\"comment\">// 下文定义</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> app;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//一些函数的定义</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面我们可以看到，这里的 <code>hooksAndOpts</code> 实际上就是一开始我们构造 dva 的时候传入的 opts 对象经过处理之后的结果。</p>\n<p>我们可以传入的可选项，实际上都在 <code>Plugin.js</code> 中写明了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const hooks = [</span><br><span class=\"line\">  &apos;onError&apos;,</span><br><span class=\"line\">  &apos;onStateChange&apos;,</span><br><span class=\"line\">  &apos;onAction&apos;,</span><br><span class=\"line\">  &apos;onHmr&apos;,</span><br><span class=\"line\">  &apos;onReducer&apos;,</span><br><span class=\"line\">  &apos;onEffect&apos;,</span><br><span class=\"line\">  &apos;extraReducers&apos;,</span><br><span class=\"line\">  &apos;extraEnhancers&apos;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>具体 <a href=\"https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md#appusehooks\" target=\"_blank\" rel=\"noopener\">hooks的作用可以在这里进行查阅</a>。</p>\n<p>Plugin 插件管理类(实际上我认为称其为钩子函数管理类比较合适)除了定义了上文的使用到的use方法(挂载插件)、还有apply方法(执行某一个钩子下挂载的所有回调)、get方法(获取某一个钩子下的所有回调，返回数组)</p>\n<h4 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h4><p>这里的第二步比较简洁：我们知道实际上这里就是使用了<code>plugin.use</code>方法挂载了一个插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(createLoading()); <span class=\"comment\">// 需要注意，插件挂载需要在 app.start 之前</span></span><br></pre></td></tr></table></figure>\n<p>createLoading 这个插件实际上是官方提供的 Loading 插件，通过这个插件我们可以非常方便地进行 Loading 的管理，无需进行手动管理，我们可以先<a href=\"https://www.jianshu.com/p/61fe7a57fad4\" target=\"_blank\" rel=\"noopener\">看一篇文章</a>来简单了解一下。</p>\n<p>这个插件看似神奇，实际上原理也比较简单，主要用了<code>onEffect</code>钩子函数(装饰器)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onEffect</span>(<span class=\"params\">effect, &#123; put &#125;, model, actionType</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; namespace &#125; = model;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (only.length === <span class=\"number\">0</span> &amp;&amp; except.length === <span class=\"number\">0</span>)</span><br><span class=\"line\">        || (only.length &gt; <span class=\"number\">0</span> &amp;&amp; only.indexOf(actionType) !== <span class=\"number\">-1</span>)</span><br><span class=\"line\">        || (except.length &gt; <span class=\"number\">0</span> &amp;&amp; except.indexOf(actionType) === <span class=\"number\">-1</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: SHOW, <span class=\"attr\">payload</span>: &#123; namespace, actionType &#125; &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> effect(...args);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: HIDE, <span class=\"attr\">payload</span>: &#123; namespace, actionType &#125; &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>结合基于的redux-saga，在目标异步调用开始的时候<code>yield put({ type: SHOW, payload: { namespace, actionType } });</code>，在异步调用结束的时候<code>yield put({ type: HIDE, payload: { namespace, actionType } });</code>，这样就可以管理异步调用开始和结束的Loading状态了。</p>\n<h4 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h4><p>第三步这里其实省略了，因为使用了动态加载，将 Models 定义的内容和 React Component 进行了动态加载，实际上也可以按照注释的方法来写。</p>\n<p>但是没有关系，我们还是可以分析 models 引入的文件中做了哪些事情(下面列出的代码在原基础上进行了一些简化):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> queryString <span class=\"keyword\">from</span> <span class=\"string\">'query-string'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> usersService <span class=\"keyword\">from</span> <span class=\"string\">'../services/users'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespace: <span class=\"string\">'users'</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    list: [],</span><br><span class=\"line\">    total: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    page: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    save(state, &#123; <span class=\"attr\">payload</span>: &#123; <span class=\"attr\">data</span>: list, total, page &#125; &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, list, total, page &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    *fetch(&#123; <span class=\"attr\">payload</span>: &#123; page = <span class=\"number\">1</span> &#125; &#125;, &#123; call, put &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; data, headers &#125; = <span class=\"keyword\">yield</span> call(usersService.fetch, &#123; page &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">'save'</span>,</span><br><span class=\"line\">        payload: &#123;</span><br><span class=\"line\">          data,</span><br><span class=\"line\">          total: <span class=\"built_in\">parseInt</span>(headers[<span class=\"string\">'x-total-count'</span>], <span class=\"number\">10</span>),</span><br><span class=\"line\">          page: <span class=\"built_in\">parseInt</span>(page, <span class=\"number\">10</span>),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    *reload(action, &#123; put, select &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> page = <span class=\"keyword\">yield</span> select(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.users.page);</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'fetch'</span>, <span class=\"attr\">payload</span>: &#123; page &#125; &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  subscriptions: &#123;</span><br><span class=\"line\">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> history.listen(<span class=\"function\">(<span class=\"params\">&#123; pathname, search &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> query = queryString.parse(search);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/users'</span>) &#123;</span><br><span class=\"line\">          dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'fetch'</span>, <span class=\"attr\">payload</span>: query &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这些内容，我们通过<code>app.model(require(&#39;./models/users&#39;));</code>就可以引入。</p>\n<p>实际上，model 函数本身还是比较简单的，但由于 dva 拥有 model 动态加载的能力，实际上调用 app.start 前和 app.start 后model函数是不一样的。</p>\n<p>调用 start 函数前，我们直接挂载即可(因为start函数中会对所有model进行遍历性统一处理，所以无需过多处理)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">model</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      checkModel(m, app._models);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    app._models.push(prefixNamespace(m));</span><br><span class=\"line\">    <span class=\"comment\">// 把 model 注册到 app 的 _models 里面，但是当 app start 之后，就不能仅仅用这种方法了，需要 injectModel</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>调用了 start 函数之后，model函数被替换成如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">injectModel</span>(<span class=\"params\">createReducer, onError, unlisteners, m</span>) </span>&#123;</span><br><span class=\"line\">    model(m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = app._store;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m.reducers) &#123;</span><br><span class=\"line\">      store.asyncReducers[m.namespace] = getReducer(m.reducers, m.state);</span><br><span class=\"line\">      store.replaceReducer(createReducer(store.asyncReducers));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m.effects) &#123;</span><br><span class=\"line\">      store.runSaga(app._getSaga(m.effects, m, onError, plugin.get(<span class=\"string\">'onEffect'</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m.subscriptions) &#123;</span><br><span class=\"line\">      unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>我们首先分析第一个 if 中的内容</strong>：首先通过getReducer函数将转换好的 reducers 挂载(或替换)到 store.asyncReducers[m.namespace] 中，然后通过 redux 本身提供的能力 replaceReducer 完成 reducer 的替换。</p>\n<p>这里我们需要注意 getReducer 函数，实际上，dva 里面 reducers 写法和我们之前直接使用 redux 的写法略有不同：</p>\n<p>我们这里的 reducers，实际上要和 action 中的 actionType 同名的 reducer，所以这里我们没有必要去写 switch case 了，对于某一个 reducer 来说其行为应该是确定的，这给 reducers 的写法带来了一定的简化，当然，我们可以使用 extraReducers 定义我们之前习惯的那种比较复杂的 reducers。</p>\n<p><strong>接下来我们分析第二个 if 中的内容</strong>：第二个函数首先获取到了我们定义的 effects 并通过 _getSaga 进行处理，然后使用 <code>runSaga</code>(实际上就是createSagaMiddleware().run，来自于redux-saga) 进行执行。</p>\n<p>实际上，这里的 <code>_getSaga</code> 函数比较复杂，我们接下来重点介绍这个函数。</p>\n<p><code>_getSaga</code> 函数由 <code>getSaga.js</code> 暴露，其定义如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSaga</span>(<span class=\"params\">resolve, reject, effects, model, onError, onEffect</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 返回一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> effects) &#123;  <span class=\"comment\">// 这个函数对 effects 里面的所有键</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(effects, key)) &#123; <span class=\"comment\">// 先判断一下键是属于自己的</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> watcher = getWatcher(resolve, reject, key, effects[key], model, onError, onEffect);</span><br><span class=\"line\">        <span class=\"comment\">// 然后调用getWatch获取watcher</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> task = <span class=\"keyword\">yield</span> sagaEffects.fork(watcher); <span class=\"comment\">// 利用 fork 开启一个 task</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> sagaEffects.fork(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 这样写的目的是，如果我们移除了这个 model 要及时结束掉</span></span><br><span class=\"line\">          <span class=\"keyword\">yield</span> sagaEffects.take(<span class=\"string\">`<span class=\"subst\">$&#123;model.namespace&#125;</span>/@@CANCEL_EFFECTS`</span>);</span><br><span class=\"line\">          <span class=\"keyword\">yield</span> sagaEffects.cancel(task);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getWatcher 的一些核心代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWatcher</span>(<span class=\"params\">resolve, reject, key, _effect, model, onError, onEffect</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> effect = _effect;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> type = <span class=\"string\">'takeEvery'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ms;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(_effect)) &#123;</span><br><span class=\"line\">    effect = _effect[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> opts = _effect[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 对 opts 进行一定的校验</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">sagaWithCatch</span>(<span class=\"params\">...args</span>) </span>&#123; <span class=\"comment\">// 都会调用这个过程</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> sagaEffects.put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span><span class=\"subst\">$&#123;NAMESPACE_SEP&#125;</span>@@start`</span> &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"keyword\">yield</span> effect(...args.concat(createEffects(model)));</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> sagaEffects.put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span><span class=\"subst\">$&#123;NAMESPACE_SEP&#125;</span>@@end`</span> &#125;);</span><br><span class=\"line\">      resolve(key, ret);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      onError(e);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!e._dontReject) &#123;</span><br><span class=\"line\">        reject(key, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sagaWithOnEffect = applyOnEffect(onEffect, sagaWithCatch, model, key); </span><br><span class=\"line\">  <span class=\"comment\">// 挂载 onEffect 钩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'watcher'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> sagaWithCatch;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'takeLatest'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> takeLatest(key, sagaWithOnEffect);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'throttle'</span>: <span class=\"comment\">// 起到节流的效果，在 ms 时间内仅仅会被触发一次</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> throttle(ms, key, sagaWithOnEffect);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> takeEvery(key, sagaWithOnEffect);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数的工作，可以主要分为以下三个部分：</p>\n<p>1.将 effect 包裹成 sagaWithCatch，除了便于错误处理和增加前后钩子，值得我们注意的是 resolve 和 reject，</p>\n<p>这个 resolve 和 reject，实际上是来自<code>createPromiseMiddleware.js</code></p>\n<p>我们知道，我们在使用redux-saga的过程中，实际上是监听未来的action，并执行 effects，所以我们在一个 effects 函数中执行一些异步操作，然后 put(dispatch) 一个 action，还是会被监听这个 action 的其他 saga 监听到。</p>\n<p>所以就有如下场景：我们 dispatch 一个 action，这个时候如果我们想获取到什么时候监听这个 action 的 saga 中的异步操作执行结束，是办不到的(因为不是所有的时候我们都把所有处理逻辑写在 saga 中)，所以我们的 dispatch 有的时候需要返回一个 Promise 从而我们可以进行异步结束后的回调(这个 Promise 在监听者 saga 异步执行完后被决议，见上文<code>sagaWithCatch</code>函数源代码)。</p>\n<p>如果我讲的还是比较混乱，也可以参考<a href=\"https://github.com/dvajs/dva/issues/175\" target=\"_blank\" rel=\"noopener\">这个issue</a></p>\n<p>对于这个情况，我认为这是 dva 代码最精彩的地方之一，作者通过定义如下的middleware:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> middleware = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> next =&gt; <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> &#123; type &#125; = action;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (isEffect(type)) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       map[type] = &#123;</span><br><span class=\"line\">         resolve: wrapped.bind(<span class=\"literal\">null</span>, type, resolve),</span><br><span class=\"line\">         reject: wrapped.bind(<span class=\"literal\">null</span>, type, reject),</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> next(action);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapped</span>(<span class=\"params\">type, fn, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (map[type]) <span class=\"keyword\">delete</span> map[type];</span><br><span class=\"line\">   fn(args);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">type, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (map[type]) &#123;</span><br><span class=\"line\">     map[type].resolve(args);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">type, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (map[type]) &#123;</span><br><span class=\"line\">     map[type].reject(args);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>并且在上文的<code>sagaWithCatch</code>相关effect执行结束的时候调用 resolve，让 dispatch 返回了一个 Promise。</p>\n<p>当然，上面这段代码还是有点问题的，这样会导致同名 reducer 和 effect 不会 fallthrough（即两者都执行），因为都已经返回了，action 便不会再进一步传递，关于这样设计的好坏，在<a href=\"https://github.com/sorrycc/blog/issues/48\" target=\"_blank\" rel=\"noopener\">这里</a>有过一些讨论，笔者不进行展开表述。</p>\n<p>2.在上面冗长的第一步之后，又通过<code>applyOnEffect</code>函数包裹了<code>OnEffect</code>的钩子函数，这相当于是一种<code>compose</code>，(上文的 dva-loading 中间件实际上就是在这里被处理的)其实现对于熟悉 redux 的同学来说应该不难理解：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyOnEffect</span>(<span class=\"params\">fns, effect, model, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn <span class=\"keyword\">of</span> fns) &#123;</span><br><span class=\"line\">    effect = fn(effect, sagaEffects, model, key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.最后，根据我们定义的type(默认是<code>takeEvery</code>，也就是都执行)，来选择不同的 saga，takeLatest 即为只是执行最近的一个，throttle则起到节流的效果，一定时间内仅仅允许被触发一次，这些都是 redux-saga 的内部实现，dva 也是基本直接引用，因此在这里不进行展开。</p>\n<p><strong>最后我们分析<code>injectModel</code>第三个<code>if</code>中的内容</strong>:处理<code>subscriptions</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (m.subscriptions) &#123;</span><br><span class=\"line\">  unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>subscriptions</code>可以理解为和这个model有关的全局监听，但是相对独立。这一个步骤首先调用<code>runSubscription</code>来一个一个调用我们的<code>subscriptions</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">subs, model, app, onError</span>) </span>&#123; <span class=\"comment\">// 在index.js中被重命名为 runSubscription</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> funcs = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nonFuncs = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> subs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(subs, key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub = subs[key];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> unlistener = sub(&#123;</span><br><span class=\"line\">        dispatch: prefixedDispatch(app._store.dispatch, model),</span><br><span class=\"line\">        history: app._history,</span><br><span class=\"line\">      &#125;, onError);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(unlistener)) &#123;</span><br><span class=\"line\">        funcs.push(unlistener);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        nonFuncs.push(key);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; funcs, nonFuncs &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正如我们所期待的，<code>run</code>函数就是一个一个执行<code>subscriptions</code>，但是这里有一点需要我们注意的，我们定义的<code>subscriptions</code>应该是需要返回一个<code>unlistener</code>来返回接触函数，这样当整个 model 被卸载的时候 dva 会自动调用这个接解除函数(也就是为什么这里的返回函数被命名为<code>unlistener</code>)</p>\n<h4 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h4><p>源代码中的第四步，是对 router 的挂载：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.router(<span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>));</span><br></pre></td></tr></table></figure>\n<p><code>require(&#39;./router&#39;)</code>返回的内容在源代码中经过一系列引用传递最后直接被构造成 React Component 并且最终调用 ReactDom.render 进行渲染，这里没有什么好说的，值得一提的就是 router 的动态加载。</p>\n<p>动态加载在该样例中是这样使用的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Switch, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> dynamic <span class=\"keyword\">from</span> <span class=\"string\">'dva/dynamic'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RouterConfig</span>(<span class=\"params\">&#123; history, app &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> IndexPage = dynamic(&#123;</span><br><span class=\"line\">    app,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./routes/IndexPage'</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> Users = dynamic(&#123;</span><br><span class=\"line\">    app,</span><br><span class=\"line\">    models: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">      <span class=\"keyword\">import</span>(<span class=\"string\">'./models/users'</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./routes/Users'</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  history.listen(<span class=\"function\">(<span class=\"params\">location, action</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'history listen:'</span>, location, action)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;IndexPage&#125; /&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/users\"</span> component=&#123;Users&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Router&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看出，主要就是利用<code>dva/dynamic.js</code>暴露的 dynamic 函数进行动态加载，接下来我们简单看一下 dynamic 函数做了什么:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dynamic</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; app, <span class=\"attr\">models</span>: resolveModels, <span class=\"attr\">component</span>: resolveComponent &#125; = config;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> asyncComponent(&#123;</span><br><span class=\"line\">    resolve: config.resolve || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> models = <span class=\"keyword\">typeof</span> resolveModels === <span class=\"string\">'function'</span> ? resolveModels() : [];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> component = resolveComponent();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.all([...models, component]).then(<span class=\"function\">(<span class=\"params\">ret</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!models || !models.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(ret[<span class=\"number\">0</span>]);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> len = models.length;</span><br><span class=\"line\">            ret.slice(<span class=\"number\">0</span>, len).forEach(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              m = m.default || m;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(m)) &#123;</span><br><span class=\"line\">                m = [m];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              m.map(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> registerModel(app, _)); <span class=\"comment\">// 注册所有的 model</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            resolve(ret[len]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...config,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里主要调用了 asyncComponent 函数，接下来我们再看一下这个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncComponent</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; resolve &#125; = config;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(...args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(...args);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.LoadingComponent =</span><br><span class=\"line\">        config.LoadingComponent || defaultLoadingComponent;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">        AsyncComponent: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.load();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mounted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mounted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    load() &#123;</span><br><span class=\"line\">      resolve().then(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> AsyncComponent = m.default || m;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mounted) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.setState(&#123; AsyncComponent &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.state.AsyncComponent = AsyncComponent; <span class=\"comment\">// eslint-disable-line</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; AsyncComponent &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; LoadingComponent &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (AsyncComponent) <span class=\"keyword\">return</span> &lt;AsyncComponent &#123;...this.props&#125; /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &lt;LoadingComponent &#123;...this.props&#125; /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数逻辑比较简洁，我们分析一下动态加载流程；</p>\n<ul>\n<li>在 constructor 里面调用 <code>this.load();</code> ( LoadingComponent 为占位 component)</li>\n<li>在 <code>this.load();</code> 函数里面调用 <code>dynamic</code> 函数返回的 resolve 方法</li>\n<li>resolve 方法实际上是一个 Promise，把相关 models 和 component 加载完之后 resolve (区分这两个 resolve)</li>\n<li>加载完成之后返回 AsyncComponent (即加载的 Component)</li>\n</ul>\n<p>动态加载主流程结束，至于动态加载的代码分割工作，可以使用 webpack3 的 <code>import()</code> 动态加载能力(例子中也是这样使用的)。</p>\n<h4 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h4><p>第五步骤就是 start 了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.start(<span class=\"string\">'#root'</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候如果我们在 start 函数中传入 DomElement 或者 DomQueryString，就会直接启动应用了，如果我们这个时候不传入任何内容，实际上返回的是一个<code>&lt;Provider /&gt;</code> (React Component)，便于服务端渲染。 相关判断逻辑如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (container) &#123;</span><br><span class=\"line\">     render(container, store, app, app._router);</span><br><span class=\"line\">     app._plugin.apply(<span class=\"string\">'onHmr'</span>)(render.bind(<span class=\"literal\">null</span>, container, store, app));</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> getProvider(store, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>._router);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>至此，主要流程结束，以上几个步骤也包括了 dva 源码做的主要工作。</p>\n<p>当然 dva 源码中还有一些比如前缀处理等工作，但是相比于以上内容非常简单，所以在这里不进行分析了。</p>\n<h3 id=\"dva-core-文件目录\"><a href=\"#dva-core-文件目录\" class=\"headerlink\" title=\"dva-core 文件目录\"></a>dva-core 文件目录</h3><p>dva-core中的源码文件目录以及其功能:</p>\n<ul>\n<li>checkModel 对我们定义的 Model 进行检查是否符合要求</li>\n<li>constants 非常简单的常量文件，目前只定义了一个常量：NAMESPACE_SEP(/)</li>\n<li>cratePromiseMiddleware 笔者自己定义的 redux 插件</li>\n<li>createStore 封装了 redux 原生的 createStore</li>\n<li>getReducer 这里面的函数其实主要就是调用了 handleActions 文件导出的函数</li>\n<li>getSaga 将用户输入的 effects 部分的键值对函数进行管理</li>\n<li>handleActions 是将 dva 风格的 reducer 和 state 转化成 redux 本来接受的那种方式</li>\n<li>index 主入口文件</li>\n<li>Plugin 插件类：可以管理不同钩子事件的回调函数，拥有增加、获取、执行钩子函数的功能</li>\n<li>perfixedDispatch 该文件提供了对 Dispatch 增加前缀的工具性函数 prefixedDispatch</li>\n<li>prefixNamespace 该文件提供了对 reducer 和 effects 增加前缀的工具性函数 prefixNamespace</li>\n<li>prefixType 判断是 reducer 还是 effects</li>\n<li>subscriptions 该文件提供了运行 subscriptions 和调用用户返回的 unlisten 函数以及删除缓存的功能</li>\n<li>utils 提供一些非常基础的工具函数</li>\n</ul>\n<h3 id=\"优势总结\"><a href=\"#优势总结\" class=\"headerlink\" title=\"优势总结\"></a>优势总结</h3><ul>\n<li>动态 model，已经封装好了整套调用，动态添加/删除 model 变得非常简单</li>\n<li>默认封装好了管理 effects 的方式，有限可选可配置，降低学习成本的同时代码更利于维护</li>\n<li>易于上手，集成redux、redux-saga、react-router等常用功能</li>\n</ul>\n<h3 id=\"劣势总结\"><a href=\"#劣势总结\" class=\"headerlink\" title=\"劣势总结\"></a>劣势总结</h3><ul>\n<li>版本区隔不明显，dva 有 1.x 和 2.x 两种版本，之间API有些差异，但是官网提供的一些样例等中没有说明基于的版本，并且有的还是基于旧版本的，会给新手带来很多疑惑。</li>\n<li>内容繁杂，但是却没有一个整合性质的官方网站，大都是通过 list 的形式列下来写在README的。</li>\n<li>目前比如动态加载等还存在着一些问题，和直接采用react配套工具写的效果有所区别。</li>\n<li>很多 issues 不知道为什么就被关闭了，作者在最后也并未给出合理的解释。</li>\n<li>dva2 之后有点将 effects 和 actions 混淆，这一点我也并不是非常认同，当然原作者可能有自己的考虑，这里不过多评议。</li>\n</ul>\n<p>总之，作为一个个人主力的项目(主要开发者贡献了99%以上的代码)，可以看出作者的功底深厚，经验丰富，但是由于这样一个体系化的东西牵扯内容较多，并且非常受制于react、redux、react-router、redux-saga等的版本影响，<strong>不建议具备一定规模的非阿里系团队在生产环境中使用</strong>，但是如果是快速成型的中小型项目或者个人应用，使用起来还是有很大帮助的。</p>\n<h3 id=\"TODOS\"><a href=\"#TODOS\" class=\"headerlink\" title=\"TODOS\"></a>TODOS</h3><p>笔者也在准备做一个和 dva 处于同一性质，但是设计、实现和使用有所区别的框架，希望能够尽快落成。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><p>本文章用于个人学习研究，并不代表 dva 团队的任何观点。</p>\n<p>原文以及包含一定注释的代码见<a href=\"https://github.com/aircloud/dva-analysis\" target=\"_blank\" rel=\"noopener\">这里</a>，若有问题也可以在<a href=\"https://github.com/aircloud/dva-analysis/issues\" target=\"_blank\" rel=\"noopener\">这里</a>进行讨论</p>\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><h4 id=\"为什么是dva\"><a href=\"#为什么是dva\" class=\"headerlink\" title=\"为什么是dva?\"></a>为什么是dva?</h4><p>笔者对 dva 的源代码进行解读，主要考虑到 dva 并不是一个和我们熟知的主流技术无关的从0到1的框架，相反，它是对主流技术进行整合，提炼，从而形成一种最佳实践，分析 dva，意味着我们可以对自己掌握的很多相关技术进行回顾，另外，dva 的代码量并不多，也不至于晦涩难懂，可以给我们平时的业务开发以启发。</p>\n<p>本文章作为 dva 的源码解读文章，并不面向新手用户，读者应当有一定的 react 使用经验和 ECMAscript 2015+ 的使用经验，并且应当了解 redux 和 redux-saga，以及对 dva 的使用有所了解(可以从<a href=\"https://github.com/dvajs/dva/blob/master/README_zh-CN.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8-dva-\" target=\"_blank\" rel=\"noopener\">这里</a>了解为什么需要使用 dva)</p>\n<p>重点推荐:</p>\n<ul>\n<li>通过<a href=\"https://github.com/dvajs/dva-knowledgemap\" target=\"_blank\" rel=\"noopener\">这里</a>的内容了解使用dva的最小知识集</li>\n<li>通过<a href=\"https://redux-saga-in-chinese.js.org/docs/introduction/index.html\" target=\"_blank\" rel=\"noopener\">这里</a>学习 redux-saga</li>\n</ul>\n<p>其他推荐：</p>\n<ul>\n<li><a href=\"https://github.com/dvajs/dva/blob/master/docs/Concepts_zh-CN.md\" target=\"_blank\" rel=\"noopener\">dva的概念</a></li>\n<li><a href=\"https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md\" target=\"_blank\" rel=\"noopener\">dva的全部API</a></li>\n<li><a href=\"https://github.com/sorrycc/blog/issues/1\" target=\"_blank\" rel=\"noopener\">React+Redux 最佳实践</a></li>\n<li><a href=\"http://slides.com/sorrycc/dva#/\" target=\"_blank\" rel=\"noopener\">React在蚂蚁金服的实践</a></li>\n<li><a href=\"https://github.com/sorrycc/blog/issues/48\" target=\"_blank\" rel=\"noopener\">dva 2.0的改进</a></li>\n<li><a href=\"http://cn.redux.js.org/docs/recipes/ComputingDerivedData.html\" target=\"_blank\" rel=\"noopener\">ReSelect介绍</a></li>\n<li><a href=\"https://www.jianshu.com/p/04d3fefea8d7\" target=\"_blank\" rel=\"noopener\">浅析Redux 的 store enhancer</a></li>\n</ul>\n<p>几个 dva 版本之间的关系:</p>\n<ul>\n<li><a href=\"mailto:dva@2.0\" target=\"_blank\" rel=\"noopener\">dva@2.0</a>：基于 react 和 react-router@4</li>\n<li><a href=\"mailto:dva-react-router-3@1.0\" target=\"_blank\" rel=\"noopener\">dva-react-router-3@1.0</a>：基于 react 和 react-router@3</li>\n<li><a href=\"mailto:dva-no-router@1.0\" target=\"_blank\" rel=\"noopener\">dva-no-router@1.0</a>：无路由版本，适用于多页面场景，可以和 next.js 组合使用</li>\n<li><a href=\"mailto:dva-core@1.0\" target=\"_blank\" rel=\"noopener\">dva-core@1.0</a>：仅封装了 redux 和 redux-saga</li>\n</ul>\n<p>我们本次主要分析目标为 <a href=\"mailto:dva@2.0\" target=\"_blank\" rel=\"noopener\">dva@2.0</a> 和 <a href=\"mailto:dva-core@1.0\" target=\"_blank\" rel=\"noopener\">dva-core@1.0</a></p>\n<h3 id=\"我们为什么需要-redux-saga\"><a href=\"#我们为什么需要-redux-saga\" class=\"headerlink\" title=\"我们为什么需要 redux-saga\"></a>我们为什么需要 redux-saga</h3><p>目前，在大多数项目开发中，我们现在依然采用的是redux-thunk + async/await (或 Promise)。</p>\n<p>实际上这个十几行的插件已经完全可以解决大多是场景下的问题了，如果你在目前的工作中正在使用这一套方案并且能够完全将当下的需求应付自如并且没有什么凌乱的地方，其实也是没有必要换成redux-saga的。</p>\n<p>接下来我们讲 redux-saga，先看名字：saga，这个术语常用于CQRS架构，代表查询与责任分离。</p>\n<p>相比于 redux-thunk，前者通常是把数据查询等请求放在 actions 中(不纯净的 actions)，并且这些 actions 可以继续回调调用其他 actions(纯净的 actions)，从而完成数据的更新；而 redux-saga，则保持了 actions 的纯粹性，单独抽出一层专门来处理数据请求等操作(saga函数)。</p>\n<p>这样做还有另外一些好处：</p>\n<ul>\n<li>由于我们已经将数据处理数据请求等异步操作抽离出来了，并且通过 generator 来处理，我们便可以方便地进行多种异步管理：比如同时按顺序执行多个任务、在多个异步任务中启动race等。</li>\n<li>这样做可以延长任务的生命周期，我们的一次调用可以不再是一个”调完即走”的过程，还可以是一个LLT（Long Lived Transaction)的事物处理过程，比如我们可以将用户的登入、登出的管理放在一个saga函数中处理。</li>\n</ul>\n<p>当然，redux-saga还有比如拥有有诸多常用并且声明式易测的 Effects、可以无阻塞的fork等一些更复杂的异步操作和管理方法，如果应用中有较多复杂的异步操作流程，使用redux-saga无疑会让条理更加清楚。</p>\n<p>当然，本文的目的不是介绍或者安利redux-saga，只是因为redux-saga是 dva 的一个基础，相关概念点到为止，如需了解更多请自行参考资料。</p>\n<h3 id=\"dva-源码解读\"><a href=\"#dva-源码解读\" class=\"headerlink\" title=\"dva 源码解读\"></a>dva 源码解读</h3><p>我们的源码分析流程是这样的：通过一个使用 dva 开发的例子，随着其对 dva 函数的逐步调用，来分析内部 dva 相关函数的实现原理。</p>\n<p>我们分析采用的例子是 dva 官方提供的一个增删改查的应用，可以在<a href=\"https://github.com/dvajs/dva/tree/rewrite-dynamic\" target=\"_blank\" rel=\"noopener\">这里</a>找到它的源代码。</p>\n<p>我们先看该例子的入口文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dva from &apos;dva&apos;;</span><br><span class=\"line\">import createHistory from &apos;history/createBrowserHistory&apos;;</span><br><span class=\"line\">import createLoading from &apos;dva-loading&apos;;</span><br><span class=\"line\">import &#123; message &#125; from &apos;antd&apos;;</span><br><span class=\"line\">import &apos;./index.css&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const ERROR_MSG_DURATION = 3; // 3 秒</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. Initialize</span><br><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  history: createHistory(),</span><br><span class=\"line\">  onError(e) &#123;</span><br><span class=\"line\">    message.error(e.message, ERROR_MSG_DURATION);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. Plugins</span><br><span class=\"line\">app.use(createLoading());</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. Model</span><br><span class=\"line\">// Moved to router.js</span><br><span class=\"line\">// 这里的 Model 被转移到了动态加载的 router 里面，我们也可以如下写：</span><br><span class=\"line\">// app.model(require(&apos;./models/users&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. Router</span><br><span class=\"line\">app.router(require(&apos;./router&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 5. Start</span><br><span class=\"line\">app.start(&apos;#root&apos;);</span><br></pre></td></tr></table></figure>\n<p>我们发现dva从初始化配置到最后的start(现在的dva start函数在不传入container的情况下可以返回React Component，便于服务端渲染等，但这里我们还是按照例子的写法来)。</p>\n<p>这里我们先有必要解释一下，dva 在当前依据能力和依赖版本的不同，有多个可引入的版本，我们的例子和所要分析的源代码都是基于 react-router V4 的 dva 版本。</p>\n<p>在源代码中，相关目录主要为 dva 目录(packages/dva) 和 dva-core(packages/dva-core)目录，前者主要拥有history管理、router、动态加载等功能，而后者是不依赖这些内容的基础模块部分，为前者所引用</p>\n<h4 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h4><p>第一步这里传入了两个内容：(dva构造函数总共可以传入那些 opts，会在下文中进行说明)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  history: createHistory(),</span><br><span class=\"line\">  onError(e) &#123;</span><br><span class=\"line\">    message.error(e.message, ERROR_MSG_DURATION);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这一步的相关核心代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function (opts = &#123;&#125;) &#123;</span><br><span class=\"line\">  const history = opts.history || createHashHistory(); // 默认为 HashHistory</span><br><span class=\"line\">  const createOpts = &#123;</span><br><span class=\"line\">    initialReducer: &#123;</span><br><span class=\"line\">      routing, // 来自 react-router-redux 的 routerReducer</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setupMiddlewares(middlewares) &#123;</span><br><span class=\"line\">      return [</span><br><span class=\"line\">        routerMiddleware(history), // 来自 react-router-redux 的 routerMiddleware</span><br><span class=\"line\">        ...middlewares,</span><br><span class=\"line\">      ];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setupApp(app) &#123;</span><br><span class=\"line\">      app._history = patchHistory(history); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const app = core.create(opts, createOpts);</span><br><span class=\"line\">  const oldAppStart = app.start;</span><br><span class=\"line\">  app.router = router;</span><br><span class=\"line\">  app.start = start;</span><br><span class=\"line\">  return app;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 一些用到的函数的定义...</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面大多数内容都比较简单，这里面提两个地方：</p>\n<ol>\n<li>patchHistory：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function patchHistory(history) &#123;</span><br><span class=\"line\">  const oldListen = history.listen;</span><br><span class=\"line\">  history.listen = (callback) =&gt; &#123;</span><br><span class=\"line\">    callback(history.location);</span><br><span class=\"line\">    return oldListen.call(history, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return history;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然，这里的意思是让第一次被绑定 listener 的时候执行一遍 callback，可以用于初始化相关操作。</p>\n<p>我们可以在<code>router.js</code>中添加如下代码来验证：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.listen((location, action)=&gt;&#123;</span><br><span class=\"line\">  console.log(&apos;history listen:&apos;, location, action)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在完成可选项的构造之后，调用了 dva-core 中暴露的 create 函数。</li>\n</ol>\n<p>create 函数本身也并不复杂，核心代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">hooksAndOpts = &#123;&#125;, createOpts = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    initialReducer,</span><br><span class=\"line\">    setupApp = noop,</span><br><span class=\"line\">  &#125; = createOpts;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> plugin = <span class=\"keyword\">new</span> Plugin(); <span class=\"comment\">// 实例化钩子函数管理类</span></span><br><span class=\"line\">  plugin.use(filterHooks(hooksAndOpts)); <span class=\"comment\">// 这个时候先对 obj 进行清理，清理出在我们定义的类型之外的 hooks，之后进行统一绑定</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = &#123;</span><br><span class=\"line\">    _models: [</span><br><span class=\"line\">      prefixNamespace(&#123; ...dvaModel &#125;), <span class=\"comment\">// 前缀处理</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    _store: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    _plugin: plugin,</span><br><span class=\"line\">    use: plugin.use.bind(plugin),</span><br><span class=\"line\">    model, <span class=\"comment\">// 下文定义</span></span><br><span class=\"line\">    start, <span class=\"comment\">// 下文定义</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> app;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//一些函数的定义</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面我们可以看到，这里的 <code>hooksAndOpts</code> 实际上就是一开始我们构造 dva 的时候传入的 opts 对象经过处理之后的结果。</p>\n<p>我们可以传入的可选项，实际上都在 <code>Plugin.js</code> 中写明了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const hooks = [</span><br><span class=\"line\">  &apos;onError&apos;,</span><br><span class=\"line\">  &apos;onStateChange&apos;,</span><br><span class=\"line\">  &apos;onAction&apos;,</span><br><span class=\"line\">  &apos;onHmr&apos;,</span><br><span class=\"line\">  &apos;onReducer&apos;,</span><br><span class=\"line\">  &apos;onEffect&apos;,</span><br><span class=\"line\">  &apos;extraReducers&apos;,</span><br><span class=\"line\">  &apos;extraEnhancers&apos;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>具体 <a href=\"https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md#appusehooks\" target=\"_blank\" rel=\"noopener\">hooks的作用可以在这里进行查阅</a>。</p>\n<p>Plugin 插件管理类(实际上我认为称其为钩子函数管理类比较合适)除了定义了上文的使用到的use方法(挂载插件)、还有apply方法(执行某一个钩子下挂载的所有回调)、get方法(获取某一个钩子下的所有回调，返回数组)</p>\n<h4 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h4><p>这里的第二步比较简洁：我们知道实际上这里就是使用了<code>plugin.use</code>方法挂载了一个插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(createLoading()); <span class=\"comment\">// 需要注意，插件挂载需要在 app.start 之前</span></span><br></pre></td></tr></table></figure>\n<p>createLoading 这个插件实际上是官方提供的 Loading 插件，通过这个插件我们可以非常方便地进行 Loading 的管理，无需进行手动管理，我们可以先<a href=\"https://www.jianshu.com/p/61fe7a57fad4\" target=\"_blank\" rel=\"noopener\">看一篇文章</a>来简单了解一下。</p>\n<p>这个插件看似神奇，实际上原理也比较简单，主要用了<code>onEffect</code>钩子函数(装饰器)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onEffect</span>(<span class=\"params\">effect, &#123; put &#125;, model, actionType</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; namespace &#125; = model;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (only.length === <span class=\"number\">0</span> &amp;&amp; except.length === <span class=\"number\">0</span>)</span><br><span class=\"line\">        || (only.length &gt; <span class=\"number\">0</span> &amp;&amp; only.indexOf(actionType) !== <span class=\"number\">-1</span>)</span><br><span class=\"line\">        || (except.length &gt; <span class=\"number\">0</span> &amp;&amp; except.indexOf(actionType) === <span class=\"number\">-1</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: SHOW, <span class=\"attr\">payload</span>: &#123; namespace, actionType &#125; &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> effect(...args);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: HIDE, <span class=\"attr\">payload</span>: &#123; namespace, actionType &#125; &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>结合基于的redux-saga，在目标异步调用开始的时候<code>yield put({ type: SHOW, payload: { namespace, actionType } });</code>，在异步调用结束的时候<code>yield put({ type: HIDE, payload: { namespace, actionType } });</code>，这样就可以管理异步调用开始和结束的Loading状态了。</p>\n<h4 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h4><p>第三步这里其实省略了，因为使用了动态加载，将 Models 定义的内容和 React Component 进行了动态加载，实际上也可以按照注释的方法来写。</p>\n<p>但是没有关系，我们还是可以分析 models 引入的文件中做了哪些事情(下面列出的代码在原基础上进行了一些简化):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> queryString <span class=\"keyword\">from</span> <span class=\"string\">'query-string'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> usersService <span class=\"keyword\">from</span> <span class=\"string\">'../services/users'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespace: <span class=\"string\">'users'</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    list: [],</span><br><span class=\"line\">    total: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    page: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    save(state, &#123; <span class=\"attr\">payload</span>: &#123; <span class=\"attr\">data</span>: list, total, page &#125; &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, list, total, page &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    *fetch(&#123; <span class=\"attr\">payload</span>: &#123; page = <span class=\"number\">1</span> &#125; &#125;, &#123; call, put &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; data, headers &#125; = <span class=\"keyword\">yield</span> call(usersService.fetch, &#123; page &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">'save'</span>,</span><br><span class=\"line\">        payload: &#123;</span><br><span class=\"line\">          data,</span><br><span class=\"line\">          total: <span class=\"built_in\">parseInt</span>(headers[<span class=\"string\">'x-total-count'</span>], <span class=\"number\">10</span>),</span><br><span class=\"line\">          page: <span class=\"built_in\">parseInt</span>(page, <span class=\"number\">10</span>),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    *reload(action, &#123; put, select &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> page = <span class=\"keyword\">yield</span> select(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.users.page);</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'fetch'</span>, <span class=\"attr\">payload</span>: &#123; page &#125; &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  subscriptions: &#123;</span><br><span class=\"line\">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> history.listen(<span class=\"function\">(<span class=\"params\">&#123; pathname, search &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> query = queryString.parse(search);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/users'</span>) &#123;</span><br><span class=\"line\">          dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'fetch'</span>, <span class=\"attr\">payload</span>: query &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这些内容，我们通过<code>app.model(require(&#39;./models/users&#39;));</code>就可以引入。</p>\n<p>实际上，model 函数本身还是比较简单的，但由于 dva 拥有 model 动态加载的能力，实际上调用 app.start 前和 app.start 后model函数是不一样的。</p>\n<p>调用 start 函数前，我们直接挂载即可(因为start函数中会对所有model进行遍历性统一处理，所以无需过多处理)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">model</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      checkModel(m, app._models);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    app._models.push(prefixNamespace(m));</span><br><span class=\"line\">    <span class=\"comment\">// 把 model 注册到 app 的 _models 里面，但是当 app start 之后，就不能仅仅用这种方法了，需要 injectModel</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>调用了 start 函数之后，model函数被替换成如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">injectModel</span>(<span class=\"params\">createReducer, onError, unlisteners, m</span>) </span>&#123;</span><br><span class=\"line\">    model(m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = app._store;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m.reducers) &#123;</span><br><span class=\"line\">      store.asyncReducers[m.namespace] = getReducer(m.reducers, m.state);</span><br><span class=\"line\">      store.replaceReducer(createReducer(store.asyncReducers));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m.effects) &#123;</span><br><span class=\"line\">      store.runSaga(app._getSaga(m.effects, m, onError, plugin.get(<span class=\"string\">'onEffect'</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m.subscriptions) &#123;</span><br><span class=\"line\">      unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>我们首先分析第一个 if 中的内容</strong>：首先通过getReducer函数将转换好的 reducers 挂载(或替换)到 store.asyncReducers[m.namespace] 中，然后通过 redux 本身提供的能力 replaceReducer 完成 reducer 的替换。</p>\n<p>这里我们需要注意 getReducer 函数，实际上，dva 里面 reducers 写法和我们之前直接使用 redux 的写法略有不同：</p>\n<p>我们这里的 reducers，实际上要和 action 中的 actionType 同名的 reducer，所以这里我们没有必要去写 switch case 了，对于某一个 reducer 来说其行为应该是确定的，这给 reducers 的写法带来了一定的简化，当然，我们可以使用 extraReducers 定义我们之前习惯的那种比较复杂的 reducers。</p>\n<p><strong>接下来我们分析第二个 if 中的内容</strong>：第二个函数首先获取到了我们定义的 effects 并通过 _getSaga 进行处理，然后使用 <code>runSaga</code>(实际上就是createSagaMiddleware().run，来自于redux-saga) 进行执行。</p>\n<p>实际上，这里的 <code>_getSaga</code> 函数比较复杂，我们接下来重点介绍这个函数。</p>\n<p><code>_getSaga</code> 函数由 <code>getSaga.js</code> 暴露，其定义如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSaga</span>(<span class=\"params\">resolve, reject, effects, model, onError, onEffect</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 返回一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> effects) &#123;  <span class=\"comment\">// 这个函数对 effects 里面的所有键</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(effects, key)) &#123; <span class=\"comment\">// 先判断一下键是属于自己的</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> watcher = getWatcher(resolve, reject, key, effects[key], model, onError, onEffect);</span><br><span class=\"line\">        <span class=\"comment\">// 然后调用getWatch获取watcher</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> task = <span class=\"keyword\">yield</span> sagaEffects.fork(watcher); <span class=\"comment\">// 利用 fork 开启一个 task</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> sagaEffects.fork(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 这样写的目的是，如果我们移除了这个 model 要及时结束掉</span></span><br><span class=\"line\">          <span class=\"keyword\">yield</span> sagaEffects.take(<span class=\"string\">`<span class=\"subst\">$&#123;model.namespace&#125;</span>/@@CANCEL_EFFECTS`</span>);</span><br><span class=\"line\">          <span class=\"keyword\">yield</span> sagaEffects.cancel(task);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getWatcher 的一些核心代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWatcher</span>(<span class=\"params\">resolve, reject, key, _effect, model, onError, onEffect</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> effect = _effect;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> type = <span class=\"string\">'takeEvery'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ms;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(_effect)) &#123;</span><br><span class=\"line\">    effect = _effect[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> opts = _effect[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 对 opts 进行一定的校验</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">sagaWithCatch</span>(<span class=\"params\">...args</span>) </span>&#123; <span class=\"comment\">// 都会调用这个过程</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> sagaEffects.put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span><span class=\"subst\">$&#123;NAMESPACE_SEP&#125;</span>@@start`</span> &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"keyword\">yield</span> effect(...args.concat(createEffects(model)));</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> sagaEffects.put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span><span class=\"subst\">$&#123;NAMESPACE_SEP&#125;</span>@@end`</span> &#125;);</span><br><span class=\"line\">      resolve(key, ret);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      onError(e);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!e._dontReject) &#123;</span><br><span class=\"line\">        reject(key, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sagaWithOnEffect = applyOnEffect(onEffect, sagaWithCatch, model, key); </span><br><span class=\"line\">  <span class=\"comment\">// 挂载 onEffect 钩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'watcher'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> sagaWithCatch;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'takeLatest'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> takeLatest(key, sagaWithOnEffect);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'throttle'</span>: <span class=\"comment\">// 起到节流的效果，在 ms 时间内仅仅会被触发一次</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> throttle(ms, key, sagaWithOnEffect);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> takeEvery(key, sagaWithOnEffect);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数的工作，可以主要分为以下三个部分：</p>\n<p>1.将 effect 包裹成 sagaWithCatch，除了便于错误处理和增加前后钩子，值得我们注意的是 resolve 和 reject，</p>\n<p>这个 resolve 和 reject，实际上是来自<code>createPromiseMiddleware.js</code></p>\n<p>我们知道，我们在使用redux-saga的过程中，实际上是监听未来的action，并执行 effects，所以我们在一个 effects 函数中执行一些异步操作，然后 put(dispatch) 一个 action，还是会被监听这个 action 的其他 saga 监听到。</p>\n<p>所以就有如下场景：我们 dispatch 一个 action，这个时候如果我们想获取到什么时候监听这个 action 的 saga 中的异步操作执行结束，是办不到的(因为不是所有的时候我们都把所有处理逻辑写在 saga 中)，所以我们的 dispatch 有的时候需要返回一个 Promise 从而我们可以进行异步结束后的回调(这个 Promise 在监听者 saga 异步执行完后被决议，见上文<code>sagaWithCatch</code>函数源代码)。</p>\n<p>如果我讲的还是比较混乱，也可以参考<a href=\"https://github.com/dvajs/dva/issues/175\" target=\"_blank\" rel=\"noopener\">这个issue</a></p>\n<p>对于这个情况，我认为这是 dva 代码最精彩的地方之一，作者通过定义如下的middleware:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> middleware = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> next =&gt; <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> &#123; type &#125; = action;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (isEffect(type)) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       map[type] = &#123;</span><br><span class=\"line\">         resolve: wrapped.bind(<span class=\"literal\">null</span>, type, resolve),</span><br><span class=\"line\">         reject: wrapped.bind(<span class=\"literal\">null</span>, type, reject),</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> next(action);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapped</span>(<span class=\"params\">type, fn, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (map[type]) <span class=\"keyword\">delete</span> map[type];</span><br><span class=\"line\">   fn(args);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">type, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (map[type]) &#123;</span><br><span class=\"line\">     map[type].resolve(args);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">type, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (map[type]) &#123;</span><br><span class=\"line\">     map[type].reject(args);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>并且在上文的<code>sagaWithCatch</code>相关effect执行结束的时候调用 resolve，让 dispatch 返回了一个 Promise。</p>\n<p>当然，上面这段代码还是有点问题的，这样会导致同名 reducer 和 effect 不会 fallthrough（即两者都执行），因为都已经返回了，action 便不会再进一步传递，关于这样设计的好坏，在<a href=\"https://github.com/sorrycc/blog/issues/48\" target=\"_blank\" rel=\"noopener\">这里</a>有过一些讨论，笔者不进行展开表述。</p>\n<p>2.在上面冗长的第一步之后，又通过<code>applyOnEffect</code>函数包裹了<code>OnEffect</code>的钩子函数，这相当于是一种<code>compose</code>，(上文的 dva-loading 中间件实际上就是在这里被处理的)其实现对于熟悉 redux 的同学来说应该不难理解：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyOnEffect</span>(<span class=\"params\">fns, effect, model, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn <span class=\"keyword\">of</span> fns) &#123;</span><br><span class=\"line\">    effect = fn(effect, sagaEffects, model, key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.最后，根据我们定义的type(默认是<code>takeEvery</code>，也就是都执行)，来选择不同的 saga，takeLatest 即为只是执行最近的一个，throttle则起到节流的效果，一定时间内仅仅允许被触发一次，这些都是 redux-saga 的内部实现，dva 也是基本直接引用，因此在这里不进行展开。</p>\n<p><strong>最后我们分析<code>injectModel</code>第三个<code>if</code>中的内容</strong>:处理<code>subscriptions</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (m.subscriptions) &#123;</span><br><span class=\"line\">  unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>subscriptions</code>可以理解为和这个model有关的全局监听，但是相对独立。这一个步骤首先调用<code>runSubscription</code>来一个一个调用我们的<code>subscriptions</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">subs, model, app, onError</span>) </span>&#123; <span class=\"comment\">// 在index.js中被重命名为 runSubscription</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> funcs = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nonFuncs = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> subs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(subs, key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub = subs[key];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> unlistener = sub(&#123;</span><br><span class=\"line\">        dispatch: prefixedDispatch(app._store.dispatch, model),</span><br><span class=\"line\">        history: app._history,</span><br><span class=\"line\">      &#125;, onError);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(unlistener)) &#123;</span><br><span class=\"line\">        funcs.push(unlistener);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        nonFuncs.push(key);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; funcs, nonFuncs &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正如我们所期待的，<code>run</code>函数就是一个一个执行<code>subscriptions</code>，但是这里有一点需要我们注意的，我们定义的<code>subscriptions</code>应该是需要返回一个<code>unlistener</code>来返回接触函数，这样当整个 model 被卸载的时候 dva 会自动调用这个接解除函数(也就是为什么这里的返回函数被命名为<code>unlistener</code>)</p>\n<h4 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h4><p>源代码中的第四步，是对 router 的挂载：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.router(<span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>));</span><br></pre></td></tr></table></figure>\n<p><code>require(&#39;./router&#39;)</code>返回的内容在源代码中经过一系列引用传递最后直接被构造成 React Component 并且最终调用 ReactDom.render 进行渲染，这里没有什么好说的，值得一提的就是 router 的动态加载。</p>\n<p>动态加载在该样例中是这样使用的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Switch, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> dynamic <span class=\"keyword\">from</span> <span class=\"string\">'dva/dynamic'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RouterConfig</span>(<span class=\"params\">&#123; history, app &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> IndexPage = dynamic(&#123;</span><br><span class=\"line\">    app,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./routes/IndexPage'</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> Users = dynamic(&#123;</span><br><span class=\"line\">    app,</span><br><span class=\"line\">    models: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">      <span class=\"keyword\">import</span>(<span class=\"string\">'./models/users'</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./routes/Users'</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  history.listen(<span class=\"function\">(<span class=\"params\">location, action</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'history listen:'</span>, location, action)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;IndexPage&#125; /&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/users\"</span> component=&#123;Users&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Router&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看出，主要就是利用<code>dva/dynamic.js</code>暴露的 dynamic 函数进行动态加载，接下来我们简单看一下 dynamic 函数做了什么:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dynamic</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; app, <span class=\"attr\">models</span>: resolveModels, <span class=\"attr\">component</span>: resolveComponent &#125; = config;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> asyncComponent(&#123;</span><br><span class=\"line\">    resolve: config.resolve || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> models = <span class=\"keyword\">typeof</span> resolveModels === <span class=\"string\">'function'</span> ? resolveModels() : [];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> component = resolveComponent();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.all([...models, component]).then(<span class=\"function\">(<span class=\"params\">ret</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!models || !models.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(ret[<span class=\"number\">0</span>]);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> len = models.length;</span><br><span class=\"line\">            ret.slice(<span class=\"number\">0</span>, len).forEach(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              m = m.default || m;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(m)) &#123;</span><br><span class=\"line\">                m = [m];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              m.map(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> registerModel(app, _)); <span class=\"comment\">// 注册所有的 model</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            resolve(ret[len]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...config,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里主要调用了 asyncComponent 函数，接下来我们再看一下这个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncComponent</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; resolve &#125; = config;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(...args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(...args);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.LoadingComponent =</span><br><span class=\"line\">        config.LoadingComponent || defaultLoadingComponent;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">        AsyncComponent: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.load();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mounted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mounted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    load() &#123;</span><br><span class=\"line\">      resolve().then(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> AsyncComponent = m.default || m;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mounted) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.setState(&#123; AsyncComponent &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.state.AsyncComponent = AsyncComponent; <span class=\"comment\">// eslint-disable-line</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; AsyncComponent &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; LoadingComponent &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (AsyncComponent) <span class=\"keyword\">return</span> &lt;AsyncComponent &#123;...this.props&#125; /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &lt;LoadingComponent &#123;...this.props&#125; /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数逻辑比较简洁，我们分析一下动态加载流程；</p>\n<ul>\n<li>在 constructor 里面调用 <code>this.load();</code> ( LoadingComponent 为占位 component)</li>\n<li>在 <code>this.load();</code> 函数里面调用 <code>dynamic</code> 函数返回的 resolve 方法</li>\n<li>resolve 方法实际上是一个 Promise，把相关 models 和 component 加载完之后 resolve (区分这两个 resolve)</li>\n<li>加载完成之后返回 AsyncComponent (即加载的 Component)</li>\n</ul>\n<p>动态加载主流程结束，至于动态加载的代码分割工作，可以使用 webpack3 的 <code>import()</code> 动态加载能力(例子中也是这样使用的)。</p>\n<h4 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h4><p>第五步骤就是 start 了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.start(<span class=\"string\">'#root'</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候如果我们在 start 函数中传入 DomElement 或者 DomQueryString，就会直接启动应用了，如果我们这个时候不传入任何内容，实际上返回的是一个<code>&lt;Provider /&gt;</code> (React Component)，便于服务端渲染。 相关判断逻辑如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (container) &#123;</span><br><span class=\"line\">     render(container, store, app, app._router);</span><br><span class=\"line\">     app._plugin.apply(<span class=\"string\">'onHmr'</span>)(render.bind(<span class=\"literal\">null</span>, container, store, app));</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> getProvider(store, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>._router);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>至此，主要流程结束，以上几个步骤也包括了 dva 源码做的主要工作。</p>\n<p>当然 dva 源码中还有一些比如前缀处理等工作，但是相比于以上内容非常简单，所以在这里不进行分析了。</p>\n<h3 id=\"dva-core-文件目录\"><a href=\"#dva-core-文件目录\" class=\"headerlink\" title=\"dva-core 文件目录\"></a>dva-core 文件目录</h3><p>dva-core中的源码文件目录以及其功能:</p>\n<ul>\n<li>checkModel 对我们定义的 Model 进行检查是否符合要求</li>\n<li>constants 非常简单的常量文件，目前只定义了一个常量：NAMESPACE_SEP(/)</li>\n<li>cratePromiseMiddleware 笔者自己定义的 redux 插件</li>\n<li>createStore 封装了 redux 原生的 createStore</li>\n<li>getReducer 这里面的函数其实主要就是调用了 handleActions 文件导出的函数</li>\n<li>getSaga 将用户输入的 effects 部分的键值对函数进行管理</li>\n<li>handleActions 是将 dva 风格的 reducer 和 state 转化成 redux 本来接受的那种方式</li>\n<li>index 主入口文件</li>\n<li>Plugin 插件类：可以管理不同钩子事件的回调函数，拥有增加、获取、执行钩子函数的功能</li>\n<li>perfixedDispatch 该文件提供了对 Dispatch 增加前缀的工具性函数 prefixedDispatch</li>\n<li>prefixNamespace 该文件提供了对 reducer 和 effects 增加前缀的工具性函数 prefixNamespace</li>\n<li>prefixType 判断是 reducer 还是 effects</li>\n<li>subscriptions 该文件提供了运行 subscriptions 和调用用户返回的 unlisten 函数以及删除缓存的功能</li>\n<li>utils 提供一些非常基础的工具函数</li>\n</ul>\n<h3 id=\"优势总结\"><a href=\"#优势总结\" class=\"headerlink\" title=\"优势总结\"></a>优势总结</h3><ul>\n<li>动态 model，已经封装好了整套调用，动态添加/删除 model 变得非常简单</li>\n<li>默认封装好了管理 effects 的方式，有限可选可配置，降低学习成本的同时代码更利于维护</li>\n<li>易于上手，集成redux、redux-saga、react-router等常用功能</li>\n</ul>\n<h3 id=\"劣势总结\"><a href=\"#劣势总结\" class=\"headerlink\" title=\"劣势总结\"></a>劣势总结</h3><ul>\n<li>版本区隔不明显，dva 有 1.x 和 2.x 两种版本，之间API有些差异，但是官网提供的一些样例等中没有说明基于的版本，并且有的还是基于旧版本的，会给新手带来很多疑惑。</li>\n<li>内容繁杂，但是却没有一个整合性质的官方网站，大都是通过 list 的形式列下来写在README的。</li>\n<li>目前比如动态加载等还存在着一些问题，和直接采用react配套工具写的效果有所区别。</li>\n<li>很多 issues 不知道为什么就被关闭了，作者在最后也并未给出合理的解释。</li>\n<li>dva2 之后有点将 effects 和 actions 混淆，这一点我也并不是非常认同，当然原作者可能有自己的考虑，这里不过多评议。</li>\n</ul>\n<p>总之，作为一个个人主力的项目(主要开发者贡献了99%以上的代码)，可以看出作者的功底深厚，经验丰富，但是由于这样一个体系化的东西牵扯内容较多，并且非常受制于react、redux、react-router、redux-saga等的版本影响，<strong>不建议具备一定规模的非阿里系团队在生产环境中使用</strong>，但是如果是快速成型的中小型项目或者个人应用，使用起来还是有很大帮助的。</p>\n<h3 id=\"TODOS\"><a href=\"#TODOS\" class=\"headerlink\" title=\"TODOS\"></a>TODOS</h3><p>笔者也在准备做一个和 dva 处于同一性质，但是设计、实现和使用有所区别的框架，希望能够尽快落成。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjtyzdrzx0007gxy0g8jbo33f","category_id":"cjtyzdrzz000agxy0vo7e8zok","_id":"cjtyzds08000rgxy0cic0otx2"},{"post_id":"cjtyzdrzx0007gxy0g8jbo33f","category_id":"cjtyzds07000lgxy01rttqc4h","_id":"cjtyzds08000tgxy0nu8non71"},{"post_id":"cjtyzds00000bgxy0lhq8b495","category_id":"cjtyzds05000fgxy0oy31lz93","_id":"cjtyzds09000vgxy06mw3rp4p"},{"post_id":"cjtyzds00000bgxy0lhq8b495","category_id":"cjtyzds08000ogxy0xryaz0wf","_id":"cjtyzds09000wgxy0kodjyw0b"},{"post_id":"cjtyzds0w001pgxy06fifebq8","category_id":"cjtyzdrzz000agxy0vo7e8zok","_id":"cjtyzds11001zgxy0978seyja"},{"post_id":"cjtyzds0w001pgxy06fifebq8","category_id":"cjtyzds0z001sgxy0bknp1cac","_id":"cjtyzds120022gxy0ecifpzoa"}],"PostTag":[{"post_id":"cjtyzdrzp0001gxy0yzc7m898","tag_id":"cjtyzdrzu0005gxy0debtfk1v","_id":"cjtyzds05000ggxy0fdwhruzk"},{"post_id":"cjtyzdrzp0001gxy0yzc7m898","tag_id":"cjtyzdrzz0009gxy067bbjou1","_id":"cjtyzds06000igxy0boqdm91y"},{"post_id":"cjtyzdrzs0003gxy0ixy3lfwb","tag_id":"cjtyzdrzu0005gxy0debtfk1v","_id":"cjtyzds07000ngxy0zlkcycaj"},{"post_id":"cjtyzdrzs0003gxy0ixy3lfwb","tag_id":"cjtyzds06000jgxy0xvdq5lm0","_id":"cjtyzds08000pgxy0wlzi55dg"},{"post_id":"cjtyzdrzw0006gxy00gb51tvd","tag_id":"cjtyzds07000mgxy0snldukue","_id":"cjtyzds08000sgxy00nikzo91"},{"post_id":"cjtyzdrzx0007gxy0g8jbo33f","tag_id":"cjtyzds08000qgxy06itt10df","_id":"cjtyzds09000zgxy0fodp6h75"},{"post_id":"cjtyzdrzx0007gxy0g8jbo33f","tag_id":"cjtyzds08000ugxy0346wz3hd","_id":"cjtyzds090010gxy0d4ttb7f6"},{"post_id":"cjtyzdrzx0007gxy0g8jbo33f","tag_id":"cjtyzds09000xgxy0gzxyke46","_id":"cjtyzds090012gxy0itequ6jn"},{"post_id":"cjtyzdrzy0008gxy0h8ds373a","tag_id":"cjtyzds09000ygxy0e7xhhinw","_id":"cjtyzds0a0014gxy0vodk55eo"},{"post_id":"cjtyzdrzy0008gxy0h8ds373a","tag_id":"cjtyzds090011gxy0y0vvosam","_id":"cjtyzds0a0015gxy0f67t3o74"},{"post_id":"cjtyzds00000bgxy0lhq8b495","tag_id":"cjtyzds0a0013gxy0k18gu2dr","_id":"cjtyzds0b001bgxy0a9d7yjxo"},{"post_id":"cjtyzds00000bgxy0lhq8b495","tag_id":"cjtyzds0a0016gxy0o1666hm1","_id":"cjtyzds0b001cgxy0j5k3akzv"},{"post_id":"cjtyzds00000bgxy0lhq8b495","tag_id":"cjtyzds0a0017gxy0p0vequij","_id":"cjtyzds0b001egxy0x8zmtb73"},{"post_id":"cjtyzds00000bgxy0lhq8b495","tag_id":"cjtyzds0a0018gxy08e7lmzbx","_id":"cjtyzds0c001fgxy0uv0ky9um"},{"post_id":"cjtyzds00000bgxy0lhq8b495","tag_id":"cjtyzds0b0019gxy0x0av28wr","_id":"cjtyzds0c001hgxy0y1smp6lo"},{"post_id":"cjtyzds04000egxy04bwymul0","tag_id":"cjtyzds07000mgxy0snldukue","_id":"cjtyzds0c001igxy0b5f55hzy"},{"post_id":"cjtyzds05000hgxy05fgopd8p","tag_id":"cjtyzds0b001dgxy0btg38z30","_id":"cjtyzds0c001jgxy0say82biy"},{"post_id":"cjtyzds06000kgxy0doi8xma1","tag_id":"cjtyzds0c001ggxy0krjqycch","_id":"cjtyzds0c001kgxy03c4bu1ex"},{"post_id":"cjtyzds0t001lgxy0v8nciigf","tag_id":"cjtyzds0w001ogxy0nn5djcu6","_id":"cjtyzds10001ugxy0kbwmqrgh"},{"post_id":"cjtyzds10001vgxy0gfd49k9w","tag_id":"cjtyzds0b001dgxy0btg38z30","_id":"cjtyzds11001xgxy0jmih5uqw"},{"post_id":"cjtyzds0u001ngxy0mqdj8idw","tag_id":"cjtyzdrzu0005gxy0debtfk1v","_id":"cjtyzds11001ygxy0antz18ai"},{"post_id":"cjtyzds0u001ngxy0mqdj8idw","tag_id":"cjtyzds0z001tgxy04ojz5xoh","_id":"cjtyzds110021gxy0matzxtez"},{"post_id":"cjtyzds0w001pgxy06fifebq8","tag_id":"cjtyzds08000qgxy06itt10df","_id":"cjtyzds120024gxy0ubnlb4wz"},{"post_id":"cjtyzds0w001pgxy06fifebq8","tag_id":"cjtyzds11001wgxy06mui6gac","_id":"cjtyzds130025gxy0galirz6k"},{"post_id":"cjtyzds0w001pgxy06fifebq8","tag_id":"cjtyzds110020gxy0pyq4v4sb","_id":"cjtyzds130027gxy0098aeehe"},{"post_id":"cjtyzds0y001qgxy0ne2mns3l","tag_id":"cjtyzds120023gxy0cgfpfz0o","_id":"cjtyzds130028gxy062ruh2fy"},{"post_id":"cjtyzds0z001rgxy00fo0s45g","tag_id":"cjtyzds130026gxy0uytf3oc9","_id":"cjtyzds130029gxy0slz92dqs"},{"post_id":"cjtyzds1c002bgxy09nbaq3dn","tag_id":"cjtyzds07000mgxy0snldukue","_id":"cjtyzds1d002dgxy0te9uw15h"},{"post_id":"cjtyzds1c002agxy02ig9hjss","tag_id":"cjtyzds07000mgxy0snldukue","_id":"cjtyzds1d002egxy01r5x9y08"},{"post_id":"cjtyzds1c002agxy02ig9hjss","tag_id":"cjtyzds1d002cgxy0mn3x5ldw","_id":"cjtyzds1d002fgxy09sg4g0vk"},{"post_id":"cjtyzds1p002ggxy0ysnqgl1b","tag_id":"cjtyzds1q002hgxy0lxi3jrm1","_id":"cjtyzds1q002igxy074rska0g"}],"Tag":[{"name":"centOS","_id":"cjtyzdrzu0005gxy0debtfk1v"},{"name":"redis","_id":"cjtyzdrzz0009gxy067bbjou1"},{"name":"node","_id":"cjtyzds06000jgxy0xvdq5lm0"},{"name":"javascript","_id":"cjtyzds07000mgxy0snldukue"},{"name":"Math","_id":"cjtyzds08000qgxy06itt10df"},{"name":"Mechanics","_id":"cjtyzds08000ugxy0346wz3hd"},{"name":"Matlab","_id":"cjtyzds09000xgxy0gzxyke46"},{"name":"Linux","_id":"cjtyzds09000ygxy0e7xhhinw"},{"name":"ssh","_id":"cjtyzds090011gxy0y0vvosam"},{"name":"Computer science","_id":"cjtyzds0a0013gxy0k18gu2dr"},{"name":"Parallel computing","_id":"cjtyzds0a0016gxy0o1666hm1"},{"name":"Fortran","_id":"cjtyzds0a0017gxy0p0vequij"},{"name":"OpenMP","_id":"cjtyzds0a0018gxy08e7lmzbx"},{"name":"MPI","_id":"cjtyzds0b0019gxy0x0av28wr"},{"name":"性能优化","_id":"cjtyzds0b001dgxy0btg38z30"},{"name":"ShadowSocks","_id":"cjtyzds0c001ggxy0krjqycch"},{"name":"PWA","_id":"cjtyzds0w001ogxy0nn5djcu6"},{"name":"nginx","_id":"cjtyzds0z001tgxy04ojz5xoh"},{"name":"Stochastic Differential Equations","_id":"cjtyzds11001wgxy06mui6gac"},{"name":"python","_id":"cjtyzds110020gxy0pyq4v4sb"},{"name":"react","_id":"cjtyzds120023gxy0cgfpfz0o"},{"name":"MVVM","_id":"cjtyzds130026gxy0uytf3oc9"},{"name":"前端监控","_id":"cjtyzds1d002cgxy0mn3x5ldw"},{"name":"前端框架","_id":"cjtyzds1q002hgxy0lxi3jrm1"}]}}